#define DEBUG
#define MYTEST

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Word = Microsoft.Office.Interop.Word;
//using NPOI.XWPF;
//using NPOI.XWPF.UserModel;
using System.IO;
using System.Xml;
using ICSharpCode.SharpZipLib.Zip;
using SharpCompress;
using SharpCompress.Reader;
using SharpCompress.Common;
using SharpCompress.Archive;

using iTextSharp.text;

using System.Configuration;
using System.Data.SqlClient;
using System.Data;
using System.Net;
using System.Net.Sockets;
using System.Threading;
using iTextSharp.text.pdf;
using System.Xml.Linq;
using System.Threading.Tasks;
//using Spire.Pdf;

namespace ConsoleApplication1
{
    #region//重写父类同名方法
    class MyClass
    {
        public void ShowMessage()
        { Console.WriteLine("我是父类"); }
    }

    class MyClass1 : MyClass
    {
         public void ShowMessage() // 这里就发生了重写,也可以说是隐藏了父类的方法. 这样做了之后就不能再使用父类的同名方法了.
        {
            Console.WriteLine("我是子类");
            base.ShowMessage();
        }
    }
    #endregion

    #region 覆盖父类的同名方法.
    class My
    {
        public virtual void SHowMessage()  //使用virtual关键字表示这个方法会被覆盖.
        { Console.WriteLine("我是父类,我将要被覆盖."); }
    }

    class My1 : My
    {
        public override void SHowMessage()  // 使用override 关键字来表示覆盖父类的同名方法.  覆盖和重写不同的是覆盖可以再调用父类的同名方法, 加一个base关键字就可以了.
        {
            Console.WriteLine("我是子类,我覆盖了父类的同名方法");
            //base.SHowMessage();  // 这里就调用了父类的SHowMessage方法.
        }
    }
    #endregion

    public class PDFSetWaterMark
    {
        /// <summary>
        /// 创建一个显示指定图片的pdf
        /// </summary>
        /// <param name="picPdfPath"></param>
        /// <param name="picPath"></param>
        /// <returns></returns>
        public static bool CreatePDFByPic(string picPdfPath, string picPath)
        {
            //新建一个文档
            Document doc = new Document();
            try
            {
                //建立一个书写器(Writer)与document对象关联
                PdfWriter.GetInstance(doc, new FileStream(picPdfPath, FileMode.Create, FileAccess.ReadWrite));
                //打开一个文档
                doc.Open();
                //向文档中添加内容
                Image img = Image.GetInstance(picPath);
                //img.SetAbsolutePosition();
                doc.Add(img);
                return true;
            }
            catch (Exception ex)
            {
                return false;
                throw ex;
            }
            finally
            {
                if (doc != null)
                {
                    doc.Close();
                }
            }

        }

        /// <summary>
        /// 加图片水印
        /// </summary>
        /// <param name="inputfilepath"></param>
        /// <param name="outputfilepath"></param>
        /// <param name="ModelPicName"></param>
        /// <param name="top"></param>
        /// <param name="left"></param>
        /// <returns></returns>
        public static bool PDFWatermark(string inputfilepath, string outputfilepath, string ModelPicName, float top, float left)
        {
            //throw new NotImplementedException();
            PdfReader pdfReader = null;
            PdfStamper pdfStamper = null;
            try
            {
                pdfReader = new PdfReader(inputfilepath);

                int numberOfPages = pdfReader.NumberOfPages;

                iTextSharp.text.Rectangle psize = pdfReader.GetPageSize(1);

                float width = psize.Width;

                float height = psize.Height;

                pdfStamper = new PdfStamper(pdfReader, new FileStream(outputfilepath, FileMode.Create));

                PdfContentByte waterMarkContent;

                iTextSharp.text.Image image = iTextSharp.text.Image.GetInstance(ModelPicName);

                image.GrayFill = 20;//透明度，灰色填充
                //image.Rotation//旋转
                //image.RotationDegrees//旋转角度
                //水印的位置 
                if (left < 0)
                {
                    left = width / 2 - image.Width + left;
                }

                //image.SetAbsolutePosition(left, (height - image.Height) - top);
                image.SetAbsolutePosition(left, (height / 2 - image.Height) - top);


                //每一页加水印,也可以设置某一页加水印 
                for (int i = 1; i <= numberOfPages; i++)
                {
                    //waterMarkContent = pdfStamper.GetUnderContent(i);//内容下层加水印
                    waterMarkContent = pdfStamper.GetOverContent(i);//内容上层加水印

                    waterMarkContent.AddImage(image);
                }
                //strMsg = "success";
                return true;
            }
            catch (Exception ex)
            {
                throw ex;

            }
            finally
            {

                if (pdfStamper != null)
                    pdfStamper.Close();

                if (pdfReader != null)
                    pdfReader.Close();
            }
        }
        /// <summary>
        /// 添加普通偏转角度文字水印
        /// </summary>
        /// <param name="inputfilepath"></param>
        /// <param name="outputfilepath"></param>
        /// <param name="waterMarkName"></param>
        /// <param name="permission"></param>
        public static void setWatermark(string inputfilepath, string outputfilepath, string waterMarkName)
        {
            PdfReader pdfReader = null;
            PdfStamper pdfStamper = null;
            try
            {
                pdfReader = new PdfReader(inputfilepath);
                pdfStamper = new PdfStamper(pdfReader, new FileStream(outputfilepath, FileMode.Create));
                int total = pdfReader.NumberOfPages + 1;
                iTextSharp.text.Rectangle psize = pdfReader.GetPageSize(1);
                float width = psize.Width;
                float height = psize.Height;
                PdfContentByte content;
                BaseFont font = BaseFont.CreateFont(@"C:\WINDOWS\Fonts\SIMFANG.TTF", BaseFont.IDENTITY_H, BaseFont.EMBEDDED);
                PdfGState gs = new PdfGState();
                for (int i = 1; i < total; i++)
                {
                    content = pdfStamper.GetOverContent(i);//在内容上方加水印
                    //content = pdfStamper.GetUnderContent(i);//在内容下方加水印
                    //透明度
                    gs.FillOpacity = 0.8f;
                    content.SetGState(gs);
                    //content.SetGrayFill(0.3f);
                    //开始写入文本
                    content.BeginText();
                    content.SetColorFill(BaseColor.RED);
                    content.SetFontAndSize(font, 20);
                    content.SetTextMatrix(0, 0);
                    content.ShowTextAligned(Element.ALIGN_CENTER, waterMarkName, width/2, height-20, 0);
                    //content.SetColorFill(BaseColor.BLACK);
                    //content.SetFontAndSize(font, 8);
                    //content.ShowTextAligned(Element.ALIGN_CENTER, waterMarkName, 0, 0, 0);
                    content.EndText();
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {

                if (pdfStamper != null)
                    pdfStamper.Close();

                if (pdfReader != null)
                    pdfReader.Close();
            }
        }

        public static void SetWatermark(string inputfilepath, string outputfilepath, string waterMarkName, int page)
        {
            PdfReader pdfReader = null;
            PdfStamper pdfStamper = null;
            try
            {
                pdfReader = new PdfReader(inputfilepath);
                pdfStamper = new PdfStamper(pdfReader, new FileStream(outputfilepath, FileMode.Create));
                //int total = pdfReader.NumberOfPages + 1;
                iTextSharp.text.Rectangle psize = pdfReader.GetPageSize(1);
                float width = psize.Width;
                float height = psize.Height;
                PdfContentByte content;
                BaseFont font = BaseFont.CreateFont(@"C:\WINDOWS\Fonts\SIMFANG.TTF", BaseFont.IDENTITY_H, BaseFont.EMBEDDED);
                PdfGState gs = new PdfGState();

                //content = pdfStamper.GetOverContent(i);//在内容上方加水印
                content = pdfStamper.GetUnderContent(page);//在内容下方加水印
                //透明度
                gs.FillOpacity = 0.8f;
                content.SetGState(gs);
                //content.SetGrayFill(0.3f);
                //开始写入文本
                content.BeginText();
                content.SetColorFill(BaseColor.RED);
                content.SetFontAndSize(font, 20);
                content.SetTextMatrix(0, 0);
                content.ShowTextAligned(Element.ALIGN_CENTER, waterMarkName, width / 2, height - 20, 0);
                content.EndText();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {

                if (pdfStamper != null)
                    pdfStamper.Close();

                if (pdfReader != null)
                    pdfReader.Close();
            }
        }
        /// <summary>
        /// 添加倾斜水印
        /// </summary>
        /// <param name="inputfilepath"></param>
        /// <param name="outputfilepath"></param>
        /// <param name="waterMarkName"></param>
        /// <param name="userPassWord"></param>
        /// <param name="ownerPassWord"></param>
        /// <param name="permission"></param>
        public static void setWatermark(string inputfilepath, string outputfilepath, string waterMarkName, string userPassWord, string ownerPassWord, int permission)
        {
            PdfReader pdfReader = null;
            PdfStamper pdfStamper = null;
            try
            {
                pdfReader = new PdfReader(inputfilepath);
                pdfStamper = new PdfStamper(pdfReader, new FileStream(outputfilepath, FileMode.Create));
                // 设置密码   
                //pdfStamper.SetEncryption(false,userPassWord, ownerPassWord, permission); 

                int total = pdfReader.NumberOfPages + 1;
                PdfContentByte content;
                BaseFont font = BaseFont.CreateFont(@"C:\WINDOWS\Fonts\SIMFANG.TTF", BaseFont.IDENTITY_H, BaseFont.EMBEDDED);
                PdfGState gs = new PdfGState();
                gs.FillOpacity = 0.2f;//透明度

                int j = waterMarkName.Length;
                char c;
                int rise = 0;
                for (int i = 1; i < total; i++)
                {
                    rise = 500;
                    content = pdfStamper.GetOverContent(i);//在内容上方加水印
                    //content = pdfStamper.GetUnderContent(i);//在内容下方加水印

                    content.BeginText();
                    content.SetColorFill(BaseColor.DARK_GRAY);
                    content.SetFontAndSize(font, 50);
                    // 设置水印文字字体倾斜 开始 
                    if (j >= 15)
                    {
                        content.SetTextMatrix(200, 120);
                        for (int k = 0; k < j; k++)
                        {
                            content.SetTextRise(rise);
                            c = waterMarkName[k];
                            content.ShowText(c + "");
                            rise -= 20;
                        }
                    }
                    else
                    {
                        content.SetTextMatrix(180, 100);
                        for (int k = 0; k < j; k++)
                        {
                            content.SetTextRise(rise);
                            c = waterMarkName[k];
                            content.ShowText(c + "");
                            rise -= 18;
                        }
                    }
                    // 字体设置结束 
                    content.EndText();
                    // 画一个圆 
                    //content.Ellipse(250, 450, 350, 550);
                    //content.SetLineWidth(1f);
                    //content.Stroke(); 
                }

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {

                if (pdfStamper != null)
                    pdfStamper.Close();

                if (pdfReader != null)
                    pdfReader.Close();
            }
        }

    }
    class Program
    {
        //private static UdpClient receiveUdpClient;
        //private static UdpClient sendUdpClient=new UdpClient(111);
        static ManualResetEvent mre=new ManualResetEvent(false);
        static Func<string, int[]> func;
        static DataTable dt = new DataTable();

        static void WriteErrorXml( int errType, string errInfo)
        {
            //if (!Directory.Exists(taskInfo.TempPath + "\\ErrorInfo"))
            //{
            //    Directory.CreateDirectory(taskInfo.TempPath + "\\ErrorInfo");
            //}
            XDocument newdoc = new XDocument();
            XElement node_log = new XElement("Log");
            XElement node_Record = new XElement("Record");
            node_Record.SetAttributeValue("ErrorInfo", errInfo);
            node_Record.SetAttributeValue("ErrorType", errType);
            node_log.Add(node_Record);
            newdoc.Add(node_log);
            newdoc.Save("ErrorInfo.XML");
        }
    
        static void Main(string[] args)
        {
            Word.Application _app = null;
            Word.Document document = null;
            _app = new Word.Application();
            Word.Documents d = _app.Documents;
            string wordFilePath = @"D:\work\51882\20151116\130921426078574090\6\2062\20151014005\2015年中国林业科学研究院\KKKK.doc";
            document = d.Open(wordFilePath);//, false, false, false, ref G_missing, G_missing, false, G_missing, G_missing, G_missing, G_missing, false, false, G_missing, true, G_missing);
            int pages = document.ComputeStatistics(Microsoft.Office.Interop.Word.WdStatistic.wdStatisticPages);
            document.ExportAsFixedFormat(@"E:\KK.pdf", Word.WdExportFormat.wdExportFormatPDF, false, Word.WdExportOptimizeFor.wdExportOptimizeForPrint, Word.WdExportRange.wdExportFromTo, pages-5, pages);
            Console.WriteLine();
            Console.Read();
        }
        static string Test(object ss)
        {
            for (int i = 0; i < 10; i++)
            {
                if (i == 5)
                {
                    int o = 0;
                    int sss= 2 / o;
                }
                Console.WriteLine("Test:" + i);
                Thread.Sleep(1000);
            }
            return ss.ToString();
        }

        private static void Select()
        {
            DataRow[] arrayDR = dt.Select();
            foreach (DataRow dr in arrayDR)
            {
                Console.WriteLine(dr[0].ToString() + "    " + dr[1].ToString());
            }
            Console.ReadLine();
        }

        private static void Select(string filterExpression)
        {
            DataRow[] arrayDR = dt.Select(filterExpression);
            foreach (DataRow dr in arrayDR)
            {
                Console.WriteLine(dr[0].ToString() + "    " + dr[1].ToString());
            }
            Console.ReadLine();
        }

        private static void Select(string filterExpression, string sort)
        {
            DataRow[] arrayDR = dt.Select(filterExpression, sort);
            foreach (DataRow dr in arrayDR)
            {
                Console.WriteLine(dr[0].ToString() + "    " + dr[1].ToString());
            }
            Console.ReadLine();
        }

        private static void Select(string filterExpression, string sort, DataViewRowState recordStates)
        {
            DataRow[] arrayDR = dt.Select(filterExpression, sort, recordStates);
            foreach (DataRow dr in arrayDR)
            {
                Console.WriteLine(dr[0].ToString() + "    " + dr[1].ToString());
            }
            Console.ReadLine();
        }

        static private void DoAsyncCallBack(IAsyncResult result)
        {

        }
        static int[] GetI(string put)
        { 
            return new int[]{put.Length,put.Length+2};
        }

        static void ThreadRun()
        {
            while (true)
            {
                switch (Console.ReadLine())
                {
                    case "1":
                        mre.Set();
                        Console.WriteLine("开始运行");
                        break;
                    case "2":
                        mre.Reset();
                        Console.WriteLine("暂停运行");
                        break;
                    default:
                        break;
                }
            }
        }

        public static int Click(int s)
        {
            int h = 0;
            for (int i = 0; i < s; i++)
            {
                h++;
                Thread.Sleep(1000);
            }
            return h;
        }

        public static void CombineMultiplePDFs(string[] fileNames, string outFile)
        {
            // step 1: creation of a document-object
            Document document = new Document();

            // step 2: we create a writer that listens to the document
            PdfCopy writer = new PdfCopy(document, new FileStream(outFile, FileMode.Create));
            if (writer == null)
            {
                return;
            }

            // step 3: we open the document
            document.Open();

            foreach (string fileName in fileNames)
            {
                // we create a reader for a certain document
                PdfReader reader = new PdfReader(fileName);
                reader.ConsolidateNamedDestinations();

                // step 4: we add content
                for (int i = 1; i <= reader.NumberOfPages; i++)
                {
                    PdfImportedPage page = writer.GetImportedPage(reader, i);
                    writer.AddPage(page);
                }

                //PRAcroForm form = reader.AcroForm;
                //if (form != null)
                //{
                //    writer.CopyAcroForm(reader);
                //}

                reader.Close();
            }

            // step 5: we close the document and writer
            writer.Close();
            document.Close();
        }



        public static void TraverseYY(string root)
        {
            Stack<string> pathStack = new Stack<string>();
            pathStack.Push(root);
            Queue<string> pathQueue = new Queue<string>();
            pathQueue.Enqueue(root);
            while (pathQueue.Count > 0)
            {
                string xxxx = pathQueue.Dequeue();
                DirectoryInfo diParent = new DirectoryInfo(xxxx);
                foreach (DirectoryInfo diChild in diParent.GetDirectories())
                {
                    pathQueue.Enqueue(diChild.FullName);
                    pathStack.Push(diChild.FullName);
                }
            }
           
            while (pathStack.Count > 0)
            {
                string path = pathStack.Pop();
                DirectoryInfo dChild = new DirectoryInfo(path);
                if (dChild.GetFiles().Length == 0)
                {
                    //dChild
                }
            }
           
        }

      

        public static  void Traverse(string dirPath)
        {
            //创建一个队列用于保存子目录
            Queue<string> pathQueue = new Queue<string>();
            pathQueue.Enqueue(dirPath);
            //开始循环查找文件，直到队列中无任何子目录
            while (pathQueue.Count > 0)
            {
                string xxxx = pathQueue.Dequeue();
                Console.WriteLine("出队列:"+xxxx);
                DirectoryInfo diParent = new DirectoryInfo(xxxx);
                foreach (DirectoryInfo diChild in diParent.GetDirectories())
                {
                    pathQueue.Enqueue(diChild.FullName);
                    Console.WriteLine("入队列:" + diChild.FullName);
                }
                foreach (FileInfo fi in diParent.GetFiles())
                {
                    if (fi.Extension == ".rar" || fi.Extension == ".zip")
                    {
                        string Path;
                        UnRarFile(fi.FullName,out Path);
                        pathQueue.Enqueue(Path);
                        Console.WriteLine("入队列:" + Path);
                        fi.Delete();
                    }
                }
            }
        }
        static private void UnRarFile(string zipFilePath, out string unZipDir)
        {
            string zipfilename = Path.GetFileName(zipFilePath);
            string zipfilepath=Path.GetDirectoryName(zipFilePath);
            unZipDir = zipfilepath + "\\" + zipfilename.Remove(zipfilename.LastIndexOf("."));
            if (!Directory.Exists(unZipDir))
            {
                Directory.CreateDirectory(unZipDir);
            }
            using (Stream stream = File.OpenRead(zipFilePath))
            {
                var reader = ReaderFactory.Open(stream);
                while (reader.MoveToNextEntry())
                {
                    if (!reader.Entry.IsDirectory)
                    {
                        reader.WriteEntryToDirectory(unZipDir, ExtractOptions.ExtractFullPath | ExtractOptions.Overwrite);
                    }
                }
            }  
        }
        static void UnZipFile(string zipFilePath)
        {
            string zipfilename = Path.GetFileName(zipFilePath);
            string zipfilepath = Path.GetDirectoryName(zipFilePath);
            string unZipDir = zipfilepath + "\\" + zipfilename.Remove(zipfilename.LastIndexOf("."));
            if (!Directory.Exists(unZipDir))
            {
                Directory.CreateDirectory(unZipDir);
            }
            var archive = ArchiveFactory.Open(zipFilePath);  
            foreach(var entry in archive.Entries)  
            {  
                if(!entry.IsDirectory)  
                {  
                    Console.WriteLine(entry.FilePath);
                    entry.WriteToDirectory(unZipDir, ExtractOptions.ExtractFullPath | ExtractOptions.Overwrite);  
                }  
            }  
        }

      

    }
}
