<?xml version="1.0"?>
<doc>
  <assembly>
    <name>C1.WPF</name>
  </assembly>
  <members>
    <member name="T:C1.WPF.C1BrushBuilder">
      <summary>
            Builds a Brush from an Input color a Design brush and a color base extrapolating the design brush.
            </summary>
    </member>
    <member name="M:C1.WPF.C1BrushBuilder.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.C1BrushBuilder" /> class.
            </summary>
    </member>
    <member name="F:C1.WPF.C1BrushBuilder.DesignBrushProperty">
      <summary>
            Original Brush created by a designer, which is typically a degree of colors based in the design color.
            </summary>
    </member>
    <member name="F:C1.WPF.C1BrushBuilder.DesignColorProperty">
      <summary>
            Gets or sets the base color for which the design has been created.
            </summary>
    </member>
    <member name="F:C1.WPF.C1BrushBuilder.InputProperty">
      <summary>
            Gets or sets the input which is the color to what the design brush will be extrapolated.
            </summary>
    </member>
    <member name="P:C1.WPF.C1BrushBuilder.DesignBrush">
      <summary>
            Gets or sets the design brush.
            Original Brush created by a designer, which is typically a degree of colors based in the design color.
            </summary>
      <value>The design brush.</value>
    </member>
    <member name="P:C1.WPF.C1BrushBuilder.DesignColor">
      <summary>
            Gets or sets the base color for which the design has been created.
            </summary>
      <value>The color of the design.</value>
    </member>
    <member name="P:C1.WPF.C1BrushBuilder.Input">
      <summary>
            Gets or sets the input which is the color to what the design brush will be extrapolated.
            </summary>
      <value>The input.</value>
    </member>
    <member name="P:C1.WPF.C1BrushBuilder.ExtrapolationMethod">
      <summary>
            Gets or sets the extrapolation method.
            </summary>
      <value>The extrapolation method.</value>
    </member>
    <member name="P:C1.WPF.C1BrushBuilder.Output">
      <summary>
            Gets the resulting brush of the extrapolation the design brush to the input color.
            </summary>
      <value>The output.</value>
    </member>
    <member name="E:C1.WPF.C1BrushBuilder.PropertyChanged">
      <summary>
            Occurs when a property value changes.
            </summary>
    </member>
    <member name="T:C1.WPF.BrushBuilderExtrapolationMethod">
      <summary>
            Determines how the extrapolation of colors will be made.
            </summary>
    </member>
    <member name="F:C1.WPF.BrushBuilderExtrapolationMethod.Absolute">
      <summary>
            The extrapolation will be done adding and subtracting the absolute difference of saturation and luminance. 
            </summary>
    </member>
    <member name="T:C1.WPF.ClearStyleExtensions">
      <summary>
            Attached properties used to pass brushes to Microsoft controls.
            </summary>
    </member>
    <member name="F:C1.WPF.ClearStyleExtensions.MouseOverBrushProperty">
      <summary>
            This attached property can modify the mouse over visual style of a clear style control.
            </summary>
    </member>
    <member name="M:C1.WPF.ClearStyleExtensions.GetMouseOverBrush(System.Windows.FrameworkElement)">
      <summary>
            Gets the mouse over brush.
            </summary>
      <param name="element">The element which contains the attached property.</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.ClearStyleExtensions.SetMouseOverBrush(System.Windows.FrameworkElement,System.Windows.Media.Brush)">
      <summary>
            Sets the mouse over brush.
            </summary>
      <param name="element">The element which contains the attached property.</param>
      <param name="value">The brush used in the mouse over state.</param>
    </member>
    <member name="F:C1.WPF.ClearStyleExtensions.PressedBrushProperty">
      <summary>
            This attached property can modify the pressed visual style of a clear style control.
            </summary>
    </member>
    <member name="M:C1.WPF.ClearStyleExtensions.GetPressedBrush(System.Windows.FrameworkElement)">
      <summary>
            Gets the pressed brush.
            </summary>
      <param name="element">The element which contains the attached property.</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.ClearStyleExtensions.SetPressedBrush(System.Windows.FrameworkElement,System.Windows.Media.Brush)">
      <summary>
            Sets the pressed brush.
            </summary>
      <param name="element">The element which contains the attached property.</param>
      <param name="value">The brush used in the pressed state.</param>
    </member>
    <member name="F:C1.WPF.ClearStyleExtensions.FocusBrushProperty">
      <summary>
            This attached property can modify the focus visual style of a clear style control.
            </summary>
    </member>
    <member name="M:C1.WPF.ClearStyleExtensions.GetFocusBrush(System.Windows.FrameworkElement)">
      <summary>
            Gets the focus brush.
            </summary>
      <param name="element">The element which contains the attached property.</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.ClearStyleExtensions.SetFocusBrush(System.Windows.FrameworkElement,System.Windows.Media.Brush)">
      <summary>
            Sets the focus brush.
            </summary>
      <param name="element">The element which contains the attached property.</param>
      <param name="value">The brush used in the focus state.</param>
    </member>
    <member name="F:C1.WPF.ClearStyleExtensions.ButtonBackgroundProperty">
      <summary>
            This attached property can modify background of clear style button.
            </summary>
    </member>
    <member name="M:C1.WPF.ClearStyleExtensions.GetButtonBackground(System.Windows.FrameworkElement)">
      <summary>
            Gets the clear style button background brush.
            </summary>
      <param name="element">The element which contains the attached property.</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.ClearStyleExtensions.SetButtonBackground(System.Windows.FrameworkElement,System.Windows.Media.Brush)">
      <summary>
            Sets the clear style button background brush.
            </summary>
      <param name="element">The element which contains the attached property.</param>
      <param name="value">The brush used in the background of clear style button.</param>
    </member>
    <member name="F:C1.WPF.ClearStyleExtensions.ButtonForegroundProperty">
      <summary>
            This attached property can modify background of clear style button.
            </summary>
    </member>
    <member name="M:C1.WPF.ClearStyleExtensions.GetButtonForeground(System.Windows.FrameworkElement)">
      <summary>
            Gets the clear style button foreground brush.
            </summary>
      <param name="element">The element which contains the attached property.</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.ClearStyleExtensions.SetButtonForeground(System.Windows.FrameworkElement,System.Windows.Media.Brush)">
      <summary>
            Sets the clear style button foreground brush.
            </summary>
      <param name="element">The element which contains the attached property.</param>
      <param name="value">The brush used in the foreground of clear style button.</param>
    </member>
    <member name="F:C1.WPF.ClearStyleExtensions.CaretBrushProperty">
      <summary>
            This attached property can modify the caret visual style of a clear style control.
            </summary>
    </member>
    <member name="M:C1.WPF.ClearStyleExtensions.GetCaretBrush(System.Windows.FrameworkElement)">
      <summary>
            Gets the caret brush.
            </summary>
      <param name="element">The element which contains the attached property.</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.ClearStyleExtensions.SetCaretBrush(System.Windows.FrameworkElement,System.Windows.Media.Brush)">
      <summary>
            Sets the caret brush.
            </summary>
      <param name="element">The element which contains the attached property.</param>
      <param name="value">The brush used in the caret state.</param>
    </member>
    <member name="F:C1.WPF.ClearStyleExtensions.CornerRadiusProperty">
      <summary>
            This attached property can modify the focus visual style of a clear style control.
            </summary>
    </member>
    <member name="M:C1.WPF.ClearStyleExtensions.GetCornerRadius(System.Windows.FrameworkElement)">
      <summary>
            Gets the CornerRadius.
            </summary>
      <param name="element">The element which contains the attached property.</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.ClearStyleExtensions.SetCornerRadius(System.Windows.FrameworkElement,System.Windows.CornerRadius)">
      <summary>
            Sets the CornerRadius.
            </summary>
      <param name="element">The element which contains the attached property.</param>
      <param name="value">The CornerRadius used in borders.</param>
    </member>
    <member name="F:C1.WPF.ClearStyleExtensions.ScrollBarStyleProperty">
      <summary>
            This attached property can modify the style of a scrollbar.
            </summary>
    </member>
    <member name="M:C1.WPF.ClearStyleExtensions.GetScrollBarStyle(System.Windows.FrameworkElement)">
      <summary>
            Gets the style of a scrollbar.
            </summary>
      <param name="element">The element which contains the attached property.</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.ClearStyleExtensions.SetScrollBarStyle(System.Windows.FrameworkElement,System.Windows.Style)">
      <summary>
            Sets the style of a scrollbar.
            </summary>
      <param name="element">The element which contains the attached property.</param>
      <param name="value">The style used in scrollbars.</param>
    </member>
    <member name="T:C1.WPF.ColorConverter">
      <summary>
            Converts between Colors and Brushes.
            </summary>
    </member>
    <member name="T:C1.WPF.C1EditableContentControl">
      <summary>
            ContenControl that supports edit mode using a TextBox.
            </summary>
      <summary>
            ContenControl that supports edit mode.
            </summary>
    </member>
    <member name="M:C1.WPF.C1EditableContentControl.OnContentChanged(System.Object,System.Object)">
      <summary>
            Called when the value of the <see cref="P:Content" /> property changes.
            </summary>
    </member>
    <member name="M:C1.WPF.C1EditableContentControl.OnIsEditableChanged(System.Boolean)">
      <summary>
            The IsEditable value has changed.
            </summary>
      <param name="oldValue">Old IsEditable value</param>
    </member>
    <member name="M:C1.WPF.C1EditableContentControl.OnIsInEditModeChanged(System.Boolean)">
      <summary>
            The control has changed the mode.
            </summary>
      <param name="oldValue">Old IsInEditMode value</param>
    </member>
    <member name="M:C1.WPF.C1EditableContentControl.OnEditCompleted">
      <summary>
            Fires the <see cref="E:C1.Silverlight.C1EditableContentControl.EditCompleted" /> event.
            </summary>
    </member>
    <member name="M:C1.WPF.C1EditableContentControl.OnEditCanceled">
      <summary>
            Fires the <see cref="E:C1.Silverlight.C1EditableContentControl.EditCanceled" /> event.
            </summary>
    </member>
    <member name="M:C1.WPF.C1EditableContentControl.OnEditStarted">
      <summary>
            Fires the <see cref="E:C1.Silverlight.C1EditableContentControl.EditStarted" /> event.
            </summary>
    </member>
    <member name="M:C1.WPF.C1EditableContentControl.ShouldEnterEditModeOnKeyDown(System.Windows.Input.Key)">
      <summary>
            Called to define if the control has to enter edit mode when a particular key is pressed.
            For example: arrow keys might not change to edit mode.
            </summary>
      <param name="key">Key that was pressed.</param>
      <returns>True if the control has enter edit mode.</returns>
    </member>
    <member name="M:C1.WPF.C1EditableContentControl.UpdateVisualState">
      <summary>
            Update the visual state of this control
            </summary>
    </member>
    <member name="M:C1.WPF.C1EditableContentControl.ChangeVisualStateCommon(System.Boolean)">
      <summary>
            Updates the current visual state of the Common visual state group to match the object's properties.
            </summary>
    </member>
    <member name="F:C1.WPF.C1EditableContentControl.IsEditableProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1EditableContentControl.IsEditable" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1EditableContentControl.IsInEditModeProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1EditableContentControl.IsInEditMode" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1EditableContentControl.EditControlProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1EditableContentControl.EditControl" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1EditableContentControl.ContentControlProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1EditableContentControl.ContentControl" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1EditableContentControl.ContentConverterProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1EditableContentControl.ContentConverter" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1EditableContentControl.ValidationDecoratorStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1EditableContentControl.ValidationDecoratorStyle" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1EditableContentControl.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1EditableContentControl" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1EditableContentControl.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.C1EditableContentControl" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="M:C1.WPF.C1EditableContentControl.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Invoked whenever the effective value of any dependency property has been updated.
            </summary>
      <param name="e">
            The event data that describes the property that changed, as well as old and new values.
            </param>
    </member>
    <member name="E:C1.WPF.C1EditableContentControl.EditCompleted">
      <summary>
            Fired when the user has completed the edits.
            </summary>
    </member>
    <member name="E:C1.WPF.C1EditableContentControl.EditCanceled">
      <summary>
            Fired when the user exits edit mode without changes.
            </summary>
    </member>
    <member name="E:C1.WPF.C1EditableContentControl.EditStarted">
      <summary>
            Fired when the control enters edit mode.
            </summary>
    </member>
    <member name="P:C1.WPF.C1EditableContentControl.IsDirty">
      <summary>
            Get or sets whether the element was edited during edit mode.
            </summary>
    </member>
    <member name="P:C1.WPF.C1EditableContentControl.IsEditable">
      <summary>
            Gets/set if the control can be edited.
            </summary>
    </member>
    <member name="P:C1.WPF.C1EditableContentControl.IsInEditMode">
      <summary>
            Gets/sets when the control enters in edit mode.
            </summary>
    </member>
    <member name="P:C1.WPF.C1EditableContentControl.ContentControl">
      <summary>
            Control visible when it is not in edit mode.
            </summary>
    </member>
    <member name="P:C1.WPF.C1EditableContentControl.ContentConverter">
      <summary>
            Used to create the control content from the edited content.
            </summary>
    </member>
    <member name="E:C1.WPF.C1EditableContentControl.IsMouseOverChanged">
      <summary> 
            Event raised when the <see cref="!:IsMouseOver" /> property has changed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1EditableContentControl.ValidationDecoratorStyle">
      <summary>
            Gets or sets the style that is applied to the inner <see cref="T:C1.WPF.C1ValidationDecorator" />.
            </summary>
    </member>
    <member name="T:C1.WPF.C1FilePicker">
      <summary>
            File picker that opens a dialog box control to allows you to select one or more files. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1FilePicker.OnSelectedFilesChanged(System.EventArgs)">
      <summary>
            Raises the SelectedFilesChanged event.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:C1.WPF.C1FilePicker.OpenRead">
      <summary>
            Opens the selected file for reading.
            </summary>
      <remarks>
            In WPF partial trust it is not possible to access <see cref="P:C1.WPF.C1FilePicker.SelectedFile" />, but
            this method still works.
            </remarks>
      <returns>The stream of the selected file.</returns>
    </member>
    <member name="M:C1.WPF.C1FilePicker.ClearSelection">
      <summary>
            Removes the selected files.
            </summary>
    </member>
    <member name="M:C1.WPF.C1FilePicker.ChangeVisualStateCommon(System.Boolean)">
      <summary>
            Updates the current visual state of the Common visual state group to match the object's properties.
            </summary>
    </member>
    <member name="M:C1.WPF.C1FilePicker.ChangeVisualStateFocus(System.Boolean)">
      <summary>
            Updates the current visual state of the Focus visual state group to match the object's properties.
            </summary>
    </member>
    <member name="F:C1.WPF.C1FilePicker.TextAlignmentProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1FilePicker.TextAlignment" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1FilePicker.WatermarkProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1FilePicker.Watermark" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1FilePicker.BrowseContentProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1FilePicker.BrowseContent" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1FilePicker.MultiselectProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1FilePicker.Multiselect" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1FilePicker.FilterProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1FilePicker.Filter" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1FilePicker.FilterIndexProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1FilePicker.FilterIndex" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1FilePicker.SelectedFileProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1FilePicker.SelectedFile" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1FilePicker.SelectedFilesProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1FilePicker.SelectedFiles" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1FilePicker.FocusCuesVisibilityProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1FilePicker.FocusCuesVisibility" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1FilePicker.DisabledCuesVisibilityProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1FilePicker.DisabledCuesVisibility" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1FilePicker.ValidationDecoratorStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1FilePicker.ValidationDecoratorStyle" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1FilePicker.MouseOverBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1FilePicker.MouseOverBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1FilePicker.SelectionBackgroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1FilePicker.SelectionBackground" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1FilePicker.SelectionForegroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1FilePicker.SelectionForeground" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1FilePicker.PressedBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1FilePicker.PressedBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1FilePicker.FocusBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1FilePicker.FocusBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1FilePicker.ButtonBackgroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1FilePicker.ButtonBackground" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1FilePicker.ButtonForegroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1FilePicker.ButtonForeground" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1FilePicker.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1FilePicker" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1FilePicker.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.C1FilePicker" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="M:C1.WPF.C1FilePicker.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Invoked whenever the effective value of any dependency property has been updated.
            </summary>
      <param name="e">
            The event data that describes the property that changed, as well as old and new values.
            </param>
    </member>
    <member name="E:C1.WPF.C1FilePicker.SelectedFilesChanged">
      <summary>
            Fires when the <see cref="P:C1.WPF.C1FilePicker.SelectedFiles" /> property changes.
            </summary>
    </member>
    <member name="P:C1.WPF.C1FilePicker.SelectedFileName">
      <summary>
            Gets the name of the selected file.
            </summary>
      <remarks>
            In WPF partial trust it is not possible to access <see cref="P:C1.WPF.C1FilePicker.SelectedFile" />, but
            this property still works.
            </remarks>
    </member>
    <member name="P:C1.WPF.C1FilePicker.HasSelectedFiles">
      <summary>
            True, if files were selected.
            </summary>
    </member>
    <member name="P:C1.WPF.C1FilePicker.TextAlignment">
      <summary>
            Gets or sets how the text should be aligned in the <see cref="T:C1.WPF.C1FilePicker" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1FilePicker.Watermark">
      <summary>
            Gets or sets the watermark content.
            </summary>
    </member>
    <member name="P:C1.WPF.C1FilePicker.BrowseContent">
      <summary>
            Gets or sets the content of the Browse button.
            </summary>
    </member>
    <member name="P:C1.WPF.C1FilePicker.Multiselect">
      <summary>
            Gets or sets whether it's possible to select more than one file.
            </summary>
    </member>
    <member name="P:C1.WPF.C1FilePicker.Filter">
      <summary>
            Gets or sets the filter that will be applied to the <see cref="T:System.Windows.Controls.OpenFileDialog" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1FilePicker.FilterIndex">
      <summary>
            Gets or sets the filter index that will be applied to the <see cref="T:System.Windows.Controls.OpenFileDialog" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1FilePicker.SelectedFile">
      <summary>
            Gets the file that the user has selected.
            </summary>
    </member>
    <member name="P:C1.WPF.C1FilePicker.SelectedFiles">
      <summary>
            Gets the files that the user has selected.
            </summary>
    </member>
    <member name="P:C1.WPF.C1FilePicker.FocusCuesVisibility">
      <summary>
            Gets or sets a value indicating whether the focus visuals of the control are visible.
            </summary>
    </member>
    <member name="P:C1.WPF.C1FilePicker.DisabledCuesVisibility">
      <summary>
            Gets or sets a value indicating whether the disabled visuals of the control are visible.
            </summary>
    </member>
    <member name="E:C1.WPF.C1FilePicker.IsMouseOverChanged">
      <summary> 
            Event raised when the <see cref="!:IsMouseOver" /> property has changed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1FilePicker.ValidationDecoratorStyle">
      <summary>
            Gets or sets the style that is applied to the inner <see cref="T:C1.WPF.C1ValidationDecorator" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1FilePicker.MouseOverBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when it has the mouse over.
            </summary>
    </member>
    <member name="P:C1.WPF.C1FilePicker.SelectionBackground">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that fills the background of the selected text.
            </summary>
    </member>
    <member name="P:C1.WPF.C1FilePicker.SelectionForeground">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used as foreground of the selected text.
            </summary>
    </member>
    <member name="P:C1.WPF.C1FilePicker.PressedBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to paint a button when it is pressed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1FilePicker.FocusBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the focused control.
            </summary>
    </member>
    <member name="P:C1.WPF.C1FilePicker.ButtonBackground">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that will be assigned to the Background of the buttons inside the control.
            </summary>
    </member>
    <member name="P:C1.WPF.C1FilePicker.ButtonForeground">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that will be assigned to the Foreground of the buttons inside the control.
            </summary>
    </member>
    <member name="T:C1.WPF.C1TextEditableContentControl">
      <summary>
            Dual control that provides a <see cref="T:System.Windows.Controls.TextBox" /> on edit mode, and a <see cref="T:System.Windows.Controls.ContentControl" /> on readonly mode.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TextEditableContentControl.ChangeVisualStateWatermark(System.Boolean)">
      <summary>
            Updates the current visual state of the Watermark visual state group to match the object's properties.
            </summary>
    </member>
    <member name="F:C1.WPF.C1TextEditableContentControl.TextAlignmentProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TextEditableContentControl.TextAlignment" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TextEditableContentControl.WatermarkProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TextEditableContentControl.Watermark" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TextEditableContentControl.IsWatermarkedProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TextEditableContentControl.IsWatermarked" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TextEditableContentControl.FocusCuesVisibilityProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TextEditableContentControl.FocusCuesVisibility" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TextEditableContentControl.DisabledCuesVisibilityProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TextEditableContentControl.DisabledCuesVisibility" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TextEditableContentControl.ValidationDecoratorStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TextEditableContentControl.ValidationDecoratorStyle" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TextEditableContentControl.SelectionBackgroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TextEditableContentControl.SelectionBackground" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TextEditableContentControl.SelectionForegroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TextEditableContentControl.SelectionForeground" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TextEditableContentControl.CaretBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TextEditableContentControl.CaretBrush" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1TextEditableContentControl.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1TextEditableContentControl" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TextEditableContentControl.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.C1TextEditableContentControl" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="E:C1.WPF.C1TextEditableContentControl.ValidateInput">
      <summary>
            Event fired when the editing is completed.
            Handle this event to validate the new input.
            </summary>
    </member>
    <member name="E:C1.WPF.C1TextEditableContentControl.TextBoxKeyDown">
      <summary>
            Event fired when a key is pressed in the EditableTextBox.
            </summary>
    </member>
    <member name="E:C1.WPF.C1TextEditableContentControl.TextBoxKeyUp">
      <summary>
            Event fired when a key is released in the EditableTextBox.
            </summary>
    </member>
    <member name="E:C1.WPF.C1TextEditableContentControl.TextEdited">
      <summary>
            Event fired to do when the text is edited in the EditableTextBox.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TextEditableContentControl.EditTextBox">
      <summary>
        <see cref="T:C1.Silverlight.C1TextBoxBase" /> used during the edit mode.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TextEditableContentControl.TextAlignment">
      <summary>
            Gets or sets how the text should be aligned in the <see cref="T:C1.WPF.C1TextEditableContentControl" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TextEditableContentControl.Watermark">
      <summary>
            Gets or sets the watermark content displayed when the control is empty.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TextEditableContentControl.IsWatermarked">
      <summary>
            Get or sets if the watermark is shown.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TextEditableContentControl.FocusCuesVisibility">
      <summary>
            Gets or sets a value indicating whether the focus visuals of the control are visible.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TextEditableContentControl.DisabledCuesVisibility">
      <summary>
            Gets or sets a value indicating whether the disabled visuals of the control are visible.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TextEditableContentControl.ValidationDecoratorStyle">
      <summary>
            Gets or sets the style that is applied to the inner <see cref="T:C1.WPF.C1ValidationDecorator" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TextEditableContentControl.SelectionBackground">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that fills the background of the selected text.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TextEditableContentControl.SelectionForeground">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used as foreground of the selected text.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TextEditableContentControl.CaretBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> of the blinking cursor of an input control.
            </summary>
    </member>
    <member name="T:C1.WPF.ValidateInputEventArgs">
      <summary>
            Arguments for the event fired to validate the input.
            </summary>
    </member>
    <member name="P:C1.WPF.ValidateInputEventArgs.Input">
      <summary>
            New text input
            </summary>
    </member>
    <member name="P:C1.WPF.ValidateInputEventArgs.IsValidInput">
      <summary>
            Set this flag to undo the edits if the input is not valid.
            </summary>
    </member>
    <member name="T:C1.WPF.ISpellChecker">
      <summary>
            Provides spell checking services.
            </summary>
      <remarks>
            This interface is implemented by C1SpellChecker in the C1.Silverlight.SpellChecker assembly.
            </remarks>
    </member>
    <member name="M:C1.WPF.ISpellChecker.CheckText(System.String)">
      <summary>
            Checks a string containing text and returns a list of spelling errors.
            </summary>
      <param name="text">Text to be spell-checked.</param>
      <returns>List of <see cref="T:C1.WPF.ICharRange" /> objects that describe the spelling mistakes.</returns>
    </member>
    <member name="M:C1.WPF.ISpellChecker.GetSuggestions(System.String,System.Int32)">
      <summary>
            Gets a list of suggestions for a misspelled word.
            </summary>
      <param name="word">Word to suggest alternatives for.</param>
      <param name="maxSuggestions">Maximum number of suggestions to provide.</param>
      <returns>A list of suggestions for the <paramref name="word" /> parameter.</returns>
    </member>
    <member name="M:C1.WPF.ISpellChecker.ShowSuggestionsMenu(System.Object,System.Windows.Point,System.String,System.Action{System.String})">
      <summary>
            Shows a context menu with suggestions for a misspelled word.
            </summary>
      <param name="editor">The editor control whose content is being spell checked.</param>
      <param name="position">The position in absolute plug-in coordinates where the menu should be open.</param>
      <param name="word">The misspelled word.</param>
      <param name="correctCallback">Callback called when a suggested correction is chosen.</param>
    </member>
    <member name="M:C1.WPF.ISpellChecker.CheckControlAsync(System.Object)">
      <summary>
            Shows a spell-checking dialog for an editor control.
            </summary>
      <param name="editor">Object that contains the text to be spell-checked.</param>
    </member>
    <member name="P:C1.WPF.ISpellChecker.IgnoreList">
      <summary>
            Gets the list of words to ignore during spell-checking.
            </summary>
    </member>
    <member name="P:C1.WPF.ISpellChecker.UserDictionary">
      <summary>
            Gets the user dictionary used for spell-checking.
            </summary>
    </member>
    <member name="P:C1.WPF.ISpellChecker.Enabled">
      <summary>
            Gets a value that indicates whether the main spelling dictionary has been loaded.
            </summary>
    </member>
    <member name="E:C1.WPF.ISpellChecker.DictionaryChanged">
      <summary>
            Event that fires when any of the spell dictionaries changes in any way.
            </summary>
      <remarks>
            This event notifies listeners that the spell dictionaries have changed and
            the text should be re-checked. It fires for example when words are added to the 
            user dictionary or when new dictionaries are loaded. 
            </remarks>
    </member>
    <member name="T:C1.WPF.ICharRange">
      <summary>
            Represents a character range within a string.
            This is used by <see cref="T:C1.WPF.ISpellChecker" /> to represent the
            spelling mistakes found in text.
            </summary>
    </member>
    <member name="P:C1.WPF.ICharRange.Start">
      <summary>
            Gets the index of the start of the range.
            </summary>
    </member>
    <member name="P:C1.WPF.ICharRange.Length">
      <summary>
            Gets the length of the range.
            </summary>
    </member>
    <member name="T:C1.WPF.TextEditedEventArgs">
      <summary>
            AutoComplete event details.
            </summary>
    </member>
    <member name="P:C1.WPF.TextEditedEventArgs.LastKey">
      <summary>
            Gets or sets the last key.
            </summary>
      <value>The last key.</value>
    </member>
    <member name="P:C1.WPF.TextEditedEventArgs.CurrentText">
      <summary>
            Current text.
            </summary>
    </member>
    <member name="P:C1.WPF.TextEditedEventArgs.CurrentSelectionStart">
      <summary>
            Current selection start.
            </summary>
    </member>
    <member name="P:C1.WPF.TextEditedEventArgs.NewText">
      <summary>
            Text that will be put in the control after the AutoComplete.
            </summary>
    </member>
    <member name="P:C1.WPF.TextEditedEventArgs.NewSelectionStart">
      <summary>
            Index where the selection will start after the AutoComplete.
            </summary>
    </member>
    <member name="P:C1.WPF.TextEditedEventArgs.Cancel">
      <summary>
            Cancel the input of the new text.
            </summary>
    </member>
    <member name="T:C1.WPF.C1Menu">
      <summary>
            The C1Menu control enables you hierarchically organize elements associated with event handlers.
            </summary>
    </member>
    <member name="T:C1.WPF.C1HierarchicalPresenter">
      <summary>
            Represents a control that contains multiple items and has a header.
            </summary>
    </member>
    <member name="M:C1.WPF.C1HierarchicalPresenter.IsAncestorOf(C1.WPF.C1HierarchicalPresenter)">
      <summary>
            Determines whether the <see cref="T:C1.Silverlight.C1HierarchicalPresenter" /> is an ancestor of the descendant element.
            </summary>
      <param name="descendant">The descendant <see cref="T:C1.Silverlight.C1HierarchicalPresenter" />.</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.C1HierarchicalPresenter.InitializeItem(C1.WPF.C1HierarchicalPresenter)">
      <summary>
            Initializes a <see cref="T:C1.Silverlight.C1HierarchicalPresenter" /> by setting its parent and root elements
            in the hierarchy.
            </summary>
      <remarks>
            This method should be invoked only when we want to force the initialization of an item 
            before it gets visible. Otherwise the item will be initialized automatically before becoming
            visible.
            </remarks>
      <param name="rootPresenter">The <see cref="T:C1.Silverlight.C1HierarchicalPresenter" /> whose this item belongs to.</param>
    </member>
    <member name="M:C1.WPF.C1HierarchicalPresenter.ToList``1">
      <summary>
            Creates a list with all the item containers present in the Hierarchical Presenter at
            the moment of invocation.
            </summary>
      <typeparam name="T">The type of the container, e.g. C1TreeViewItem</typeparam>
      <returns>The list of item containers.</returns>
    </member>
    <member name="M:C1.WPF.C1HierarchicalPresenter.OnHeaderChanged(System.Object)">
      <summary>
            Called when the value of the <see cref="P:Header" /> property changes.
            </summary>
    </member>
    <member name="M:C1.WPF.C1HierarchicalPresenter.ChangeVisualStateCommon(System.Boolean)">
      <summary>
            Updates the current visual state of the Common visual state group to match the object's properties.
            </summary>
    </member>
    <member name="F:C1.WPF.C1HierarchicalPresenter.HeaderProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1HierarchicalPresenter.Header" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1HierarchicalPresenter.HeaderTemplateProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1HierarchicalPresenter.HeaderTemplate" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1HierarchicalPresenter.ItemContainerStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1HierarchicalPresenter.ItemContainerStyle" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1HierarchicalPresenter.ItemContainerStyleSelectorProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1HierarchicalPresenter.ItemContainerStyleSelector" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1HierarchicalPresenter.ItemTemplateSelectorProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1HierarchicalPresenter.ItemTemplateSelector" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1HierarchicalPresenter.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1HierarchicalPresenter" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1HierarchicalPresenter.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.C1HierarchicalPresenter" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="M:C1.WPF.C1HierarchicalPresenter.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Invoked whenever the effective value of any dependency property has been updated.
            </summary>
      <param name="e">
            The event data that describes the property that changed, as well as old and new values.
            </param>
    </member>
    <member name="P:C1.WPF.C1HierarchicalPresenter.HasItems">
      <summary>
            Gets a value that indicates whether the ItemsControl contains items.
            </summary>
    </member>
    <member name="P:C1.WPF.C1HierarchicalPresenter.ItemConverter">
      <summary>
            The ItemConverter performs the conversion from a <see cref="T:C1.Silverlight.C1HierarchicalPresenter" /> instance to its String
            representation.
            If not set by the user, the default converter will be used.
            </summary>
    </member>
    <member name="P:C1.WPF.C1HierarchicalPresenter.ParentCollection">
      <summary>
            Gets the items collection of this element's parent. 
            </summary>
    </member>
    <member name="P:C1.WPF.C1HierarchicalPresenter.ParentItemsSource">
      <summary>
            Returns this element's parent ItemsSource Property. 
            </summary>
    </member>
    <member name="P:C1.WPF.C1HierarchicalPresenter.Header">
      <summary>
            Gets or sets the item that labels the control.
            </summary>
    </member>
    <member name="P:C1.WPF.C1HierarchicalPresenter.HeaderTemplate">
      <summary>
            Gets or sets the template used to display the contents of the control's header.
            </summary>
    </member>
    <member name="P:C1.WPF.C1HierarchicalPresenter.ItemContainerStyle">
      <summary>
            Gets or sets the Style that is applied to the container element generated for each item.
            </summary>
    </member>
    <member name="P:C1.WPF.C1HierarchicalPresenter.ItemContainerStyleSelector">
      <summary>
            Gets or sets custom style-selection logic for a style that can be applied to each generated container element.
            </summary>
    </member>
    <member name="P:C1.WPF.C1HierarchicalPresenter.ItemTemplateSelector">
      <summary>
            Provides a way to choose a DataTemplate based on the data object and the data-bound element.
            </summary>
    </member>
    <member name="E:C1.WPF.C1HierarchicalPresenter.IsMouseOverChanged">
      <summary> 
            Event raised when the <see cref="!:IsMouseOver" /> property has changed.
            </summary>
    </member>
    <member name="M:C1.WPF.C1Menu.OnItemClick(C1.WPF.SourcedEventArgs)">
      <summary>
            Raises the <see cref="E:C1.Silverlight.C1Menu.ItemClick" /> event.
            </summary>
      <param name="e">Provides data for the event.</param>
    </member>
    <member name="M:C1.WPF.C1Menu.OnItemOpening(C1.WPF.CancelSourceEventArgs)">
      <summary>
            Raises the <see cref="E:C1.Silverlight.C1Menu.ItemOpening" /> event.
            </summary>
      <param name="e">Provides data for the event.</param>
    </member>
    <member name="M:C1.WPF.C1Menu.OnItemOpened(C1.WPF.SourcedEventArgs)">
      <summary>
            Raises the <see cref="E:C1.Silverlight.C1Menu.ItemOpened" /> event.
            </summary>
      <param name="e">Provides data for the event.</param>
    </member>
    <member name="M:C1.WPF.C1Menu.OnItemClosing(C1.WPF.CancelSourceEventArgs)">
      <summary>
            Raises the <see cref="E:C1.Silverlight.C1Menu.ItemClosing" /> event.
            </summary>
      <param name="e">Provides data for the event.</param>
    </member>
    <member name="M:C1.WPF.C1Menu.OnItemClosed(C1.WPF.SourcedEventArgs)">
      <summary>
            Raises the <see cref="E:C1.Silverlight.C1Menu.ItemClosed" /> event.
            </summary>
      <param name="e">Provides data for the event.</param>
    </member>
    <member name="M:C1.WPF.C1Menu.OnItemChecked(C1.WPF.SourcedEventArgs)">
      <summary>
            Raises the <see cref="E:C1.Silverlight.C1Menu.ItemChecked" /> event.
            </summary>
      <param name="e">Provides data for the event.</param>
    </member>
    <member name="M:C1.WPF.C1Menu.OnItemUnchecked(C1.WPF.SourcedEventArgs)">
      <summary>
            Raises the <see cref="E:C1.Silverlight.C1Menu.ItemUnchecked" /> event.
            </summary>
      <param name="e">Provides data for the event.</param>
    </member>
    <member name="M:C1.WPF.C1Menu.OnAutoCloseChanged(System.Boolean)">
      <summary>
            Called when the property AutoClose changed.
            </summary>
    </member>
    <member name="M:C1.WPF.C1Menu.OnAutoClosing(System.ComponentModel.CancelEventArgs)">
      <summary>
            Raises the AutoClosing event.
            </summary>
      <param name="e">Provides data for CancelEventArgs.</param>
    </member>
    <member name="M:C1.WPF.C1Menu.OnAutoClosed(System.EventArgs)">
      <summary>
            Raises the AutoClosed event.
            </summary>
      <param name="e">Provides data for EventArgs.</param>
    </member>
    <member name="M:C1.WPF.C1Menu.ChangeVisualStateFocus(System.Boolean)">
      <summary>
            Updates the current visual state of the Focus visual state group to match the object's properties.
            </summary>
    </member>
    <member name="F:C1.WPF.C1Menu.FirstLevelTemplateProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1Menu.FirstLevelTemplate" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1Menu.NonFirstLevelTemplateProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1Menu.NonFirstLevelTemplate" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1Menu.MenuOpenDelayProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1Menu.MenuOpenDelay" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1Menu.AutoCloseProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1Menu.AutoClose" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1Menu.DetectBoundariesProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1Menu.DetectBoundaries" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1Menu.OrientationProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1Menu.Orientation" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1Menu.SubMenuMaxHeightProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1Menu.SubMenuMaxHeight" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1Menu.SeparatorStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1Menu.SeparatorStyle" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1Menu.FirstLevelStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1Menu.FirstLevelStyle" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1Menu.NonFirstLevelStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1Menu.NonFirstLevelStyle" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1Menu.FocusCuesVisibilityProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1Menu.FocusCuesVisibility" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1Menu.DisabledCuesVisibilityProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1Menu.DisabledCuesVisibility" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1Menu.HighlightedBackgroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1Menu.HighlightedBackground" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1Menu.OpenedBackgroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1Menu.OpenedBackground" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1Menu.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1Menu" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1Menu.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.C1Menu" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="M:C1.WPF.C1Menu.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Invoked whenever the effective value of any dependency property has been updated.
            </summary>
      <param name="e">
            The event data that describes the property that changed, as well as old and new values.
            </param>
    </member>
    <member name="E:C1.WPF.C1Menu.ItemClick">
      <summary>
            Occurs when a C1MenuItem is clicked.
            </summary>
    </member>
    <member name="E:C1.WPF.C1Menu.ItemOpening">
      <summary>
            Occurs when a C1MenuItem is opening.
            </summary>
    </member>
    <member name="E:C1.WPF.C1Menu.ItemOpened">
      <summary>
            Occurs when a C1MenuItem is opened.
            </summary>
    </member>
    <member name="E:C1.WPF.C1Menu.ItemClosing">
      <summary>
            Occurs when a C1MenuItem is closing.
            </summary>
    </member>
    <member name="E:C1.WPF.C1Menu.ItemClosed">
      <summary>
            Occurs when a C1MenuItem is closed.
            </summary>
    </member>
    <member name="E:C1.WPF.C1Menu.ItemChecked">
      <summary>
            Occurs when a C1MenuItem is checked.
            </summary>
    </member>
    <member name="E:C1.WPF.C1Menu.ItemUnchecked">
      <summary>
            Occurs when a C1MenuItem is unchecked.
            </summary>
    </member>
    <member name="E:C1.WPF.C1Menu.AutoClosing">
      <summary>
            Occurs when the Menu is AutoClosing.
            </summary>
    </member>
    <member name="E:C1.WPF.C1Menu.AutoClosed">
      <summary>
            Occurs when the Menu is AutoClosed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1Menu.FirstLevelTemplate">
      <summary>
            Represents the template to apply to all menu items at the first level.
            </summary>
    </member>
    <member name="P:C1.WPF.C1Menu.NonFirstLevelTemplate">
      <summary>
            Represents the template to apply to all menu items that are not in the first level.
            </summary>
    </member>
    <member name="P:C1.WPF.C1Menu.MenuOpenDelay">
      <summary>
            Gets or Sets a value (in milliseconds) for the delay used when opening a submenu.
            </summary>
    </member>
    <member name="P:C1.WPF.C1Menu.AutoClose">
      <summary>
            Gets or sets a value indicating if the menu will auto close when the user clicks outside of it.
            </summary>
    </member>
    <member name="P:C1.WPF.C1Menu.DetectBoundaries">
      <summary>
            Gets or sets a value indicating if the menu will auto update the position of its sub-menus when they are close to the boundaries of the application.
            </summary>
    </member>
    <member name="P:C1.WPF.C1Menu.Orientation">
      <summary>
            Gets or sets the direction in which to render the Menu control.
            </summary>
    </member>
    <member name="P:C1.WPF.C1Menu.SubMenuMaxHeight">
      <summary>
            Gets or sets a value that indicates the MaxHeight of the SubMenu.
            </summary>
    </member>
    <member name="P:C1.WPF.C1Menu.SeparatorStyle">
      <summary>
            Default style applied to the <see cref="T:C1.WPF.C1Separator" /> located inside this <see cref="T:C1.WPF.C1Menu" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1Menu.FirstLevelStyle">
      <summary>
            Represents the style to apply to all menu items at the first level.
            </summary>
    </member>
    <member name="P:C1.WPF.C1Menu.NonFirstLevelStyle">
      <summary>
            Represents the style to apply to all menu items that are not in the first level.
            </summary>
    </member>
    <member name="P:C1.WPF.C1Menu.FocusCuesVisibility">
      <summary>
            Gets or sets a value indicating whether the focus visuals of the control are visible.
            </summary>
    </member>
    <member name="P:C1.WPF.C1Menu.DisabledCuesVisibility">
      <summary>
            Gets or sets a value indicating whether the disabled visuals of the control are visible.
            </summary>
    </member>
    <member name="P:C1.WPF.C1Menu.HighlightedBackground">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the menu item.
            </summary>
    </member>
    <member name="P:C1.WPF.C1Menu.OpenedBackground">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used in a menu item when this item is opened.
            </summary>
    </member>
    <member name="T:C1.WPF.C1MenuItem">
      <summary>
            Represents a selectable item inside a C1Menu control.
            </summary>
    </member>
    <member name="M:C1.WPF.C1MenuItem.OnSubmenuOpened(C1.WPF.SourcedEventArgs)">
      <summary>
            Responds to an open item action by raising a SubmenuOpened event.
            </summary>
      <param name="e">Provides data for SourcedEventArgs.</param>
    </member>
    <member name="M:C1.WPF.C1MenuItem.OnSubmenuClosed(C1.WPF.SourcedEventArgs)">
      <summary>
            Responds to a closed item action by raising a SubmenuClosed event.
            </summary>
      <param name="e">Provides data for SourcedEventArgs.</param>
    </member>
    <member name="M:C1.WPF.C1MenuItem.OnClick(C1.WPF.SourcedEventArgs)">
      <summary>
            Responds to a click action by raising a Click event.
            </summary>
      <param name="e">Provides data for SourcedEventArgs.</param>
    </member>
    <member name="M:C1.WPF.C1MenuItem.OnSubmenuClosing(C1.WPF.CancelSourceEventArgs)">
      <summary>
            Responds to a close item action by raising a SubmenuClosing event.
            </summary>
      <param name="e">Provides data for CancelSourceEventArgs.</param>
    </member>
    <member name="M:C1.WPF.C1MenuItem.OnSubmenuOpening(C1.WPF.CancelSourceEventArgs)">
      <summary>
            Responds to an open item action by raising a SubmenuOpening event.
            </summary>
      <param name="e">Provides data for CancelSourceEventArgs.</param>
    </member>
    <member name="M:C1.WPF.C1MenuItem.OnChecked(C1.WPF.SourcedEventArgs)">
      <summary>
            Responds to a check item action by raising a Checked event.
            </summary>
      <param name="e">Provides data for SourcedEventArgs.</param>
    </member>
    <member name="M:C1.WPF.C1MenuItem.OnUnchecked(C1.WPF.SourcedEventArgs)">
      <summary>
            Responds to an uncheck item action by raising a Unchecked event.
            </summary>
      <param name="e">Provides data for SourcedEventArgs.</param>
    </member>
    <member name="M:C1.WPF.C1MenuItem.OnMouseEnter(System.Object,System.Windows.Input.MouseEventArgs)">
      <summary> 
            Called when the mouse pointer enters the bounds of the header element.
            </summary>
    </member>
    <member name="M:C1.WPF.C1MenuItem.OnMouseLeave(System.Object,System.Windows.Input.MouseEventArgs)">
      <summary>
            Called when the mouse pointer leaves the bounds of the header element.
            </summary>
    </member>
    <member name="M:C1.WPF.C1MenuItem.OnMouseClick(System.Object,System.Windows.Input.MouseEventArgs)">
      <summary>
            Called when the user clicks the item. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1MenuItem.ChangeVisualStateOpened(System.Boolean)">
      <summary>
            Updates the current visual state of the Opened visual state group to match the object's properties.
            </summary>
    </member>
    <member name="M:C1.WPF.C1MenuItem.ChangeVisualStateHighlighted(System.Boolean)">
      <summary>
            Updates the current visual state of the Highlighted visual state group to match the object's properties.
            </summary>
    </member>
    <member name="F:C1.WPF.C1MenuItem.TextAlignmentProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1MenuItem.TextAlignment" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1MenuItem.TextDecorationsProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1MenuItem.TextDecorations" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1MenuItem.TextWrappingProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1MenuItem.TextWrapping" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1MenuItem.IconProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1MenuItem.Icon" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1MenuItem.IsSubmenuOpenProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1MenuItem.IsSubmenuOpen" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1MenuItem.IsCheckableProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1MenuItem.IsCheckable" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1MenuItem.IsCheckedProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1MenuItem.IsChecked" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1MenuItem.IsHighlightedProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1MenuItem.IsHighlighted" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1MenuItem.GroupNameProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1MenuItem.GroupName" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1MenuItem.SubMenuMaxHeightProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1MenuItem.SubMenuMaxHeight" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1MenuItem.CommandProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1MenuItem.Command" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1MenuItem.CommandParameterProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1MenuItem.CommandParameter" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1MenuItem.FocusCuesVisibilityProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1MenuItem.FocusCuesVisibility" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1MenuItem.DisabledCuesVisibilityProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1MenuItem.DisabledCuesVisibility" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1MenuItem.HighlightedBackgroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1MenuItem.HighlightedBackground" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1MenuItem.OpenedBackgroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1MenuItem.OpenedBackground" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1MenuItem.HeaderBackgroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1MenuItem.HeaderBackground" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1MenuItem.HeaderForegroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1MenuItem.HeaderForeground" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1MenuItem.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1MenuItem" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1MenuItem.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.C1MenuItem" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="P:C1.WPF.C1MenuItem.Parent">
      <summary>
            Gets the <see cref="T:C1.WPF.C1MenuItem" /> that is the parent of this item.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MenuItem.Menu">
      <summary>
            Identifies the parent <see cref="T:C1.Silverlight.C1Menu" /> of this item.
            </summary>
    </member>
    <member name="E:C1.WPF.C1MenuItem.Click">
      <summary>
            Occurs when the <see cref="T:C1.WPF.C1MenuItem" /> is clicked. 
            </summary>
    </member>
    <member name="E:C1.WPF.C1MenuItem.SubmenuOpened">
      <summary>
            Occurs when the state of the IsSubmenuOpen property changes to true.
            </summary>
    </member>
    <member name="E:C1.WPF.C1MenuItem.SubmenuClosed">
      <summary>
            Occurs when the state of the IsSubmenuOpen property changes to false.
            </summary>
    </member>
    <member name="E:C1.WPF.C1MenuItem.SubmenuOpening">
      <summary>
            Occurs when a submenu is opening.
            </summary>
    </member>
    <member name="E:C1.WPF.C1MenuItem.SubmenuClosing">
      <summary>
            Occurs when a submenu is closing.
            </summary>
    </member>
    <member name="E:C1.WPF.C1MenuItem.Checked">
      <summary>
            Occurs when a C1MenuItem is checked.
            </summary>
    </member>
    <member name="E:C1.WPF.C1MenuItem.Unchecked">
      <summary>
            Occurs when a C1MenuItem is unchecked.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MenuItem.Index">
      <summary>
            Gets the index of this <see cref="T:C1.Silverlight.C1MenuItem" /> in its parent items collection.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MenuItem.TextAlignment">
      <summary>
            Gets or sets a value that indicates the horizontal alignment of text content in the Header.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MenuItem.TextDecorations">
      <summary>
            Gets or sets a TextDecorationCollection that contains the effects to apply to the text of the Header.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MenuItem.TextWrapping">
      <summary>
            Gets or sets a value that indicates how any text should be wrapped in the Header.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MenuItem.Icon">
      <summary>
            Gets or sets the icon that appears in a C1MenuItem.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MenuItem.IsSubmenuOpen">
      <summary>
            Gets a value that indicates whether the submenu of the C1MenuItem is open.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MenuItem.IsCheckable">
      <summary>
            Gets a value that indicates whether a <see cref="T:C1.WPF.C1MenuItem" /> can be checked.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MenuItem.IsChecked">
      <summary>
            Gets or sets a value that indicates whether the <see cref="T:C1.WPF.C1MenuItem" /> is checked.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MenuItem.IsHighlighted">
      <summary>
            Gets a value that indicates whether a <see cref="T:C1.WPF.C1MenuItem" /> is highlighted.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MenuItem.GroupName">
      <summary>
            Gets or sets the name that specifies which MenuItems are mutually exclusive (when checkable).
            </summary>
    </member>
    <member name="P:C1.WPF.C1MenuItem.SubMenuMaxHeight">
      <summary>
            Gets or sets a value that indicates the MaxHeight of the SubMenu.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MenuItem.Command">
      <summary>
            Gets or sets the command to invoke when this button is pressed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MenuItem.CommandParameter">
      <summary>
            Gets or sets the parameter to pass to the Command property.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MenuItem.FocusCuesVisibility">
      <summary>
            Gets or sets a value indicating whether the focus visuals of the control are visible.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MenuItem.DisabledCuesVisibility">
      <summary>
            Gets or sets a value indicating whether the disabled visuals of the control are visible.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MenuItem.HighlightedBackground">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the menu item.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MenuItem.OpenedBackground">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used in a menu item when this item is opened.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MenuItem.HeaderBackground">
      <summary>
            Gets or sets the background brush of the header.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MenuItem.HeaderForeground">
      <summary>
            Gets or sets the foreground brush of the header.
            </summary>
    </member>
    <member name="T:C1.WPF.C1MenuList">
      <summary>
            List of menu items. This list can be set as the content of a dropdown to make a drop down list.
            </summary>
    </member>
    <member name="M:C1.WPF.C1MenuList.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.C1MenuList" /> class.
            </summary>
    </member>
    <member name="M:C1.WPF.C1MenuList.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
      <summary>
            Prepares the specified element to display the specified item.
            </summary>
      <param name="element">The element used to display the specified item.</param>
      <param name="item">The item to display.</param>
    </member>
    <member name="T:C1.WPF.IOrderedSet`1">
      <summary>
            Defines methods to manipulate ordered sets.
            </summary>
      <typeparam name="T">The type of the elements in the collection.</typeparam>
    </member>
    <member name="M:C1.WPF.IOrderedSet`1.AddRange(`0,`0)">
      <summary>
            Adds a range of elements.
            </summary>
      <param name="from">From element.</param>
      <param name="to">To element.</param>
    </member>
    <member name="M:C1.WPF.IOrderedSet`1.RemoveRange(`0,`0)">
      <summary>
            Removes a range of elements.
            </summary>
      <param name="from">From element.</param>
      <param name="to">To element.</param>
      <returns>
      </returns>
    </member>
    <member name="P:C1.WPF.IOrderedSet`1.Item(System.Int32)">
      <summary>
            Gets the item at the specified index.
            </summary>
      <value>The element at the specified index.</value>
    </member>
    <member name="T:C1.WPF.C1OrderedSet">
      <summary>
            Collection of ordered <see cref="T:System.Int32" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1OrderedSet.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.C1OrderedSet" /> class.
            </summary>
    </member>
    <member name="M:C1.WPF.C1OrderedSet.#ctor(C1.WPF.C1OrderedSet)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.C1OrderedSet" /> class.
            </summary>
      <param name="set">The collection whose elements are copied to the new set.</param>
    </member>
    <member name="M:C1.WPF.C1OrderedSet.Add(System.Int32)">
      <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
    </member>
    <member name="M:C1.WPF.C1OrderedSet.Add(C1.WPF.C1OrderedSet)">
      <summary>
            Joins the specified set.
            </summary>
      <param name="set">The set to join.</param>
    </member>
    <member name="M:C1.WPF.C1OrderedSet.AddRange(System.Int32,System.Int32)">
      <summary>
            Adds a range of elements.
            </summary>
      <param name="from">From element.</param>
      <param name="to">To element.</param>
    </member>
    <member name="M:C1.WPF.C1OrderedSet.Clear">
      <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1OrderedSet.Contains(System.Int32)">
      <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
    </member>
    <member name="M:C1.WPF.C1OrderedSet.CopyTo(System.Int32[],System.Int32)">
      <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
    </member>
    <member name="M:C1.WPF.C1OrderedSet.Remove(System.Int32)">
      <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
      <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </exception>
    </member>
    <member name="M:C1.WPF.C1OrderedSet.RemoveRange(System.Int32,System.Int32)">
      <summary>
            Removes a range of elements.
            </summary>
      <param name="from">From element.</param>
      <param name="to">To element.</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.C1OrderedSet.Remove(C1.WPF.C1OrderedSet)">
      <summary>
            Removes the specified items.
            </summary>
      <param name="removedItems">The removed items.</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.C1OrderedSet.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:C1.WPF.C1OrderedSet.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="P:C1.WPF.C1OrderedSet.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:System.Int32" /> at the specified index.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:C1.WPF.C1OrderedSet.Count">
      <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <value>
      </value>
      <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
    </member>
    <member name="P:C1.WPF.C1OrderedSet.IsReadOnly">
      <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
      <value>
      </value>
      <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.
            </returns>
    </member>
    <member name="T:C1.WPF.C1Separator">
      <summary>
            Control that is used to separate items in menus and toolbar.
            </summary>
    </member>
    <member name="M:C1.WPF.C1Separator.ChangeVisualStateCommon(System.Boolean)">
      <summary>
            Updates the current visual state of the Common visual state group to match the object's properties.
            </summary>
    </member>
    <member name="F:C1.WPF.C1Separator.FirstLevelTemplateProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1Separator.FirstLevelTemplate" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1Separator.OrientationProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1Separator.Orientation" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1Separator.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1Separator" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1Separator.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.C1Separator" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="M:C1.WPF.C1Separator.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Invoked whenever the effective value of any dependency property has been updated.
            </summary>
      <param name="e">
            The event data that describes the property that changed, as well as old and new values.
            </param>
    </member>
    <member name="P:C1.WPF.C1Separator.FirstLevelTemplate">
      <summary>
            Represents the template to apply to all separator items used in the first level of the menu.
            </summary>
    </member>
    <member name="P:C1.WPF.C1Separator.Orientation">
      <summary>
            Gets or sets the direction of the separator.
            </summary>
    </member>
    <member name="E:C1.WPF.C1Separator.IsMouseOverChanged">
      <summary> 
            Event raised when the <see cref="!:IsMouseOver" /> property has changed.
            </summary>
    </member>
    <member name="T:C1.WPF.BreakLine">
      <summary>
            Specifies hard line breaks before and/or after elements in a <see cref="T:C1.Silverlight.C1WrapPanel" />.
            </summary>
    </member>
    <member name="F:C1.WPF.BreakLine.None">
      <summary>
            No hard breaks. The next element will be positioned in the same line if there is enough room.
            </summary>
    </member>
    <member name="F:C1.WPF.BreakLine.After">
      <summary>
            Add a hard break after this element. The next element will be positioned in the next line.
            </summary>
    </member>
    <member name="F:C1.WPF.BreakLine.Before">
      <summary>
            Add a hard break before this element.
            </summary>
    </member>
    <member name="F:C1.WPF.BreakLine.AfterAndBefore">
      <summary>
            Add hard breaks before and after this element. It will be positioned by itself on a line.
            </summary>
    </member>
    <member name="T:C1.WPF.C1HeaderedContentControl">
      <summary>
            Provides the base implementation for all controls that contain single content and have a header.
            </summary>
    </member>
    <member name="M:C1.WPF.C1HeaderedContentControl.ChangeVisualStateCommon(System.Boolean)">
      <summary>
            Updates the current visual state of the Common visual state group to match the object's properties.
            </summary>
    </member>
    <member name="F:C1.WPF.C1HeaderedContentControl.HeaderVerticalContentAlignmentProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1HeaderedContentControl.HeaderVerticalContentAlignment" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1HeaderedContentControl.HeaderHorizontalContentAlignmentProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1HeaderedContentControl.HeaderHorizontalContentAlignment" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1HeaderedContentControl.HeaderProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1HeaderedContentControl.Header" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1HeaderedContentControl.HeaderTemplateProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1HeaderedContentControl.HeaderTemplate" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1HeaderedContentControl.HeaderFontFamilyProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1HeaderedContentControl.HeaderFontFamily" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1HeaderedContentControl.HeaderFontSizeProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1HeaderedContentControl.HeaderFontSize" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1HeaderedContentControl.HeaderFontStretchProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1HeaderedContentControl.HeaderFontStretch" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1HeaderedContentControl.HeaderFontStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1HeaderedContentControl.HeaderFontStyle" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1HeaderedContentControl.HeaderFontWeightProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1HeaderedContentControl.HeaderFontWeight" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1HeaderedContentControl.HeaderPaddingProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1HeaderedContentControl.HeaderPadding" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1HeaderedContentControl.HorizontalHeaderAlignmentProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1HeaderedContentControl.HorizontalHeaderAlignment" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1HeaderedContentControl.VerticalHeaderAlignmentProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1HeaderedContentControl.VerticalHeaderAlignment" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1HeaderedContentControl.HeaderBackgroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1HeaderedContentControl.HeaderBackground" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1HeaderedContentControl.HeaderForegroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1HeaderedContentControl.HeaderForeground" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1HeaderedContentControl.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1HeaderedContentControl" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1HeaderedContentControl.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.C1HeaderedContentControl" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="M:C1.WPF.C1HeaderedContentControl.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Invoked whenever the effective value of any dependency property has been updated.
            </summary>
      <param name="e">
            The event data that describes the property that changed, as well as old and new values.
            </param>
    </member>
    <member name="P:C1.WPF.C1HeaderedContentControl.HeaderVerticalContentAlignment">
      <summary>
            Gets or sets the VerticalContentAlignment of the header.
            </summary>
    </member>
    <member name="P:C1.WPF.C1HeaderedContentControl.HeaderHorizontalContentAlignment">
      <summary>
            Gets or sets the HorizontalContentAlignment of the header.
            </summary>
    </member>
    <member name="P:C1.WPF.C1HeaderedContentControl.Header">
      <summary>
            Gets or sets the header of this control.
            </summary>
    </member>
    <member name="P:C1.WPF.C1HeaderedContentControl.HeaderTemplate">
      <summary>
            Gets or sets the data template used to display the header.
            </summary>
    </member>
    <member name="P:C1.WPF.C1HeaderedContentControl.HeaderFontFamily">
      <summary>
            Gets or sets the font family of the header.
            </summary>
    </member>
    <member name="P:C1.WPF.C1HeaderedContentControl.HeaderFontSize">
      <summary>
            Gets or sets the font size of the header.
            </summary>
    </member>
    <member name="P:C1.WPF.C1HeaderedContentControl.HeaderFontStretch">
      <summary>
            Gets or sets the font stretch of the header.
            </summary>
    </member>
    <member name="P:C1.WPF.C1HeaderedContentControl.HeaderFontStyle">
      <summary>
            Gets or sets the font style of the header.
            </summary>
    </member>
    <member name="P:C1.WPF.C1HeaderedContentControl.HeaderFontWeight">
      <summary>
            Gets or sets the font weight of the header.
            </summary>
    </member>
    <member name="P:C1.WPF.C1HeaderedContentControl.HeaderPadding">
      <summary>
            Gets or sets the padding of the header.
            </summary>
    </member>
    <member name="P:C1.WPF.C1HeaderedContentControl.HorizontalHeaderAlignment">
      <summary>
            Gets or sets the HorizontalContentAlignment of the header.
            </summary>
    </member>
    <member name="P:C1.WPF.C1HeaderedContentControl.VerticalHeaderAlignment">
      <summary>
            Gets or sets the VerticalContentAlignment of the header.
            </summary>
    </member>
    <member name="P:C1.WPF.C1HeaderedContentControl.HeaderBackground">
      <summary>
            Gets or sets the background brush of the header.
            </summary>
    </member>
    <member name="P:C1.WPF.C1HeaderedContentControl.HeaderForeground">
      <summary>
            Gets or sets the foreground brush of the header.
            </summary>
    </member>
    <member name="E:C1.WPF.C1HeaderedContentControl.IsMouseOverChanged">
      <summary> 
            Event raised when the <see cref="!:IsMouseOver" /> property has changed.
            </summary>
    </member>
    <member name="T:C1.WPF.ValidationState">
      <summary>
            Enumerates binding validation states.
            </summary>
    </member>
    <member name="F:C1.WPF.ValidationState.Valid">
      <summary>
            All bindings are valid.
            </summary>
    </member>
    <member name="F:C1.WPF.ValidationState.InvalidFocused">
      <summary>
            A binding is invalid and the control is focused.
            </summary>
    </member>
    <member name="F:C1.WPF.ValidationState.InvalidUnfocused">
      <summary>
            A binding is invalid and the control is unfocused.
            </summary>
    </member>
    <member name="T:C1.WPF.C1ValidationDecorator">
      <summary>
            Displays binding validation errors.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ValidationDecorator.ChangeVisualStateValidationStates(System.Boolean)">
      <summary>
            Updates the current visual state of the ValidationStates visual state group to match the object's properties.
            </summary>
    </member>
    <member name="F:C1.WPF.C1ValidationDecorator.ValidationStateProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ValidationDecorator.ValidationState" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ValidationDecorator.TargetProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ValidationDecorator.Target" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ValidationDecorator.CornerRadiusProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ValidationDecorator.CornerRadius" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1ValidationDecorator.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1ValidationDecorator" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ValidationDecorator.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.C1ValidationDecorator" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="P:C1.WPF.C1ValidationDecorator.ValidationState">
      <summary>
            Gets or sets the <see cref="P:C1.WPF.C1ValidationDecorator.ValidationState" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ValidationDecorator.Target">
      <summary>
            Gets or sets the target of the validation.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ValidationDecorator.CornerRadius">
      <summary>
            Gets or sets the corner radius.
            </summary>
    </member>
    <member name="T:C1.WPF.C1LayoutRounder">
      <summary>
            Wrapper to get layout rounding in WPF 3.5.
            </summary>
    </member>
    <member name="M:C1.WPF.C1LayoutRounder.MeasureOverride(System.Windows.Size)">
      <summary>
            Provides the behavior for the Measure pass of layout.
            </summary>
    </member>
    <member name="T:C1.WPF.C1LayoutTransformer">
      <summary>
            Represents a control that applies a layout transformation to its Content.
            </summary>
    </member>
    <member name="M:C1.WPF.C1LayoutTransformer.ApplyLayoutTransform">
      <summary>
            Applies the layout transform on the LayoutTransformer control content.
            </summary>
      <remarks>
            Only used in advanced scenarios (like animating the LayoutTransform). 
            Should be used to notify the LayoutTransformer control that some aspect 
            of its Transform property has changed. 
            </remarks>
    </member>
    <member name="M:C1.WPF.C1LayoutTransformer.MeasureOverride(System.Windows.Size)">
      <summary>
            Provides the behavior for the "Measure" pass of layout.
            </summary>
      <param name="availableSize">The available size that this element can give to child elements.</param>
      <returns>The size that this element determines it needs during layout, based on its calculations of child element sizes.</returns>
    </member>
    <member name="M:C1.WPF.C1LayoutTransformer.ArrangeOverride(System.Windows.Size)">
      <summary>
            Provides the behavior for the "Arrange" pass of layout.
            </summary>
      <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
      <returns>The actual size used.</returns>
      <remarks>
            Using the WPF parameter name finalSize instead of Silverlight's finalSize for clarity
            </remarks>
    </member>
    <member name="F:C1.WPF.C1LayoutTransformer.LayoutTransformProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1LayoutTransformer.LayoutTransform" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1LayoutTransformer.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1LayoutTransformer" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1LayoutTransformer.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.C1LayoutTransformer" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="P:C1.WPF.C1LayoutTransformer.LayoutTransform">
      <summary>
            Gets or sets the layout transform to apply on the LayoutTransformer control content.
            </summary>
      <remarks>
            Corresponds to UIElement.LayoutTransform.
            </remarks>
    </member>
    <member name="T:C1.WPF.C1ScrollViewer">
      <summary>
            Represents a scrollable area that can contain other visible elements. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.MoveUpCommand">
      <summary>
            Command to scroll up.
            </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.MoveDownCommand">
      <summary>
            Command to scroll down.
            </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.MoveRightCommand">
      <summary>
            Command to scroll right.
            </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.MoveLeftCommand">
      <summary>
            Command to scroll left.
            </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.MoveTopCommand">
      <summary>
            Command to scroll to the top.
            </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.MoveBottomCommand">
      <summary>
            Command to scroll to the bottom.
            </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.MoveRightEndCommand">
      <summary>
            Command to scroll totally to the right.
            </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.MoveLeftEndCommand">
      <summary>
            Command to scroll totally to the left.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ScrollViewer.ScrollToVerticalOffset(System.Double)">
      <summary>
            Scrolls to vertical offset.
            </summary>
      <param name="offset">The offset.</param>
    </member>
    <member name="M:C1.WPF.C1ScrollViewer.ScrollToHorizontalOffset(System.Double)">
      <summary>
            Scrolls to horizontal offset.
            </summary>
      <param name="offset">The offset.</param>
    </member>
    <member name="M:C1.WPF.C1ScrollViewer.ScrollUp">
      <summary>
            Scrolls the <see cref="T:C1.WPF.C1ScrollViewer" /> content upward by <see cref="P:C1.WPF.C1ScrollViewer.VerticalSmallChange" /> pixels.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ScrollViewer.ScrollDown">
      <summary>
            Scrolls the <see cref="T:C1.WPF.C1ScrollViewer" /> content downward by <see cref="P:C1.WPF.C1ScrollViewer.VerticalSmallChange" /> pixels.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ScrollViewer.ScrollRight">
      <summary>
            Scrolls the <see cref="T:C1.WPF.C1ScrollViewer" /> content to the right by <see cref="P:C1.WPF.C1ScrollViewer.HorizontalSmallChange" /> pixels.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ScrollViewer.ScrollLeft">
      <summary>
            Scrolls the <see cref="T:C1.WPF.C1ScrollViewer" /> content to the left by <see cref="P:C1.WPF.C1ScrollViewer.HorizontalSmallChange" /> pixels.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ScrollViewer.ScrollToHome">
      <summary>
            Scrolls vertically to the beginning of the <see cref="T:C1.WPF.C1ScrollViewer" /> content.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ScrollViewer.ScrollToEnd">
      <summary>
            Scrolls vertically to the end of the <see cref="T:C1.WPF.C1ScrollViewer" /> content.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ScrollViewer.ScrollToTop">
      <summary>
            Scrolls vertically to the beginning of the <see cref="T:C1.WPF.C1ScrollViewer" /> content.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ScrollViewer.ScrollToBottom">
      <summary>
            Scrolls vertically to the end of the <see cref="T:C1.WPF.C1ScrollViewer" /> content.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ScrollViewer.ScrollToRightEnd">
      <summary>
            Scrolls horizontally to the end of the <see cref="T:C1.WPF.C1ScrollViewer" /> content.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ScrollViewer.ScrollToLeftEnd">
      <summary>
            Scrolls horizontally to the beginning of the <see cref="T:C1.WPF.C1ScrollViewer" /> content.
            </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.ExtentHeightProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ScrollViewer.ExtentHeight" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.ExtentWidthProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ScrollViewer.ExtentWidth" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.HorizontalOffsetProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ScrollViewer.HorizontalOffset" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.ScrollableHeightProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ScrollViewer.ScrollableHeight" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.ScrollableWidthProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ScrollViewer.ScrollableWidth" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.VerticalOffsetProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ScrollViewer.VerticalOffset" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.ViewportHeightProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ScrollViewer.ViewportHeight" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.ViewportWidthProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ScrollViewer.ViewportWidth" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.CanScrollUpProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ScrollViewer.CanScrollUp" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.CanScrollRightProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ScrollViewer.CanScrollRight" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.CanScrollLeftProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ScrollViewer.CanScrollLeft" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.CanScrollDownProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ScrollViewer.CanScrollDown" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.HorizontalSmallChangeProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ScrollViewer.HorizontalSmallChange" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.VerticalSmallChangeProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ScrollViewer.VerticalSmallChange" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.VerticalScrollBarVisibilityProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ScrollViewer.VerticalScrollBarVisibility" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.HorizontalScrollBarVisibilityProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ScrollViewer.HorizontalScrollBarVisibility" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ScrollViewer.ScrollModeProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ScrollViewer.ScrollMode" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1ScrollViewer.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1ScrollViewer" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ScrollViewer.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.C1ScrollViewer" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="P:C1.WPF.C1ScrollViewer.ExtentHeight">
      <summary>
            Gets a value that contains the vertical size of the extent. This is a dependency property. 
            </summary>
    </member>
    <member name="P:C1.WPF.C1ScrollViewer.ExtentWidth">
      <summary>
            Gets a value that contains the horizontal size of the extent. This is a dependency property. 
            </summary>
    </member>
    <member name="P:C1.WPF.C1ScrollViewer.HorizontalOffset">
      <summary>
            Gets a value that contains the horizontal offset of the scrolled content. This is a dependency property. 
            </summary>
    </member>
    <member name="P:C1.WPF.C1ScrollViewer.ScrollableHeight">
      <summary>
            Gets a value that represents the vertical size of the content element that can be scrolled. This is a dependency property. 
            </summary>
    </member>
    <member name="P:C1.WPF.C1ScrollViewer.ScrollableWidth">
      <summary>
            Gets a value that represents the horizontal size of the content element that can be scrolled. This is a dependency property. 
            </summary>
    </member>
    <member name="P:C1.WPF.C1ScrollViewer.VerticalOffset">
      <summary>
            Gets a value that contains the vertical offset of the scrolled content. This is a dependency property. 
            </summary>
    </member>
    <member name="P:C1.WPF.C1ScrollViewer.ViewportHeight">
      <summary>
            Gets a value that contains the vertical size of the content's viewport. This is a dependency property. 
            </summary>
    </member>
    <member name="P:C1.WPF.C1ScrollViewer.ViewportWidth">
      <summary>
            Gets a value that contains the horizontal size of the content's viewport. This is a dependency property. 
            </summary>
    </member>
    <member name="P:C1.WPF.C1ScrollViewer.CanScrollUp">
      <summary>
            Gets a value that indicates whether the vertical scroll isn't in the top position. This is a dependency property. 
            </summary>
    </member>
    <member name="P:C1.WPF.C1ScrollViewer.CanScrollRight">
      <summary>
            Gets a value that indicates whether the vertical scroll isn't in the right-most position. This is a dependency property. 
            </summary>
    </member>
    <member name="P:C1.WPF.C1ScrollViewer.CanScrollLeft">
      <summary>
            Gets a value that indicates whether the vertical scroll isn't in the left-most position. This is a dependency property. 
            </summary>
    </member>
    <member name="P:C1.WPF.C1ScrollViewer.CanScrollDown">
      <summary>
            Gets a value that indicates whether the vertical scroll isn't in the bottom position. This is a dependency property. 
            </summary>
    </member>
    <member name="P:C1.WPF.C1ScrollViewer.HorizontalSmallChange">
      <summary>
            Gets or sets the value to be added to or subtracted from the horizontal offset value when the scroll is moved.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ScrollViewer.VerticalSmallChange">
      <summary>
            Gets or sets the value to be added to or subtracted from the vertical offset value when the scroll is moved.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ScrollViewer.VerticalScrollBarVisibility">
      <summary>
            Gets or sets a value that indicates whether a vertical commands should be displayed. This is a dependency property. 
            </summary>
    </member>
    <member name="P:C1.WPF.C1ScrollViewer.HorizontalScrollBarVisibility">
      <summary>
            Gets or sets a value that indicates whether a horizontal commands should be displayed. This is a dependency property.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ScrollViewer.ScrollMode">
      <summary>
            Specifies when the scroll event should be raised. 
            </summary>
    </member>
    <member name="T:C1.WPF.OpacityConverter">
      <summary>
            Converter used to convert <see cref="T:System.Boolean" /> values into opacity values.
            true = 1, false = 0.
            </summary>
    </member>
    <member name="M:C1.WPF.OpacityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Modifies the source data before passing it to the target for display in the UI.
            </summary>
      <param name="value">The source data being passed to the target.</param>
      <param name="targetType">The <see cref="T:System.Type" /> of data expected by the target dependency property.</param>
      <param name="parameter">An optional parameter to be used in the converter logic.</param>
      <param name="culture">The culture of the conversion.</param>
      <returns>
            The value to be passed to the target dependency property.
            </returns>
    </member>
    <member name="M:C1.WPF.OpacityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Modifies the target data before passing it to the source object.  This method is called only in <see cref="F:System.Windows.Data.BindingMode.TwoWay" /> bindings.
            </summary>
      <param name="value">The target data being passed to the source.</param>
      <param name="targetType">The <see cref="T:System.Type" /> of data expected by the source object.</param>
      <param name="parameter">An optional parameter to be used in the converter logic.</param>
      <param name="culture">The culture of the conversion.</param>
      <returns>
            The value to be passed to the source object.
            </returns>
    </member>
    <member name="T:C1.WPF.C1WrapPanel">
      <summary>
            Positions child elements sequentially from top to bottom or from right to left, depending on the value of the <see cref="P:C1.WPF.C1WrapPanel.Orientation" /> property.
            </summary>
    </member>
    <member name="F:C1.WPF.C1WrapPanel.OrientationProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1WrapPanel.Orientation" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1WrapPanel.ItemWidthProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1WrapPanel.ItemWidth" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1WrapPanel.ItemHeightProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1WrapPanel.ItemHeight" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1WrapPanel.GetBreakLine(System.Windows.DependencyObject)">
      <summary> 
            Gets the value of the BreakLine attached property for the 
            specified element.
            </summary>
      <param name="element">
            The element from which to read the attached property.
            </param>
      <returns>The value of the BreakLine property.</returns>
    </member>
    <member name="M:C1.WPF.C1WrapPanel.SetBreakLine(System.Windows.DependencyObject,C1.WPF.BreakLine)">
      <summary> 
            Sets the value of the BreakLine attached property for the 
            specified element.
            </summary>
      <param name="element">
            The element to write the attached property to.
            </param>
      <param name="value">The property value to set.</param>
    </member>
    <member name="F:C1.WPF.C1WrapPanel.BreakLineProperty">
      <summary> 
            Identifies the BreakLine attached property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1WrapPanel.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1WrapPanel" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1WrapPanel.Orientation">
      <summary>
            Gets or sets a value that indicates the dimension by which child elements are stacked.
            </summary>
    </member>
    <member name="P:C1.WPF.C1WrapPanel.ItemWidth">
      <summary>
            Gets or sets a value that specifies the width of all items that are contained within the panel.
            </summary>
    </member>
    <member name="P:C1.WPF.C1WrapPanel.ItemHeight">
      <summary>
            Gets or sets a value that specifies the height of all items that are contained within the panel.
            </summary>
    </member>
    <member name="T:C1.WPF.Dock">
      <summary>
            Specifies how controls are sized and aligned within <see cref="T:C1.Silverlight.C1DockPanel" /> controls.
            </summary>
    </member>
    <member name="F:C1.WPF.Dock.Left">
      <summary>
            The control's left edge is docked to the left edge of its containing control. 
            </summary>
    </member>
    <member name="F:C1.WPF.Dock.Right">
      <summary>
            The control's right edge is docked to the right edge of its containing control. 
            </summary>
    </member>
    <member name="F:C1.WPF.Dock.Top">
      <summary>
            The control's top edge is docked to the top of its containing control. 
            </summary>
    </member>
    <member name="F:C1.WPF.Dock.Bottom">
      <summary>
            The control's bottom edge is docked to the bottom of its containing control. 
            </summary>
    </member>
    <member name="T:C1.WPF.DockExtensions">
      <summary>
            Provides exntesions methods for <see cref="T:C1.WPF.Dock" />.
            </summary>
    </member>
    <member name="M:C1.WPF.DockExtensions.GetOrientation(C1.WPF.Dock)">
      <summary>
            Gets the orientation.
            </summary>
      <param name="dock">The dock.</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.DockExtensions.GetOpposite(C1.WPF.Dock)">
      <summary>
            Gets the opposite.
            </summary>
      <param name="dock">The dock.</param>
      <returns>
      </returns>
    </member>
    <member name="T:C1.WPF.Anchor">
      <summary>
            Specifies an anchor point in a visual element.
            </summary>
    </member>
    <member name="F:C1.WPF.Anchor.TopLeft">
      <summary>
            The top left corner of the visual element.
            </summary>
    </member>
    <member name="F:C1.WPF.Anchor.TopRight">
      <summary>
            The top right corner of the visual element.
            </summary>
    </member>
    <member name="F:C1.WPF.Anchor.BottomLeft">
      <summary>
            The bottom left corner of the visual element.
            </summary>
    </member>
    <member name="F:C1.WPF.Anchor.BottomRight">
      <summary>
            The bottom right corner of the visual element.
            </summary>
    </member>
    <member name="F:C1.WPF.Anchor.Center">
      <summary>
            The center of the visual element.
            </summary>
    </member>
    <member name="T:C1.WPF.AnchorMatching">
      <summary>
            Specifies an anchor matching between two elements.
            </summary>
    </member>
    <member name="P:C1.WPF.AnchorMatching.FixedElementAnchor">
      <summary>
            Anchor of the fixed element.
            </summary>
    </member>
    <member name="P:C1.WPF.AnchorMatching.MoveableElementAnchor">
      <summary>
            Anchor of the element that will be located.
            </summary>
    </member>
    <member name="T:C1.WPF.C1ComboBox">
      <summary>
            The C1ComboBox control combines an editable text box with an auto-searchable drop-down list. The list can be shown or hidden by clicking the control’s drop-down arrow.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ComboBox.BeginEdit(System.String)">
      <summary>
            Begins the edit.
            </summary>
      <param name="text">The text.</param>
    </member>
    <member name="M:C1.WPF.C1ComboBox.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>
            Called when the value of the <see cref="P:Items" /> property changes.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ComboBox.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>
            Called before the <see cref="E:MouseLeftButtonDown" /> event occurs.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ComboBox.OnEditCompleted">
      <summary>
            Fires the EditCompleted event.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ComboBox.IsOpenKey(System.Windows.Input.Key)">
      <summary>
            Return true if that key should open the combo box.
            Override to handle you own keyboard selection strategy.
            </summary>
      <param name="key">The key that was pressed.</param>
      <returns>True if the key pressed should open the combo box.</returns>
    </member>
    <member name="M:C1.WPF.C1ComboBox.MoveListBox(System.Windows.Input.Key,System.Int32@)">
      <summary>
            Get the next item in the ListBox when a key is pressed.
            You may override this to implement your own keyboard selection strategy.
            </summary>
      <param name="key">Key that was pressed.</param>
      <param name="newIndex">The new selected index.</param>
      <returns>True if it is a handled key.</returns>
    </member>
    <member name="M:C1.WPF.C1ComboBox.ChangeVisualStateDropDownOpen(System.Boolean)">
      <summary>
            Updates the current visual state of the DropDownOpen visual state group to match the object's properties.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ComboBox.ChangeVisualStateCommon(System.Boolean)">
      <summary>
            Updates the current visual state of the Common visual state group to match the object's properties.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ComboBox.ChangeVisualStateFocus(System.Boolean)">
      <summary>
            Updates the current visual state of the Focus visual state group to match the object's properties.
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.SelectedItemProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.SelectedItem" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.SelectedIndexProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.SelectedIndex" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.SelectedValuePathProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.SelectedValuePath" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.SelectedValueProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.SelectedValue" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.TextProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.Text" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.ItemConverterProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.ItemConverter" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.AutoCompleteProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.AutoComplete" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.MaxDropDownItemsProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.MaxDropDownItems" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.DefaultItemHeightProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.DefaultItemHeight" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.IsEditableProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.IsEditable" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.WatermarkProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.Watermark" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.ItemContainerStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.ItemContainerStyle" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.TextAlignmentProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.TextAlignment" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.IsDropDownOpenProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.IsDropDownOpen" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.DropDownHeightProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.DropDownHeight" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.DropDownWidthProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.DropDownWidth" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.MaxDropDownHeightProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.MaxDropDownHeight" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.MaxDropDownWidthProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.MaxDropDownWidth" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.DropDownDirectionProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.DropDownDirection" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.ScrollBarStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.ScrollBarStyle" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.FocusCuesVisibilityProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.FocusCuesVisibility" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.DisabledCuesVisibilityProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.DisabledCuesVisibility" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.ValidationDecoratorStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.ValidationDecoratorStyle" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.MouseOverBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.MouseOverBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.SelectionBackgroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.SelectionBackground" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.SelectionForegroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.SelectionForeground" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.CaretBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.CaretBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.SelectedBackgroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.SelectedBackground" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.PressedBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.PressedBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.FocusBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.FocusBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.ButtonBackgroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.ButtonBackground" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBox.ButtonForegroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBox.ButtonForeground" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1ComboBox.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1ComboBox" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ComboBox.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.C1ComboBox" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="M:C1.WPF.C1ComboBox.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Invoked whenever the effective value of any dependency property has been updated.
            </summary>
      <param name="e">
            The event data that describes the property that changed, as well as old and new values.
            </param>
    </member>
    <member name="E:C1.WPF.C1ComboBox.EditCompleted">
      <summary>
            Handle this event to know when the user has completed the edits.
            </summary>
    </member>
    <member name="E:C1.WPF.C1ComboBox.ValidateInput">
      <summary>
            Event fired when new text is added to an editable C1ComboBox.
            Catch this event to validate the new input.
            </summary>
    </member>
    <member name="E:C1.WPF.C1ComboBox.KeyDownInPopup">
      <summary>
            Handle this event to provide your own custom navigation when the popup is opened.
            Receives the key that was pressed and the current index, and returns the new index that should be selected.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.SelectedItem">
      <summary>
            Gets or sets the current selected item or returns null if there is no selection.
            </summary>
    </member>
    <member name="E:C1.WPF.C1ComboBox.SelectedItemChanged">
      <summary> 
            Event raised when the <see cref="P:C1.WPF.C1ComboBox.SelectedItem" /> property has changed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.SelectedIndex">
      <summary>
            Gets or sets the current selected index or returns -1 if there is no selection, or the selection doesn't belong to the Items collection.
            </summary>
    </member>
    <member name="E:C1.WPF.C1ComboBox.SelectedIndexChanged">
      <summary> 
            Event raised when the <see cref="P:C1.WPF.C1ComboBox.SelectedIndex" /> property has changed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.SelectedValuePath">
      <summary>
            Gets or sets the path that is used to get the SelectedValue from the SelectedItem.
            </summary>
      <remarks>
            Returns the path used to get the SelectedValue. The default is an empty string.
            </remarks>
    </member>
    <member name="P:C1.WPF.C1ComboBox.SelectedValue">
      <summary>
            Gets or sets the value of the SelectedItem, obtained by using SelectedValuePath.
            </summary>
    </member>
    <member name="E:C1.WPF.C1ComboBox.SelectedValueChanged">
      <summary> 
            Event raised when the <see cref="P:C1.WPF.C1ComboBox.SelectedValue" /> property has changed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.Text">
      <summary>
            Gets or sets the text in the <see cref="T:C1.WPF.C1ComboBox" />. The behavior depends on the AutoComplete and IsEditable properties.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.ItemConverter">
      <summary>
            Item converter used to convert the items to string and vice versa.
            </summary>
      <remarks>
            Use in conjunction with ItemTemplate to support AutoComplete and editing when providing custom item visualization.
            </remarks>
    </member>
    <member name="P:C1.WPF.C1ComboBox.AutoComplete">
      <summary>
            Gets or sets whether the control should try to automatically complete entries using the list items as an item source.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.MaxDropDownItems">
      <summary>
            Obsolete. Use MaxDropDownHeight.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.DefaultItemHeight">
      <summary>
            Obsolete. Use ItemContainerStyle.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.IsEditable">
      <summary>
            Get/Set if the user can select a value not contained in the <see cref="T:C1.WPF.C1ComboBox" />' Items collection.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.Watermark">
      <summary>
            Gets or sets the watermark content displayed when the control is empty.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.ItemContainerStyle">
      <summary>
            Gets or sets the style used for the inner <see cref="T:C1.WPF.C1ComboBox" />'s items.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.TextAlignment">
      <summary>
            Gets or sets a value that indicates the horizontal alignment of text content.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.IsDropDownOpen">
      <summary>
            Open or close the <see cref="T:C1.WPF.C1ComboBox" /> popup.
            </summary>
    </member>
    <member name="E:C1.WPF.C1ComboBox.IsDropDownOpenChanged">
      <summary> 
            Event raised when the <see cref="P:C1.WPF.C1ComboBox.IsDropDownOpen" /> property has changed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.DropDownHeight">
      <summary>
            Gets or sets the height of the dropdown (set to Double.NaN to size automatically).
            </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.DropDownWidth">
      <summary>
            Gets or sets the width of the drop-down box (set to Double.NaN to size automatically).
            </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.MaxDropDownHeight">
      <summary>
            Gets or sets maximum height constraint of the drop-down box.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.MaxDropDownWidth">
      <summary>
            Gets or sets maximum width constraint of the drop-down box.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.DropDownDirection">
      <summary>
            Specifies the expand direction of the <see cref="T:C1.WPF.C1ComboBox" /> drop down.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.FocusCuesVisibility">
      <summary>
            Gets or sets a value indicating whether the focus visuals of the control are visible.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.DisabledCuesVisibility">
      <summary>
            Gets or sets a value indicating whether the disabled visuals of the control are visible.
            </summary>
    </member>
    <member name="E:C1.WPF.C1ComboBox.IsMouseOverChanged">
      <summary> 
            Event raised when the <see cref="!:IsMouseOver" /> property has changed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.ValidationDecoratorStyle">
      <summary>
            Gets or sets the style that is applied to the inner <see cref="T:C1.WPF.C1ValidationDecorator" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.MouseOverBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when it has the mouse over.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.SelectionBackground">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that fills the background of the selected text.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.SelectionForeground">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used as foreground of the selected text.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.CaretBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> of the blinking cursor of an input control.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.SelectedBackground">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when it is selected.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.PressedBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to paint a button when it is pressed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.FocusBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the focused control.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.ButtonBackground">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that will be assigned to the Background of the buttons inside the control.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBox.ButtonForeground">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that will be assigned to the Foreground of the buttons inside the control.
            </summary>
    </member>
    <member name="T:C1.WPF.C1ComboBoxItem">
      <summary>
            Implements a selectable item inside a <see cref="T:C1.WPF.C1ComboBox" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ComboBoxItem.OnContentChanged(System.Object,System.Object)">
      <summary>
            Called when the value of the <see cref="P:Content" /> property changes.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ComboBoxItem.ChangeVisualStateCommon(System.Boolean)">
      <summary>
            Updates the current visual state of the Common visual state group to match the object's properties.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ComboBoxItem.ChangeVisualStateFocus(System.Boolean)">
      <summary>
            Updates the current visual state of the Focus visual state group to match the object's properties.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ComboBoxItem.ChangeVisualStateSelection(System.Boolean)">
      <summary>
            Updates the current visual state of the Selection visual state group to match the object's properties.
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBoxItem.IsSelectedProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBoxItem.IsSelected" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBoxItem.SelectedBackgroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBoxItem.SelectedBackground" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1ComboBoxItem.MouseOverBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1ComboBoxItem.MouseOverBrush" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1ComboBoxItem.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1ComboBoxItem" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1ComboBoxItem.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.C1ComboBoxItem" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="M:C1.WPF.C1ComboBoxItem.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Invoked whenever the effective value of any dependency property has been updated.
            </summary>
      <param name="e">
            The event data that describes the property that changed, as well as old and new values.
            </param>
    </member>
    <member name="P:C1.WPF.C1ComboBoxItem.IsSelected">
      <summary>
            Gets or sets a Boolean value indicating that this <see cref="T:C1.WPF.C1ComboBoxItem" /> is selected.
            </summary>
    </member>
    <member name="E:C1.WPF.C1ComboBoxItem.IsMouseOverChanged">
      <summary> 
            Event raised when the <see cref="!:IsMouseOver" /> property has changed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBoxItem.SelectedBackground">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when it is selected.
            </summary>
    </member>
    <member name="P:C1.WPF.C1ComboBoxItem.MouseOverBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when it has the mouse over.
            </summary>
    </member>
    <member name="T:C1.WPF.C1DropDown">
      <summary>
            C1DropDown provides a generic drop-down control with a Header property that determines what the user sees when the drop-down part of the control is closed, and a Content property that determines what goes into the drop-down section.
            </summary>
    </member>
    <member name="T:C1.WPF.C1DropDownButton">
      <summary>
            C1DropDown provides a generic drop-down control with a Header property that determines what the user sees when the drop-down part of the control is closed, and a Content property that determines what goes into the drop-down section.
            </summary>
    </member>
    <member name="M:C1.WPF.C1DropDownButton.GetPreferedLocations">
      <summary>
            Get the locations where the dropdown will try to locate the <see cref="T:System.Windows.Controls.Primitives.Popup" /> once it's opened.
            </summary>
      <returns>Ordered list of <see cref="T:C1.WPF.AnchorMatching" /> to try.</returns>
    </member>
    <member name="M:C1.WPF.C1DropDownButton.ChangeVisualStateDropDownOpen(System.Boolean)">
      <summary>
            Updates the current visual state of the DropDownOpen visual state group to match the object's properties.
            </summary>
    </member>
    <member name="M:C1.WPF.C1DropDownButton.ChangeVisualStateCommon(System.Boolean)">
      <summary>
            Updates the current visual state of the Common visual state group to match the object's properties.
            </summary>
    </member>
    <member name="M:C1.WPF.C1DropDownButton.ChangeVisualStateFocus(System.Boolean)">
      <summary>
            Updates the current visual state of the Focus visual state group to match the object's properties.
            </summary>
    </member>
    <member name="F:C1.WPF.C1DropDownButton.IsDropDownOpenProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1DropDownButton.IsDropDownOpen" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1DropDownButton.DropDownHeightProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1DropDownButton.DropDownHeight" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1DropDownButton.DropDownWidthProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1DropDownButton.DropDownWidth" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1DropDownButton.MaxDropDownHeightProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1DropDownButton.MaxDropDownHeight" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1DropDownButton.MaxDropDownWidthProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1DropDownButton.MaxDropDownWidth" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1DropDownButton.MinDropDownHeightProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1DropDownButton.MinDropDownHeight" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1DropDownButton.MinDropDownWidthProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1DropDownButton.MinDropDownWidth" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1DropDownButton.DropDownDirectionProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1DropDownButton.DropDownDirection" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1DropDownButton.AutoCloseProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1DropDownButton.AutoClose" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1DropDownButton.FocusCuesVisibilityProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1DropDownButton.FocusCuesVisibility" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1DropDownButton.DisabledCuesVisibilityProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1DropDownButton.DisabledCuesVisibility" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1DropDownButton.ValidationDecoratorStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1DropDownButton.ValidationDecoratorStyle" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1DropDownButton.MouseOverBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1DropDownButton.MouseOverBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1DropDownButton.PressedBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1DropDownButton.PressedBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1DropDownButton.FocusBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1DropDownButton.FocusBrush" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1DropDownButton.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1DropDownButton" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1DropDownButton.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.C1DropDownButton" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="M:C1.WPF.C1DropDownButton.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Invoked whenever the effective value of any dependency property has been updated.
            </summary>
      <param name="e">
            The event data that describes the property that changed, as well as old and new values.
            </param>
    </member>
    <member name="P:C1.WPF.C1DropDownButton.IsDropDownOpen">
      <summary>
            Open or close the control drop-down box.
            </summary>
    </member>
    <member name="E:C1.WPF.C1DropDownButton.IsDropDownOpenChanged">
      <summary> 
            Event raised when the <see cref="P:C1.WPF.C1DropDownButton.IsDropDownOpen" /> property has changed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1DropDownButton.DropDownHeight">
      <summary>
            Gets or sets the height of the drop-down box (set to Double.NaN to size automatically).
            </summary>
    </member>
    <member name="P:C1.WPF.C1DropDownButton.DropDownWidth">
      <summary>
            Gets or sets the width of the drop-down box (set to Double.NaN to size automatically).
            </summary>
    </member>
    <member name="P:C1.WPF.C1DropDownButton.MaxDropDownHeight">
      <summary>
            Gets or sets maximum height constraint of the drop-down box.
            </summary>
    </member>
    <member name="P:C1.WPF.C1DropDownButton.MaxDropDownWidth">
      <summary>
            Gets or sets maximum width constraint of the drop-down box.
            </summary>
    </member>
    <member name="P:C1.WPF.C1DropDownButton.MinDropDownHeight">
      <summary>
            Gets or sets minimum height constraint of the drop-down box.
            </summary>
    </member>
    <member name="P:C1.WPF.C1DropDownButton.MinDropDownWidth">
      <summary>
            Gets or sets minimum width constraint of the drop-down box.
            </summary>
    </member>
    <member name="P:C1.WPF.C1DropDownButton.DropDownDirection">
      <summary>
            Specifies the expand direction of the control drop-down box.
            </summary>
    </member>
    <member name="P:C1.WPF.C1DropDownButton.AutoClose">
      <summary>
            Auto closes the dropdown when the user clicks outside it.
            </summary>
    </member>
    <member name="P:C1.WPF.C1DropDownButton.FocusCuesVisibility">
      <summary>
            Gets or sets a value indicating whether the focus visuals of the control are visible.
            </summary>
    </member>
    <member name="P:C1.WPF.C1DropDownButton.DisabledCuesVisibility">
      <summary>
            Gets or sets a value indicating whether the disabled visuals of the control are visible.
            </summary>
    </member>
    <member name="E:C1.WPF.C1DropDownButton.IsMouseOverChanged">
      <summary> 
            Event raised when the <see cref="!:IsMouseOver" /> property has changed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1DropDownButton.ValidationDecoratorStyle">
      <summary>
            Gets or sets the style that is applied to the inner <see cref="T:C1.WPF.C1ValidationDecorator" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1DropDownButton.MouseOverBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when it has the mouse over.
            </summary>
    </member>
    <member name="P:C1.WPF.C1DropDownButton.PressedBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to paint a button when it is pressed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1DropDownButton.FocusBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the focused control.
            </summary>
    </member>
    <member name="F:C1.WPF.C1DropDown.ShowButtonProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1DropDown.ShowButton" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1DropDown.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1DropDown" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1DropDown.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.C1DropDown" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="P:C1.WPF.C1DropDown.ShowButton">
      <summary>
            Gets/sets if the a<see cref="T:System.Windows.Controls.Primitives.ToggleButton" /> is shown.
            </summary>
    </member>
    <member name="T:C1.WPF.PrepareDropDownEventArgs">
      <summary>
            Argument of the event fired before the drop-down box is opened.
            </summary>
    </member>
    <member name="P:C1.WPF.PrepareDropDownEventArgs.DropDownWidth">
      <summary>
            Width of the DropDown, modify to set a custom size, set double.NaN to use default.
            </summary>
    </member>
    <member name="P:C1.WPF.PrepareDropDownEventArgs.DropDownHeight">
      <summary>
            Height of the DropDown, modify to set a custom size, set double.NaN to use default.
            </summary>
    </member>
    <member name="T:C1.WPF.C1MessageBox">
      <summary>
            Displays a message box.
            </summary>
    </member>
    <member name="M:C1.WPF.C1MessageBox.Show(System.String,System.String,C1.WPF.C1MessageBoxButton,C1.WPF.C1MessageBoxIcon,System.Action{System.Windows.MessageBoxResult})">
      <summary>
            Displays a message box that has a message, title bar caption, button and icon; and calls back with the result.
            </summary>
      <param name="message">The text to display as a message.</param>
      <param name="caption">The title bar caption.</param>
      <param name="button">A <see cref="T:C1.WPF.C1MessageBoxButton" /> value that specifies which buttons to display.</param>
      <param name="icon">A <see cref="T:C1.WPF.C1MessageBoxIcon" /> value that specifies the icon to display.</param>
      <param name="callback">An <see cref="T:System.Action`1" /> which is called with the result of the message box.</param>
    </member>
    <member name="M:C1.WPF.C1MessageBox.Show(System.String,System.Action{System.Windows.MessageBoxResult})">
      <summary>
            Displays a message box that has a message and calls back with the result.
            </summary>
      <param name="message">The text to display as a message.</param>
      <param name="callback">An <see cref="T:System.Action`1" /> which is called with the result of the message box.</param>
    </member>
    <member name="M:C1.WPF.C1MessageBox.Show(System.String,System.String,System.Action{System.Windows.MessageBoxResult})">
      <summary>
            Displays a message box that has a message and title bar caption; and calls back with the result.
            </summary>
      <param name="message">The text to display as a message.</param>
      <param name="caption">The title bar caption.</param>
      <param name="callback">An <see cref="T:System.Action`1" /> which is called with the result of the message box.</param>
    </member>
    <member name="M:C1.WPF.C1MessageBox.Show(System.String,System.String,C1.WPF.C1MessageBoxButton,System.Action{System.Windows.MessageBoxResult})">
      <summary>
            Displays a message box that has a message, title bar caption and button; and calls back with the result.
            </summary>
      <param name="message">The text to display as a message.</param>
      <param name="caption">The title bar caption.</param>
      <param name="button">A <see cref="T:C1.WPF.C1MessageBoxButton" /> value that specifies which buttons to display.</param>
      <param name="callback">An <see cref="T:System.Action`1" /> which is called with the result of the message box.</param>
    </member>
    <member name="M:C1.WPF.C1MessageBox.Show(System.String,System.String,C1.WPF.C1MessageBoxIcon,System.Action{System.Windows.MessageBoxResult})">
      <summary>
            Displays a message box that has a message, title bar caption and icon; and calls back with the result.
            </summary>
      <param name="message">The text to display as a message.</param>
      <param name="caption">The title bar caption.</param>
      <param name="icon">A <see cref="T:C1.WPF.C1MessageBoxIcon" /> value that specifies the icon to display.</param>
      <param name="callback">An <see cref="T:System.Action`1" /> which is called with the result of the message box.</param>
    </member>
    <member name="M:C1.WPF.C1MessageBox.Show(System.String)">
      <summary>
            Displays a message box that has a message.
            </summary>
      <param name="message">The text to display as a message.</param>
    </member>
    <member name="M:C1.WPF.C1MessageBox.Show(System.String,System.String)">
      <summary>
            Displays a message box that has a message and title bar caption.
            </summary>
      <param name="message">The text to display as a message.</param>
      <param name="caption">The title bar caption.</param>
    </member>
    <member name="M:C1.WPF.C1MessageBox.Show(System.String,System.String,C1.WPF.C1MessageBoxButton)">
      <summary>
            Displays a message box that has a message, title bar caption and button.
            </summary>
      <param name="message">The text to display as a message.</param>
      <param name="caption">The title bar caption.</param>
      <param name="button">A <see cref="T:C1.WPF.C1MessageBoxButton" /> value that specifies which buttons to display.</param>
    </member>
    <member name="M:C1.WPF.C1MessageBox.Show(System.String,System.String,C1.WPF.C1MessageBoxIcon)">
      <summary>
            Displays a message box that has a message, title bar caption and icon.
            </summary>
      <param name="message">The text to display as a message.</param>
      <param name="caption">The title bar caption.</param>
      <param name="icon">A <see cref="T:C1.WPF.C1MessageBoxIcon" /> value that specifies the icon to display.</param>
    </member>
    <member name="M:C1.WPF.C1MessageBox.Show(System.String,System.String,C1.WPF.C1MessageBoxButton,C1.WPF.C1MessageBoxIcon)">
      <summary>
            Displays a message box that has a message, title bar caption and icon.
            </summary>
      <param name="message">The text to display as a message.</param>
      <param name="caption">The title bar caption.</param>
      <param name="button">A <see cref="T:C1.WPF.C1MessageBoxButton" /> value that specifies which buttons to display.</param>
      <param name="icon">A <see cref="T:C1.WPF.C1MessageBoxIcon" /> value that specifies the icon to display.</param>
    </member>
    <member name="P:C1.WPF.C1MessageBox.WindowStyle">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Style" /> that defines the appearance of the window.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MessageBox.ContentStyle">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Style" /> that defines the appearance of the window's content.
            </summary>
    </member>
    <member name="T:C1.WPF.C1MessageBoxButton">
      <summary>
            Specifies the buttons that are displayed on a message box.
            </summary>
    </member>
    <member name="F:C1.WPF.C1MessageBoxButton.OK">
      <summary>
            The message box displays an OK button.
            </summary>
    </member>
    <member name="F:C1.WPF.C1MessageBoxButton.OKCancel">
      <summary>
            The message box displays OK and Cancel buttons.
            </summary>
    </member>
    <member name="F:C1.WPF.C1MessageBoxButton.YesNoCancel">
      <summary>
            The message box displays OK and Cancel buttons.
            </summary>
    </member>
    <member name="F:C1.WPF.C1MessageBoxButton.YesNo">
      <summary>
            The message box displays Yes and No buttons.
            </summary>
    </member>
    <member name="T:C1.WPF.C1MessageBoxIcon">
      <summary>
            Specifies the icon that is displayed by a message box.
            </summary>
    </member>
    <member name="F:C1.WPF.C1MessageBoxIcon.None">
      <summary>
            No icon is displayed.
            </summary>
    </member>
    <member name="F:C1.WPF.C1MessageBoxIcon.Error">
      <summary>
            The message box displays an error icon.
            </summary>
    </member>
    <member name="F:C1.WPF.C1MessageBoxIcon.Warning">
      <summary>
            The message box displays a warning icon.
            </summary>
    </member>
    <member name="F:C1.WPF.C1MessageBoxIcon.Information">
      <summary>
            The message box displays an information icon.
            </summary>
    </member>
    <member name="F:C1.WPF.C1MessageBoxIcon.Question">
      <summary>
            The message box displays an information icon.
            </summary>
    </member>
    <member name="T:C1.WPF.C1MessageBoxContent">
      <summary>
            Control that displays the content of a message box. It's meant to be used inside a <see cref="T:C1.Silverlight.C1Window" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1MessageBoxContent.ChangeVisualStateIcon(System.Boolean)">
      <summary>
            Updates the current visual state of the Icon visual state group to match the object's properties.
            </summary>
    </member>
    <member name="M:C1.WPF.C1MessageBoxContent.ChangeVisualStateCommon(System.Boolean)">
      <summary>
            Updates the current visual state of the Common visual state group to match the object's properties.
            </summary>
    </member>
    <member name="F:C1.WPF.C1MessageBoxContent.OKTextProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1MessageBoxContent.OKText" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1MessageBoxContent.CancelTextProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1MessageBoxContent.CancelText" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1MessageBoxContent.YesTextProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1MessageBoxContent.YesText" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1MessageBoxContent.NoTextProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1MessageBoxContent.NoText" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1MessageBoxContent.MessageProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1MessageBoxContent.Message" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1MessageBoxContent.ButtonStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1MessageBoxContent.ButtonStyle" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1MessageBoxContent.ButtonProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1MessageBoxContent.Button" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1MessageBoxContent.IconProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1MessageBoxContent.Icon" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1MessageBoxContent.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1MessageBoxContent" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1MessageBoxContent.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.C1MessageBoxContent" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="M:C1.WPF.C1MessageBoxContent.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Invoked whenever the effective value of any dependency property has been updated.
            </summary>
      <param name="e">
            The event data that describes the property that changed, as well as old and new values.
            </param>
    </member>
    <member name="E:C1.WPF.C1MessageBoxContent.ButtonClick">
      <summary>
            Event fired when a button is pressed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MessageBoxContent.OKText">
      <summary>
            Gets or sets the text displayed in the OK button.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MessageBoxContent.CancelText">
      <summary>
            Gets or sets the text displayed in the Cancel button.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MessageBoxContent.YesText">
      <summary>
            Gets or sets the text displayed in the Yes button.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MessageBoxContent.NoText">
      <summary>
            Gets or sets the text displayed in the No button.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MessageBoxContent.Message">
      <summary>
            Gets or sets the message text displayed in the message box.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MessageBoxContent.ButtonStyle">
      <summary>
            Gets or sets the style applied to the message box's buttons.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MessageBoxContent.Button">
      <summary>
            Gets or sets a <see cref="T:C1.WPF.C1MessageBoxButton" /> specifying which buttons are displayed in the message box.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MessageBoxContent.Icon">
      <summary>
            Gets or sets a <see cref="T:C1.WPF.C1MessageBoxIcon" /> specifying which icon is displayed in the message box.
            </summary>
    </member>
    <member name="E:C1.WPF.C1MessageBoxContent.IsMouseOverChanged">
      <summary> 
            Event raised when the <see cref="!:IsMouseOver" /> property has changed.
            </summary>
    </member>
    <member name="M:C1.WPF.C1SplitButton.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1SplitButton" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1SplitButton.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.C1SplitButton" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="E:C1.WPF.C1SplitButton.Click">
      <summary>
            Occurs when a System.Windows.Controls.Button is clicked.
            </summary>
    </member>
    <member name="T:C1.WPF.C1Window">
      <remarks>
            This control should not be added as the child of another control. It can either be opened as a <see cref="T:System.Windows.Controls.Primitives.Popup" /> by calling the <see cref="M:C1.WPF.C1Window.Show" /> method
            or displayed inside a <see cref="P:C1.WPF.C1Window.Canvas" /> by using the <see cref="P:C1.WPF.C1Window.Canvas" /> property.
            </remarks>
      <summary>
            Shows content in a window inside WPF.
            </summary>
    </member>
    <member name="M:C1.WPF.C1Window.BringToFront">
      <summary>
            Puts the window in front of all windows.
            </summary>
    </member>
    <member name="M:C1.WPF.C1Window.CenterOnScreen">
      <summary>
            Centers the window in its container.
            </summary>
      <remarks>
            If the window is not yet loaded the positioning is delayed until it's loaded.
            </remarks>
    </member>
    <member name="M:C1.WPF.C1Window.Show">
      <summary>
            Opens the window.
            </summary>
      <remarks>
            Calling Show makes the window visible, active and in front of other windows.
            A window cannot be reopened after it has been closed. It's possible to hide the window without closing it using <see cref="M:C1.Silverlight.C1Window.Hide" /> or the <see cref="T:System.Windows.Visibility" /> property.
            </remarks>
    </member>
    <member name="M:C1.WPF.C1Window.ShowModal">
      <summary>
            Opens the window as modal.
            </summary>
      <remarks>
            Opens the window over a grayed out layer preventing the user from interacting with anything else until the window is closed.
            </remarks>
    </member>
    <member name="M:C1.WPF.C1Window.Hide">
      <summary>
            Hides the window without closing it.
            </summary>
    </member>
    <member name="M:C1.WPF.C1Window.Close">
      <summary>
            Closes the window.
            </summary>
      <remarks>
            A window cannot be reopened after it has been closed.
            </remarks>
    </member>
    <member name="M:C1.WPF.C1Window.ChangeVisualStateActive(System.Boolean)">
      <summary>
            Updates the current visual state of the Active visual state group to match the object's properties.
            </summary>
    </member>
    <member name="M:C1.WPF.C1Window.ChangeVisualStateWindowState(System.Boolean)">
      <summary>
            Updates the current visual state of the WindowState visual state group to match the object's properties.
            </summary>
    </member>
    <member name="M:C1.WPF.C1Window.ChangeVisualStateDrag(System.Boolean)">
      <summary>
            Updates the current visual state of the Drag visual state group to match the object's properties.
            </summary>
    </member>
    <member name="F:C1.WPF.C1Window.LeftProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1Window.Left" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1Window.TopProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1Window.Top" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1Window.IsActiveProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1Window.IsActive" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1Window.IsResizableProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1Window.IsResizable" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1Window.ModalBackgroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1Window.ModalBackground" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1Window.ShowMaximizeButtonProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1Window.ShowMaximizeButton" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1Window.ShowCloseButtonProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1Window.ShowCloseButton" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1Window.DialogResultProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1Window.DialogResult" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1Window.ShowMinimizeButtonProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1Window.ShowMinimizeButton" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1Window.WindowStateProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1Window.WindowState" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1Window.IsDraggableProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1Window.IsDraggable" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1Window.MouseOverBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1Window.MouseOverBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1Window.PressedBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1Window.PressedBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1Window.ButtonBackgroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1Window.ButtonBackground" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1Window.ButtonForegroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1Window.ButtonForeground" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1Window.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1Window" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1Window.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.C1Window" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="E:C1.WPF.C1Window.Closed">
      <summary>
            Event fired when the window is closed by the user or the <see cref="M:C1.WPF.C1Window.Close" /> method.
            </summary>
    </member>
    <member name="E:C1.WPF.C1Window.Closing">
      <summary>
            Event fired when the window is about to close, allows the handler to stop the window from being closed.
            </summary>
    </member>
    <member name="E:C1.WPF.C1Window.PositionChanged">
      <summary>
            Fires when the window position changes.
            </summary>
    </member>
    <member name="P:C1.WPF.C1Window.Canvas">
      <summary>
            Gets or sets the <see cref="P:C1.WPF.C1Window.Canvas" /> used to display the window.
            </summary>
    </member>
    <member name="P:C1.WPF.C1Window.Left">
      <summary>
            Gets or sets the distance from the left side of the window to the left side of its container.
            </summary>
    </member>
    <member name="P:C1.WPF.C1Window.Top">
      <summary>
            Gets or sets the distance from the top side of the window to the top side of its container.
            </summary>
    </member>
    <member name="P:C1.WPF.C1Window.IsActive">
      <summary>
            Gets or sets whether the window is the active window.
            </summary>
    </member>
    <member name="E:C1.WPF.C1Window.IsActiveChanged">
      <summary> 
            Event raised when the <see cref="P:C1.WPF.C1Window.IsActive" /> property has changed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1Window.IsResizable">
      <summary>
            Gets or sets whether the window can be resized and maximized.
            </summary>
    </member>
    <member name="P:C1.WPF.C1Window.ModalBackground">
      <summary>
            Gets or sets the brushed used on the background when showing a modal window.
            </summary>
    </member>
    <member name="P:C1.WPF.C1Window.ShowMaximizeButton">
      <summary>
            Gets or sets whether the maximize button of this window is shown.
            </summary>
    </member>
    <member name="P:C1.WPF.C1Window.ShowCloseButton">
      <summary>
            Gets or sets whether the maximize button of this window is shown.
            </summary>
    </member>
    <member name="P:C1.WPF.C1Window.DialogResult">
      <summary>
            Gets or sets the dialog result for the window.
            </summary>
      <remarks>
            Setting this property to a value other than "None" automatically closes the window. Clicking the "Close" button on the window caption bar sets DialogResult to <see cref="F:System.Windows.MessageBoxResult.Cancel" /> and then closes the window.
            </remarks>
    </member>
    <member name="P:C1.WPF.C1Window.ShowMinimizeButton">
      <summary>
            Gets or sets whether the minimize button of this window is shown.
            </summary>
    </member>
    <member name="P:C1.WPF.C1Window.WindowState">
      <summary>
            Gets or sets a value that indicates whether a window is restored, minimized, or maximized.
            </summary>
    </member>
    <member name="E:C1.WPF.C1Window.WindowStateChanged">
      <summary> 
            Event raised when the <see cref="P:C1.WPF.C1Window.WindowState" /> property has changed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1Window.IsDraggable">
      <summary>
            Gets or set whether the window can be dragged.
            </summary>
    </member>
    <member name="P:C1.WPF.C1Window.MouseOverBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when it has the mouse over.
            </summary>
    </member>
    <member name="P:C1.WPF.C1Window.PressedBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to paint a button when it is pressed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1Window.ButtonBackground">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that will be assigned to the Background of the buttons inside the control.
            </summary>
    </member>
    <member name="P:C1.WPF.C1Window.ButtonForeground">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that will be assigned to the Foreground of the buttons inside the control.
            </summary>
    </member>
    <member name="T:C1.WPF.PositionChangedEventArgs">
      <summary>
            Provides data for the <see cref="E:C1.WPF.C1Window.PositionChanged" /> event.
            </summary>
    </member>
    <member name="M:C1.WPF.PositionChangedEventArgs.#ctor(System.Windows.Point)">
      <summary>
            Initializes a new <see cref="T:C1.WPF.PositionChangedEventArgs" />.
            </summary>
      <param name="previousPosition">Value for the <see cref="P:C1.WPF.PositionChangedEventArgs.PreviousPosition" /> property.</param>
    </member>
    <member name="P:C1.WPF.PositionChangedEventArgs.PreviousPosition">
      <summary>
            Gets the previous position of the window.
            </summary>
    </member>
    <member name="T:C1.WPF.C1WindowState">
      <summary>
            Specifies whether a window is minimized, maximized, or floating.
            </summary>
    </member>
    <member name="F:C1.WPF.C1WindowState.Floating">
      <summary>
            The window is floating (neither maximized nor minimized).
            </summary>
    </member>
    <member name="F:C1.WPF.C1WindowState.Maximized">
      <summary>
            The window is maximized.
            </summary>
    </member>
    <member name="F:C1.WPF.C1WindowState.Minimized">
      <summary>
            The window is minimized.
            </summary>
    </member>
    <member name="T:C1.WPF.DropDownDirection">
      <summary>
            Provides the supported expand directions for the <see cref="T:C1.Silverlight.C1ComboBox" />.
            </summary>
    </member>
    <member name="F:C1.WPF.DropDownDirection.BelowOrAbove">
      <summary>
            Tries to open the drop-down <see cref="T:C1.Silverlight.C1ComboBox" /> below the header.
            If it is not possible tries to open above it.
            </summary>
    </member>
    <member name="F:C1.WPF.DropDownDirection.AboveOrBelow">
      <summary>
            Tries to open the drop-down <see cref="T:C1.Silverlight.C1ComboBox" /> above the header.
            If it is not possible tries to open below it.
            </summary>
    </member>
    <member name="F:C1.WPF.DropDownDirection.ForceBelow">
      <summary>
            Forces the drop-down <see cref="T:C1.Silverlight.C1ComboBox" /> to open below the header.
            </summary>
    </member>
    <member name="F:C1.WPF.DropDownDirection.ForceAbove">
      <summary>
            Forces the <see cref="T:C1.WPF.C1ComboBox" /> content to open above the header.
            </summary>
    </member>
    <member name="T:C1.WPF.PopupUtil">
      <summary>
            Utility methods for popups.
            </summary>
    </member>
    <member name="M:C1.WPF.PopupUtil.Position(System.Windows.Controls.Primitives.Popup,C1.WPF.Anchor,System.Windows.FrameworkElement,C1.WPF.Anchor)">
      <summary>
            Positions a <see cref="T:System.Windows.Controls.Primitives.Popup" /> so that the specified point in the Popup matches the specified point of a FrameworkElement.
            </summary>
      <param name="popup">The popup to position.</param>
      <param name="popupAnchor">An <see cref="T:C1.WPF.Anchor" /> value specifying the point in the Popup.</param>
      <param name="element">The <see cref="T:System.Windows.FrameworkElement" /> to use as reference.</param>
      <param name="elementAnchor">An <see cref="T:C1.WPF.Anchor" /> value specifying the point in the FrameworkElement.</param>
    </member>
    <member name="M:C1.WPF.PopupUtil.Position(System.Windows.Controls.Primitives.Popup,System.Windows.Point)">
      <summary>
            Positions a <see cref="T:System.Windows.Controls.Primitives.Popup" /> in a specified absolute point.
            </summary>
      <param name="popup">The popup to position.</param>
      <param name="point">The popup position.</param>
    </member>
    <member name="M:C1.WPF.PopupUtil.TestPosition(System.Windows.FrameworkElement,C1.WPF.Anchor,System.Windows.FrameworkElement,C1.WPF.Anchor,System.Windows.Point,System.Double,System.Double,System.Windows.FlowDirection)">
      <summary>
            Calculates the position of a <see cref="T:System.Windows.FrameworkElement" /> so that the specified point in the FrameworkElement matches the specified point of another FrameworkElement.
            </summary>
      <param name="positionElement">The element to position.</param>
      <param name="positionAnchor">An <see cref="T:C1.WPF.Anchor" /> value specifying the point in the element to position.</param>
      <param name="element">The <see cref="T:System.Windows.FrameworkElement" /> to use as reference.</param>
      <param name="elementAnchor">An <see cref="T:C1.WPF.Anchor" /> value specifying the point in the FrameworkElement used as reference.</param>
      <param name="elementOffset">The offset (absolute position) of the reference element.</param>
      <param name="overlapHorizontal">The horizontal overlap between the elements (used for corner matching's).</param>
      <param name="overlapVertical">The vertical overlap between the elements (used for corner matching's).</param>
      <param name="flowDir">The FlowDirection used for the calculations.</param>
      <returns>The absolute point where the FrameworkElement would be located.</returns>
    </member>
    <member name="M:C1.WPF.PopupUtil.TestPosition(System.Windows.FrameworkElement,C1.WPF.Anchor,System.Windows.FrameworkElement,C1.WPF.Anchor,System.Windows.Point,System.Double,System.Double)">
      <summary>
            Calculates the position of a <see cref="T:System.Windows.FrameworkElement" /> so that the specified point in the FrameworkElement matches the specified point of another FrameworkElement.
            </summary>
      <param name="positionElement">The element to position.</param>
      <param name="positionAnchor">An <see cref="T:C1.WPF.Anchor" /> value specifying the point in the element to position.</param>
      <param name="element">The <see cref="T:System.Windows.FrameworkElement" /> to use as reference.</param>
      <param name="elementAnchor">An <see cref="T:C1.WPF.Anchor" /> value specifying the point in the FrameworkElement used as reference.</param>
      <param name="elementOffset">The offset (absolute position) of the reference element.</param>
      <param name="overlapHorizontal">The horizontal overlap between the elements (used for corner matching's).</param>
      <param name="overlapVertical">The vertical overlap between the elements (used for corner matching's).</param>
      <returns>The absolute point where the FrameworkElement would be located.</returns>
    </member>
    <member name="M:C1.WPF.PopupUtil.TestPosition(System.Windows.Controls.Primitives.Popup,C1.WPF.Anchor,System.Windows.FrameworkElement,C1.WPF.Anchor,System.Double,System.Double)">
      <summary>
            Calculates the position of a <see cref="T:System.Windows.Controls.Primitives.Popup" /> so that the specified point in the Popup matches the specified point of a FrameworkElement.
            </summary>
      <param name="popup">The popup to position.</param>
      <param name="popupAnchor">An <see cref="T:C1.WPF.Anchor" /> value specifying the point in the Popup.</param>
      <param name="element">The <see cref="T:System.Windows.FrameworkElement" /> to use as reference.</param>
      <param name="elementAnchor">An <see cref="T:C1.WPF.Anchor" /> value specifying the point in the FrameworkElement.</param>
      <param name="overlapHorizontal">The horizontal overlap between the elements (used for corner matching's).</param>
      <param name="overlapVertical">The vertical overlap between the elements (used for corner matching's).</param>
      <returns>The absolute point where the popup would be located</returns>
    </member>
    <member name="M:C1.WPF.PopupUtil.TestPosition(System.Windows.Controls.Primitives.Popup,C1.WPF.Anchor,System.Windows.FrameworkElement,C1.WPF.Anchor)">
      <summary>
            Calculates the position of a <see cref="T:System.Windows.Controls.Primitives.Popup" /> so that the specified point in the Popup matches the specified point of a FrameworkElement.
            </summary>
      <param name="popup">The popup to position.</param>
      <param name="popupAnchor">An <see cref="T:C1.WPF.Anchor" /> value specifying the point in the Popup.</param>
      <param name="element">The <see cref="T:System.Windows.FrameworkElement" /> to use as reference.</param>
      <param name="elementAnchor">An <see cref="T:C1.WPF.Anchor" /> value specifying the point in the FrameworkElement.</param>
      <returns>The absolute point where the popup would be located</returns>
    </member>
    <member name="M:C1.WPF.PopupUtil.TestPosition(System.Windows.FrameworkElement,C1.WPF.Anchor,System.Windows.FrameworkElement,C1.WPF.Anchor,System.Double,System.Double)">
      <summary>
            Calculates the position of a <see cref="T:System.Windows.FrameworkElement" /> so that the specified point in the FrameworkElement matches the specified point of another FrameworkElement.
            </summary>
      <param name="positionElement">The element to position.</param>
      <param name="positionAnchor">An <see cref="T:C1.WPF.Anchor" /> value specifying the point in the element to position.</param>
      <param name="element">The <see cref="T:System.Windows.FrameworkElement" /> to use as reference.</param>
      <param name="elementAnchor">An <see cref="T:C1.WPF.Anchor" /> value specifying the point in the FrameworkElement used as reference.</param>
      <param name="overlapHorizontal">The horizontal overlap between the elements (used for corner matching's).</param>
      <param name="overlapVertical">The vertical overlap between the elements (used for corner matching's).</param>
      <returns>The absolute point where the FrameworkElement would be located.</returns>
    </member>
    <member name="T:C1.WPF.MaskFormat">
      <summary>
            Defines how to format the value inside of a <see cref="T:C1.WPF.C1MaskedTextBox" />.
            </summary>
    </member>
    <member name="F:C1.WPF.MaskFormat.IncludePrompt">
      <summary>
            Return text input by the user as well as any instances of the prompt character.
            </summary>
    </member>
    <member name="F:C1.WPF.MaskFormat.IncludeLiterals">
      <summary>
            Return text input by the user as well as any literal characters defined in the mask.
            </summary>
    </member>
    <member name="F:C1.WPF.MaskFormat.IncludePromptAndLiterals">
      <summary>
            Return text input by the user as well as any literal characters defined in the mask and any instances of the prompt character.
            </summary>
    </member>
    <member name="F:C1.WPF.MaskFormat.ExcludePromptAndLiterals">
      <summary>
            Return only text input by the user.
            </summary>
    </member>
    <member name="T:C1.WPF.C1MaskedTextBox">
      <summary>
            Represents a control that uses a mask to prevent users from entering invalid data.
            </summary>
      <summary>
            The C1MaskedTextBox is an editor that uses a mask to prevent end-users from entering invalid data.
            </summary>
    </member>
    <member name="T:C1.WPF.C1TextBoxBase">
      <summary> 
            Base class for all ComponentOne text box controls.
            </summary>
      <remarks>
            Adds <see cref="P:C1.Silverlight.C1TextBoxBase.Watermark" /> and <see cref="P:C1.Silverlight.C1TextBoxBase.IsEnabled" /> properties, 
            as well as styles for mouse over and focus.
            </remarks>
    </member>
    <member name="F:C1.WPF.C1TextBoxBase.C1TextProperty">
      <summary>
            Identifies the C1Text dependency property.
            </summary>
      <remarks>
            This property is used as a workaround when a binding needs to be updated on each keystroke.
            </remarks>
    </member>
    <member name="M:C1.WPF.C1TextBoxBase.OnIsFocusedChanged(System.Boolean)">
      <summary>
            Callback called when the <see cref="!:IsFocused" /> property changes.
            </summary>
      <param name="oldValue">The previous value of IsFocused.</param>
    </member>
    <member name="M:C1.WPF.C1TextBoxBase.OnTextChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Called immediately after the Text property changes.
            </summary>
      <param name="e">Provides data about the change.</param>
    </member>
    <member name="M:C1.WPF.C1TextBoxBase.UpdateIsWatermarked">
      <summary>
            Derived classes can call this method when the <see cref="P:IsWatermarked" /> state is changed from their point of view.
            This method forces <see cref="M:C1.WPF.C1TextBoxBase.GetIsWatermarked" /> to be called, updating the IsWatermarked state without clearing the Text property.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TextBoxBase.GetIsWatermarked">
      <summary>
            Override this method to add custom logic for the <see cref="P:IsWatermarked" /> state.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TextBoxBase.OnKeyDown(System.Windows.Input.KeyEventArgs)">
      <summary>
            Called when <see cref="E:System.Windows.UIElement.KeyDown" /> event occurs.
            </summary>
      <param name="e">The data for the event.</param>
    </member>
    <member name="M:C1.WPF.C1TextBoxBase.ChangeVisualStateWatermark(System.Boolean)">
      <summary>
            Updates the current visual state of the Watermark visual state group to match the object's properties.
            </summary>
    </member>
    <member name="F:C1.WPF.C1TextBoxBase.WatermarkProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TextBoxBase.Watermark" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TextBoxBase.IsWatermarkedProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TextBoxBase.IsWatermarked" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TextBoxBase.FocusCuesVisibilityProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TextBoxBase.FocusCuesVisibility" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TextBoxBase.DisabledCuesVisibilityProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TextBoxBase.DisabledCuesVisibility" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TextBoxBase.ValidationDecoratorStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TextBoxBase.ValidationDecoratorStyle" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TextBoxBase.MouseOverBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TextBoxBase.MouseOverBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TextBoxBase.FocusBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TextBoxBase.FocusBrush" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1TextBoxBase.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1TextBoxBase" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TextBoxBase.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.C1TextBoxBase" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="M:C1.WPF.C1TextBoxBase.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Invoked whenever the effective value of any dependency property has been updated.
            </summary>
      <param name="e">
            The event data that describes the property that changed, as well as old and new values.
            </param>
    </member>
    <member name="E:C1.WPF.C1TextBoxBase.KeyDown">
      <summary>
            Occurs when a keyboard key is pressed while the <see cref="T:System.Windows.UIElement" /> has focus.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TextBoxBase.Watermark">
      <summary>
            Gets or sets the content of the watermark.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TextBoxBase.IsWatermarked">
      <summary>
            Get or sets if the watermark is shown.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TextBoxBase.FocusCuesVisibility">
      <summary>
            Gets or sets a value indicating whether the focus visuals of the control are visible.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TextBoxBase.DisabledCuesVisibility">
      <summary>
            Gets or sets a value indicating whether the disabled visuals of the control are visible.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TextBoxBase.ValidationDecoratorStyle">
      <summary>
            Gets or sets the style that is applied to the inner <see cref="T:C1.WPF.C1ValidationDecorator" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TextBoxBase.MouseOverBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when it has the mouse over.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TextBoxBase.FocusBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the focused control.
            </summary>
    </member>
    <member name="M:C1.WPF.C1MaskedTextBox.UpdateValue">
      <summary>
            For Silverlight version of the control, forces <see cref="T:C1.WPF.C1MaskedTextBox" /> to update its 
            <see cref="P:C1.WPF.C1MaskedTextBox.Value" /> and Text properties when the control is not loaded. 
            Does nothing in WPF.
            </summary>
      <remarks>
            In Silverlight, when <see cref="T:C1.WPF.C1MaskedTextBox" /> is not loaded yet or not included in a visual
            tree at all, it doesn't get notifications about the Text property changes and can't update its
            <see cref="P:C1.WPF.C1MaskedTextBox.Value" /> and Text properties at the proper time therefore, this behavior is inherited
            from the base TextBox control. If you need to get correct values of these properties while the control
            is not loaded, call the <see cref="M:C1.WPF.C1MaskedTextBox.UpdateValue" /> method after you changed the properties that affect
            a text formatting, such as <see cref="P:C1.WPF.C1MaskedTextBox.Mask" />, <see cref="P:C1.WPF.C1MaskedTextBox.TextMaskFormat" /> and so on.
            <para>
            This method does nothing when Silverlight version of the control is loaded, as well as in the WPF
            version of the control at any moment independently of its load state.
            </para></remarks>
    </member>
    <member name="M:C1.WPF.C1MaskedTextBox.OnMaskedTextChanged(C1.WPF.MaskedTextChangedEventArgs)">
      <summary>
            Occurs when consistent content that conforms to the <see cref="P:C1.WPF.C1MaskedTextBox.Mask" /> changes in the text box.
            </summary>
      <see cref="E:MaskedTextChanged" />
    </member>
    <member name="F:C1.WPF.C1MaskedTextBox.ValueProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1MaskedTextBox.Value" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1MaskedTextBox.MaskProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1MaskedTextBox.Mask" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1MaskedTextBox.PromptCharProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1MaskedTextBox.PromptChar" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1MaskedTextBox.TextMaskFormatProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1MaskedTextBox.TextMaskFormat" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1MaskedTextBox.ReplaceModeProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1MaskedTextBox.ReplaceMode" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1MaskedTextBox.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1MaskedTextBox" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MaskedTextBox.IsValid">
      <summary>
            Gets a value that determines whether the control contains a valid entry.
            </summary>
    </member>
    <member name="E:C1.WPF.C1MaskedTextBox.MaskedTextChanged">
      <summary>
            Occurs when consistent content that conforms to the <see cref="P:C1.WPF.C1MaskedTextBox.Mask" /> changes in the text box.
            </summary>
      <remarks>
            Just after the Text property has beed changed via user input or code, 
            the <see cref="T:C1.WPF.C1MaskedTextBox" /> updates the text again in order to make it consistent with
            the <see cref="P:C1.WPF.C1MaskedTextBox.Mask" />. As a result, the TextChanged event can be triggered twice on each user
            input. In contrast to this, the <see cref="E:C1.WPF.C1MaskedTextBox.MaskedTextChanged" /> is triggered only when Text is
            updated with a value that conforms to the <see cref="P:C1.WPF.C1MaskedTextBox.Mask" />.
            </remarks>
    </member>
    <member name="P:C1.WPF.C1MaskedTextBox.Value">
      <summary>
            Gets the formatted content of the control as specified by the <see cref="P:C1.WPF.C1MaskedTextBox.TextMaskFormat" /> property.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MaskedTextBox.Mask">
      <summary>
            Gets or sets the input mask.
            </summary>
      <remarks>
        <para>The mask consists of a string that determines what class of character is acceptable
            at each input position.</para>
        <para>Valid mask characters are:</para>
        <para>
          <b>0</b>    Digit (0-9)</para>
        <para>
          <b>9</b>    Digit or space</para>
        <para>
          <b>#</b>    Digit, space, or sign (+/-)</para>
        <para>
          <b>L</b>    Letter</para>
        <para>
          <b>?</b>    Letter or space</para>
        <para>
          <b>A</b>    Letter or digit</para>
        <para>
          <b>a</b>    Letter, digit, or space</para>
        <para>
          <b>&amp;</b>    Any character</para>
        <para>
          <b>.</b>    Localized decimal symbol</para>
        <para>
          <b>,</b>    Localized thousand separator</para>
        <para>
          <b>:</b>    Localized time separator</para>
        <para>
          <b>/</b>    Localized date separator</para>
        <para>Other characters are treated as literals. They are displayed in the control but cannot
            be edited.</para>
        <para>For example, the mask "000-0000" causes the control to accept only digits at every
            position except the third, which always contains a dash.</para>
      </remarks>
    </member>
    <member name="P:C1.WPF.C1MaskedTextBox.PromptChar">
      <summary>
            Gets or sets the character used to show spaces where user is supposed to type.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MaskedTextBox.TextMaskFormat">
      <summary>
            Gets or sets a value that determines whether literals and prompt characters are included in the <see cref="P:C1.WPF.C1MaskedTextBox.Value" /> property.
            </summary>
    </member>
    <member name="P:C1.WPF.C1MaskedTextBox.ReplaceMode">
      <summary>
            Gets or sets a value indicating whether new characters will be inserted or replace existing ones while you are typing.
            </summary>
      <remarks>
            Set this property value to true if typing characters should be inserted at an insertion point position; otherwise, set it to false if typing characters should overwrite existing characters at an insertion point position.
            </remarks>
    </member>
    <member name="T:C1.WPF.MaskedTextChangedEventArgs">
      <summary>
            Provides data for the <see cref="E:C1.WPF.C1MaskedTextBox.MaskedTextChanged" /> event.
            </summary>
    </member>
    <member name="M:C1.WPF.MaskedTextChangedEventArgs.#ctor(System.String,System.String)">
      <summary>
            Creates an instance of the <see cref="T:C1.WPF.MaskedTextChangedEventArgs" /> class.
            </summary>
      <param name="newText">
            The new text.
            </param>
      <param name="oldText">
            The old text.
            </param>
    </member>
    <member name="P:C1.WPF.MaskedTextChangedEventArgs.OldText">
      <summary>
            Gets an old text.
            </summary>
    </member>
    <member name="P:C1.WPF.MaskedTextChangedEventArgs.NewText">
      <summary>
            Gets a new text.
            </summary>
    </member>
    <member name="T:C1.WPF.MaskedTextChangedEventHandler">
      <summary>
            Represents the method that handles the <see cref="E:C1.WPF.C1MaskedTextBox.MaskedTextChanged" /> event.
            </summary>
      <param name="sender">
            The event sender.
            </param>
      <param name="e">
            The event data.
            </param>
    </member>
    <member name="T:C1.WPF.C1NumericBox">
      <remarks>
        <list>
          <item>
            <see cref="P:C1.Silverlight.C1NumericBox.Format" /> property supports standard and custom formats.</item>
          <item>
            <see cref="P:C1.Silverlight.C1NumericBox.Watermark" /> property shows help text when the control is empty.</item>
          <item>
            <see cref="P:C1.Silverlight.C1NumericBox.AllowNull" /> property allows binding to and displaying null values.</item>
        </list>
            When the control is empty, or bound to a null value, the <see cref="P:C1.Silverlight.C1NumericBox.Value" /> property returns <b>double.NaN</b>.
            </remarks>
      <summary>
            The C1NumericBox control is a numeric editor that allows you to display and edit numeric values in many formats.
            </summary>
    </member>
    <member name="M:C1.WPF.C1NumericBox.OnValueChanged(C1.WPF.PropertyChangedEventArgs{System.Double})">
      <summary>
            Raises the <see cref="E:C1.WPF.C1NumericBox.ValueChanged" /> event.
            </summary>
      <param name="e">
      </param>
    </member>
    <member name="M:C1.WPF.C1NumericBox.Select(System.Int32,System.Int32)">
      <summary>
            Selects the text specified by start and length.
            </summary>
      <param name="start">Start of the selection.</param>
      <param name="length">Length of the selection.</param>
    </member>
    <member name="M:C1.WPF.C1NumericBox.ChangeVisualStateButtonsVisibility(System.Boolean)">
      <summary>
            Updates the current visual state of the ButtonsVisibility visual state group to match the object's properties.
            </summary>
    </member>
    <member name="M:C1.WPF.C1NumericBox.ChangeVisualStateCommon(System.Boolean)">
      <summary>
            Updates the current visual state of the Common visual state group to match the object's properties.
            </summary>
    </member>
    <member name="M:C1.WPF.C1NumericBox.ChangeVisualStateFocus(System.Boolean)">
      <summary>
            Updates the current visual state of the Focus visual state group to match the object's properties.
            </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.CultureProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1NumericBox.Culture" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.FormatProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1NumericBox.Format" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.MaximumProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1NumericBox.Maximum" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.MinimumProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1NumericBox.Minimum" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.IncrementProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1NumericBox.Increment" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.ValueProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1NumericBox.Value" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.ShowButtonsProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1NumericBox.ShowButtons" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.IsReadOnlyProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1NumericBox.IsReadOnly" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.TextAlignmentProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1NumericBox.TextAlignment" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.SelectionStartProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1NumericBox.SelectionStart" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.SelectionLengthProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1NumericBox.SelectionLength" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.AllowNullProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1NumericBox.AllowNull" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.DelayProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1NumericBox.Delay" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.IntervalProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1NumericBox.Interval" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.WatermarkProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1NumericBox.Watermark" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.HandleUpDownKeysProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1NumericBox.HandleUpDownKeys" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.RangeValidationModeProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1NumericBox.RangeValidationMode" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.FocusCuesVisibilityProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1NumericBox.FocusCuesVisibility" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.DisabledCuesVisibilityProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1NumericBox.DisabledCuesVisibility" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.ValidationDecoratorStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1NumericBox.ValidationDecoratorStyle" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.MouseOverBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1NumericBox.MouseOverBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.SelectionBackgroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1NumericBox.SelectionBackground" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.SelectionForegroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1NumericBox.SelectionForeground" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.CaretBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1NumericBox.CaretBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.PressedBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1NumericBox.PressedBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.FocusBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1NumericBox.FocusBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.ButtonBackgroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1NumericBox.ButtonBackground" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1NumericBox.ButtonForegroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1NumericBox.ButtonForeground" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1NumericBox.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1NumericBox" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1NumericBox.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.C1NumericBox" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="M:C1.WPF.C1NumericBox.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Invoked whenever the effective value of any dependency property has been updated.
            </summary>
      <param name="e">
            The event data that describes the property that changed, as well as old and new values.
            </param>
    </member>
    <member name="E:C1.WPF.C1NumericBox.ValueChanged">
      <summary>
            Fires when the <see cref="P:C1.WPF.C1NumericBox.Value" /> property changes.
            </summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.Culture">
      <summary>
            Sets the culture used to display the value in the <see cref="T:C1.WPF.C1NumericBox" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.Format">
      <summary>
            Gets or sets the value for the Format of the <see cref="T:C1.WPF.C1NumericBox" />.
            </summary>
      <remarks>
            The possible values are: N, C, F, N0, C0, F0, N1, C1, etc. Default Value is : F0
            </remarks>
    </member>
    <member name="P:C1.WPF.C1NumericBox.Maximum">
      <summary>
            Gets or sets the maximum value allowed for the <see cref="T:C1.WPF.C1NumericBox" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.Minimum">
      <summary>
            Gets or sets the minimum value allowed for the <see cref="T:C1.WPF.C1NumericBox" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.Increment">
      <summary>
            Gets or sets the increment applied when the user pressed the up/down arrow keys.
            </summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.Value">
      <summary>
            Gets or sets the numeric value in the <see cref="T:C1.WPF.C1NumericBox" />.
            </summary>
      <remarks>
            Null values are represented by the <b>Value</b> property as <b>double.NaN</b>. See also the <see cref="P:C1.WPF.C1NumericBox.AllowNull" /> property.
            </remarks>
    </member>
    <member name="P:C1.WPF.C1NumericBox.ShowButtons">
      <summary>
            Shows or hides the buttons for Increment or Decrement.
            </summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.IsReadOnly">
      <summary>
            Gets or sets the value that determines if the <see cref="T:C1.WPF.C1NumericBox" /> is read-only.
            </summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.TextAlignment">
      <summary>
            Gets or sets how the text should be aligned in the <see cref="T:C1.WPF.C1NumericBox" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.SelectionStart">
      <summary>
            Gets or sets the starting position of the text selected in the <see cref="T:C1.WPF.C1NumericBox" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.SelectionLength">
      <summary>
            Gets or sets the number of characters in the current selection in the <see cref="T:C1.WPF.C1NumericBox" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.AllowNull">
      <summary>
            Gets or sets whether the user can enter nulls values.
            </summary>
      <remarks>
            Null values are encoded in the <b>Value</b> property as <b>double.NaN</b>.
            </remarks>
    </member>
    <member name="P:C1.WPF.C1NumericBox.Delay">
      <summary>
            Gets or sets the delay for the Increase and Decrease buttons.
            </summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.Interval">
      <summary>
            Gets or sets the interval for the Increase and Decrease buttons.
            </summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.Watermark">
      <summary>
            Gets or sets the watermark content displayed when the control is empty.
            </summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.HandleUpDownKeys">
      <summary>
            Gets or sets If the control handles the Up / Down / PageUp / PageDown keys.
            </summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.RangeValidationMode">
      <summary>
            Gets or sets the mode used to validate the range between Minimum and Maximum.
            </summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.FocusCuesVisibility">
      <summary>
            Gets or sets a value indicating whether the focus visuals of the control are visible.
            </summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.DisabledCuesVisibility">
      <summary>
            Gets or sets a value indicating whether the disabled visuals of the control are visible.
            </summary>
    </member>
    <member name="E:C1.WPF.C1NumericBox.IsMouseOverChanged">
      <summary> 
            Event raised when the <see cref="!:IsMouseOver" /> property has changed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.ValidationDecoratorStyle">
      <summary>
            Gets or sets the style that is applied to the inner <see cref="T:C1.WPF.C1ValidationDecorator" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.MouseOverBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when it has the mouse over.
            </summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.SelectionBackground">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that fills the background of the selected text.
            </summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.SelectionForeground">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used as foreground of the selected text.
            </summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.CaretBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> of the blinking cursor of an input control.
            </summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.PressedBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to paint a button when it is pressed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.FocusBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the focused control.
            </summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.ButtonBackground">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that will be assigned to the Background of the buttons inside the control.
            </summary>
    </member>
    <member name="P:C1.WPF.C1NumericBox.ButtonForeground">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that will be assigned to the Foreground of the buttons inside the control.
            </summary>
    </member>
    <member name="T:C1.WPF.RangeValidationMode">
      <summary>
            Mode of validation of the range between Maximum and Minimum of <see cref="T:C1.WPF.C1NumericBox" />.
            </summary>
    </member>
    <member name="F:C1.WPF.RangeValidationMode.Always">
      <summary>
            This mode doesn't allow entering out of range values.
            </summary>
    </member>
    <member name="F:C1.WPF.RangeValidationMode.AlwaysTruncate">
      <summary>
            This mode doesn't allow entering out of range values.
            The value will be truncated if the limits are exceeded.
            </summary>
    </member>
    <member name="F:C1.WPF.RangeValidationMode.OnLostFocus">
      <summary>
            The value will be truncated on lost focus.
            </summary>
    </member>
    <member name="T:C1.WPF.C1RangeSlider">
      <summary>
            The C1RangeSlider control enables the end-user to select two values from a range by moving two Thumb controls along a track.
            </summary>
    </member>
    <member name="M:C1.WPF.C1RangeSlider.OnUpperValueChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:C1.Silverlight.C1RangeSlider.UpperValueChanged" /> event.
            </summary>
      <param name="e">
        <see cref="T:System.EventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:C1.WPF.C1RangeSlider.OnLowerValueChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:C1.Silverlight.C1RangeSlider.LowerValueChanged" /> event.
            </summary>
      <param name="e">
        <see cref="T:System.EventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:C1.WPF.C1RangeSlider.OnValueChanged(System.EventArgs)">
      <summary>
            Raises the <see cref="E:C1.Silverlight.C1RangeSlider.ValueChanged" /> event.
            </summary>
      <param name="e">
        <see cref="T:System.EventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:C1.WPF.C1RangeSlider.UpdateTrackLayout">
      <summary> 
            This method will take the current min, max, and value to 
            calculate and layout the current control measurements.
            </summary>
    </member>
    <member name="M:C1.WPF.C1RangeSlider.ChangeVisualStateCommon(System.Boolean)">
      <summary>
            Updates the current visual state of the Common visual state group to match the object's properties.
            </summary>
    </member>
    <member name="M:C1.WPF.C1RangeSlider.ChangeVisualStateFocus(System.Boolean)">
      <summary>
            Updates the current visual state of the Focus visual state group to match the object's properties.
            </summary>
    </member>
    <member name="F:C1.WPF.C1RangeSlider.MaximumProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RangeSlider.Maximum" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RangeSlider.MinimumProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RangeSlider.Minimum" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RangeSlider.LowerValueProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RangeSlider.LowerValue" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RangeSlider.UpperValueProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RangeSlider.UpperValue" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RangeSlider.ValueChangeProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RangeSlider.ValueChange" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RangeSlider.DelayProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RangeSlider.Delay" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RangeSlider.IntervalProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RangeSlider.Interval" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RangeSlider.OrientationProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RangeSlider.Orientation" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RangeSlider.SmallValueChangeProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RangeSlider.SmallValueChange" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RangeSlider.ValidationDecoratorStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RangeSlider.ValidationDecoratorStyle" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RangeSlider.MouseOverBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RangeSlider.MouseOverBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RangeSlider.PressedBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RangeSlider.PressedBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1RangeSlider.FocusBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1RangeSlider.FocusBrush" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1RangeSlider.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1RangeSlider" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1RangeSlider.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.C1RangeSlider" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="M:C1.WPF.C1RangeSlider.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Invoked whenever the effective value of any dependency property has been updated.
            </summary>
      <param name="e">
            The event data that describes the property that changed, as well as old and new values.
            </param>
    </member>
    <member name="E:C1.WPF.C1RangeSlider.UpperValueChanged">
      <summary>
            Fires when the <see cref="P:C1.WPF.C1RangeSlider.UpperValue" /> property changes.
            </summary>
    </member>
    <member name="E:C1.WPF.C1RangeSlider.LowerValueChanged">
      <summary>
            Fires when the <see cref="P:C1.WPF.C1RangeSlider.LowerValue" /> property changes.
            </summary>
    </member>
    <member name="E:C1.WPF.C1RangeSlider.ValueChanged">
      <summary>
            Fires when any of the properties: LowerValue or UpperValue changes.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RangeSlider.Maximum">
      <summary>
            Gets or sets the maximum possible value of the range element.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RangeSlider.Minimum">
      <summary>
            Gets or sets the minimum possible value of the range element.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RangeSlider.LowerValue">
      <summary>
            Gets or sets the current lower magnitude of the range control. 
            </summary>
    </member>
    <member name="P:C1.WPF.C1RangeSlider.UpperValue">
      <summary>
            Gets or sets the current upper magnitude of the range control. 
            </summary>
    </member>
    <member name="P:C1.WPF.C1RangeSlider.ValueChange">
      <summary>
            Gets or sets a value to be added to or subtracted from the Upper/LowerValue of a RangeBase control.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RangeSlider.Delay">
      <summary>
            Gets or sets the time, in milliseconds, the RepeatButtons (at the left of the LowerThumb and at the right of the UpperThumb) wait when they are pressed before they start repeating the click action.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RangeSlider.Interval">
      <summary>
            Gets or sets the time, in milliseconds, between repetitions of the click action, as soon as repeating starts (for the RepeatButtons at the left of the LowerThumb and at the right of the UpperThumb).
            </summary>
    </member>
    <member name="P:C1.WPF.C1RangeSlider.Orientation">
      <summary>
            The Orientation of the C1RangeSlider.
            </summary>
    </member>
    <member name="E:C1.WPF.C1RangeSlider.OrientationChanged">
      <summary> 
            Event raised when the <see cref="P:C1.WPF.C1RangeSlider.Orientation" /> property has changed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RangeSlider.SmallValueChange">
      <summary>
            Gets or sets a value to be added to or subtracted from the Upper/LowerValue of a RangeBase control.
            </summary>
    </member>
    <member name="E:C1.WPF.C1RangeSlider.IsMouseOverChanged">
      <summary> 
            Event raised when the <see cref="!:IsMouseOver" /> property has changed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RangeSlider.ValidationDecoratorStyle">
      <summary>
            Gets or sets the style that is applied to the inner <see cref="T:C1.WPF.C1ValidationDecorator" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RangeSlider.MouseOverBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when it has the mouse over.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RangeSlider.PressedBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to paint a button when it is pressed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1RangeSlider.FocusBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the focused control.
            </summary>
    </member>
    <member name="T:C1.WPF.C1HyperPanel">
      <summary>
            Arranges child elements in a stack and applies a dynamic zoom effect to the elements near the mouse.
            </summary>
      <remarks>
        <para>The <see cref="T:C1.Silverlight.C1HyperPanel" /> is similar to a <see cref="T:System.Windows.Controls.StackPanel" />, except is applies
            a dynamic zoom effect as the user moves the mouse over the panel. Child elements near the mouse appear
            in their normal size, and elements away from the mouse are scaled down and appear smaller.</para>
        <para>Use the <see cref="P:C1.Silverlight.C1HyperPanel.Distribution" /> and <see cref="P:C1.Silverlight.C1HyperPanel.MinElementScale" /> properties to control the 
            intensity of the zoom effect.</para>
        <para>Use the <see cref="P:C1.Silverlight.C1HyperPanel.ApplyOpacity" /> property to make elements far from the mouse appear faded.</para>
        <para>Use <see cref="P:System.Windows.FrameworkElement.VerticalAlignment" /> and <see cref="P:System.Windows.FrameworkElement.HorizontalAlignment" />
            properties on the child elements to determine how they should be aligned within the <see cref="T:C1.Silverlight.C1HyperPanel" />.</para>
        <para>In order to apply the zooming effect efficiently, the <see cref="T:C1.Silverlight.C1HyperPanel" /> takes over the
            <see cref="P:System.Windows.UIElement.RenderTransform" /> property of its child elements. If you want to apply your own
            transforms to the child elements, place them in another panel before adding them to the 
            <see cref="T:C1.Silverlight.C1HyperPanel" />.</para>
        <para>Note that some native Silverlight elements (such as the <see cref="T:System.Windows.Controls.Button" /> control) do not
            always auto-size correctly. You should set the width and height of these elements explicitly before
            adding them to the <see cref="T:C1.Silverlight.C1HyperPanel" />.</para>
      </remarks>
    </member>
    <member name="M:C1.WPF.C1HyperPanel.MeasureOverride(System.Windows.Size)">
      <summary>
            Measures the size in layout required for child elements and determines a size for the element. 
            </summary>
      <param name="availableSize">The available size that this element can give to child elements. Infinity can be specified as a value to indicate that the element will size to whatever content is available.</param>
      <returns>The size that this element determines it needs during layout, based on its calculations of child element sizes.</returns>
    </member>
    <member name="M:C1.WPF.C1HyperPanel.ArrangeOverride(System.Windows.Size)">
      <summary>
            Positions child elements and determines a size for the element. 
            </summary>
      <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
      <returns>The actual size used.</returns>
    </member>
    <member name="F:C1.WPF.C1HyperPanel.OrientationProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1HyperPanel.Orientation" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1HyperPanel.DistributionProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1HyperPanel.Distribution" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1HyperPanel.ApplyOpacityProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1HyperPanel.ApplyOpacity" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1HyperPanel.CenterProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1HyperPanel.Center" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1HyperPanel.MinElementScaleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1HyperPanel.MinElementScale" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1HyperPanel.HorizontalContentAlignmentProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1HyperPanel.HorizontalContentAlignment" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1HyperPanel.VerticalContentAlignmentProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1HyperPanel.VerticalContentAlignment" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1HyperPanel.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1HyperPanel" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1HyperPanel.Orientation">
      <summary>
            Gets or sets a value that indicates the dimension by which child elements are stacked.
            </summary>
    </member>
    <member name="P:C1.WPF.C1HyperPanel.Distribution">
      <summary>
            Gets or sets a value between 0.1 and 1.0 that controls how much zooming should be applied to elements near the center.
            </summary>
      <remarks>
        <para>Small values increase the zoom effect. Elements far from the mouse appear much smaller than elements near the mouse.</para>
        <para>Large values decrease the zoom effect. Elements far from the mouse appear only slightly smaller than elements near the mouse.</para>
        <para>You can limit the amount by which elements far from the mouse are zoomed out by setting the <see cref="P:C1.WPF.C1HyperPanel.MinElementScale" />.For example, setting <see cref="P:C1.WPF.C1HyperPanel.MinElementScale" /> to 0.5 prevents any child elements from being reduced to less than half their original size.</para>
      </remarks>
    </member>
    <member name="P:C1.WPF.C1HyperPanel.ApplyOpacity">
      <summary>
            Gets or sets a value between zero and one that determines the minimum scale to be applied to elements when they are away from the center.
            </summary>
    </member>
    <member name="P:C1.WPF.C1HyperPanel.Center">
      <summary>
            Gets or sets the center of the <see cref="T:C1.WPF.C1HyperPanel" /> as a percentage of the control size.
            </summary>
      <remarks>
        <para>Elements near the center appear larger than the others.</para>
        <para>This value is updated automatically as the mouse moves.</para>
      </remarks>
    </member>
    <member name="P:C1.WPF.C1HyperPanel.MinElementScale">
      <summary>
            Gets or sets a value between zero and one that determines the minimum scale to be applied to elements when they are away from the center.
            </summary>
      <remarks>
        <para>This property is useful when the <see cref="P:C1.WPF.C1HyperPanel.Distribution" /> property is set to small values, and you want to prevent child elements from becoming too small when they are away from the mouse.</para>
        <para>For example, setting this property to 0.5 prevents any child elements from being reduced to less than half their original size.</para>
      </remarks>
    </member>
    <member name="P:C1.WPF.C1HyperPanel.HorizontalContentAlignment">
      <summary>
            Gets or sets the horizontal alignment of the panel's content.
            </summary>
    </member>
    <member name="P:C1.WPF.C1HyperPanel.VerticalContentAlignment">
      <summary>
            Gets or sets the vertical alignment of the panel's content.
            </summary>
    </member>
    <member name="T:C1.Silverlight.Resources.C1_Silverlight">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="M:C1.Silverlight.Resources.C1_Silverlight.#ctor">
      <summary>
            Public constructor needed to create an object of the class as a Xaml resource.
            </summary>
    </member>
    <member name="P:C1.Silverlight.Resources.C1_Silverlight.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:C1.Silverlight.Resources.C1_Silverlight.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:C1.Silverlight.Resources.C1_Silverlight.Cancel">
      <summary>
              Looks up a localized string similar to Cancel.
            </summary>
    </member>
    <member name="P:C1.Silverlight.Resources.C1_Silverlight.Close">
      <summary>
              Looks up a localized string similar to Close.
            </summary>
    </member>
    <member name="P:C1.Silverlight.Resources.C1_Silverlight.CloseGlobal">
      <summary>
              Looks up a localized string similar to Close Selected Item.
            </summary>
    </member>
    <member name="P:C1.Silverlight.Resources.C1_Silverlight.Menu">
      <summary>
              Looks up a localized string similar to Menu.
            </summary>
    </member>
    <member name="P:C1.Silverlight.Resources.C1_Silverlight.Next">
      <summary>
              Looks up a localized string similar to Next.
            </summary>
    </member>
    <member name="P:C1.Silverlight.Resources.C1_Silverlight.No">
      <summary>
              Looks up a localized string similar to No.
            </summary>
    </member>
    <member name="P:C1.Silverlight.Resources.C1_Silverlight.OK">
      <summary>
              Looks up a localized string similar to OK.
            </summary>
    </member>
    <member name="P:C1.Silverlight.Resources.C1_Silverlight.Previous">
      <summary>
              Looks up a localized string similar to Previous.
            </summary>
    </member>
    <member name="P:C1.Silverlight.Resources.C1_Silverlight.Yes">
      <summary>
              Looks up a localized string similar to Yes.
            </summary>
    </member>
    <member name="T:C1.WPF.C1DataTemplateSelector">
      <summary>
            Provides a way to apply data templates based on custom logic.
            </summary>
    </member>
    <member name="P:C1.WPF.C1DataTemplateSelector.Resources">
      <summary>
            Gets the locally defined resource dictionary. 
            </summary>
    </member>
    <member name="T:C1.WPF.C1HierarchicalDataTemplate">
      <summary>
            Represents a DataTemplate that supports C1HierarchicalPresenter, such as TreeViewItem.
            </summary>
    </member>
    <member name="P:C1.WPF.C1HierarchicalDataTemplate.ItemsSource">
      <summary>
            Gets or sets the binding for this data template, which indicates where to find the collection
            that represents the next level in the data hierarchy.
            </summary>
    </member>
    <member name="P:C1.WPF.C1HierarchicalDataTemplate.ItemTemplate">
      <summary>
            Gets or sets the DataTemplate to apply to the ItemTemplate property on a generated
            C1HierarchicalPresenter (such as a TreeViewItem), to indicate how to display
            items from the next level in the data hierarchy.
            </summary>
    </member>
    <member name="T:C1.WPF.C1StyleSelector">
      <summary>
            Provides a way to apply styles based on custom logic.
            </summary>
    </member>
    <member name="P:C1.WPF.C1StyleSelector.Resources">
      <summary>
            Gets the locally defined resource dictionary. 
            </summary>
    </member>
    <member name="T:C1.WPF.C1LinePanel">
      <summary>
            C1LinePanel arranges a list of items in a single row or column.
            </summary>
    </member>
    <member name="F:C1.WPF.C1LinePanel.OrientationProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1LinePanel.Orientation" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1LinePanel.ReverseProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1LinePanel.Reverse" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1LinePanel.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1LinePanel" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1LinePanel.Orientation">
      <summary>
            Gets or sets a value that indicates the dimension by which child elements are stacked.
            </summary>
    </member>
    <member name="P:C1.WPF.C1LinePanel.Reverse">
      <summary>
            Gets or sets whether the items are arranged top-down/left-right or bottom-up/right-left.
            </summary>
    </member>
    <member name="P:C1.WPF.C1LinePanel.LineDefinitions">
      <summary>
            Gets the collection of specifications of how much space to give to each item.
            </summary>
    </member>
    <member name="T:C1.WPF.LineDefinition">
      <summary>
            Defines row or column specific properties that apply to <see cref="T:C1.WPF.C1LinePanel" /> elements.
            </summary>
    </member>
    <member name="P:C1.WPF.LineDefinition.Length">
      <summary>
            Gets or sets a value that represents the height or width of the <see cref="T:C1.WPF.LineDefinition" />.
            </summary>
    </member>
    <member name="T:C1.WPF.C1TabItem">
      <summary>
            Represents a selectable item in a <see cref="T:C1.WPF.C1TabControl" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TabItem.OnContentChanged(System.Object,System.Object)">
      <summary>
            Called when the value of the <see cref="P:Content" /> property changes.
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabItem.HeaderProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabItem.Header" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabItem.HeaderTemplateProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabItem.HeaderTemplate" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabItem.IsSelectedProperty">
      <summary>
            Identifies the
            <see cref="P:System.Windows.Controls.TabItem.IsSelected" />
            dependency property.
            </summary>
      <value>
            The identifier for the
            <see cref="P:System.Windows.Controls.TabItem.IsSelected" />
            dependency property.
            </value>
    </member>
    <member name="M:C1.WPF.C1TabItem.OnSelected(System.Windows.RoutedEventArgs)">
      <summary>
            Called to indicate that the
            <see cref="P:System.Windows.Controls.TabItem.IsSelected" /> property
            has changed to true.
            </summary>
      <param name="e">
            A <see cref="T:System.Windows.RoutedEventArgs" /> that contains the
            event data.
            </param>
    </member>
    <member name="M:C1.WPF.C1TabItem.OnUnselected(System.Windows.RoutedEventArgs)">
      <summary>
            Called to indicate that the
            <see cref="P:System.Windows.Controls.TabItem.IsSelected" /> property
            has changed to false.
            </summary>
      <param name="e">
            A <see cref="T:System.Windows.RoutedEventArgs" /> that contains the
            event data.
            </param>
    </member>
    <member name="M:C1.WPF.C1TabItem.OnKeyDown(System.Windows.Input.KeyEventArgs)">
      <summary>
            Provides class handling for the <see cref="E:KeyDown" /> event that occurs when the user presses a key while this control has focus.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TabItem.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
      <summary>
            Called before the <see cref="E:MouseLeftButtonDown" /> event occurs.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TabItem.ChangeVisualStateCommon(System.Boolean)">
      <summary>
            Updates the current visual state of the Common visual state group to match the object's properties.
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabItem.TabShapeProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabItem.TabShape" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabItem.CanUserCloseProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabItem.CanUserClose" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabItem.IsSelectableProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabItem.IsSelectable" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabItem.MouseOverBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabItem.MouseOverBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabItem.PressedBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabItem.PressedBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabItem.SelectedBackgroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabItem.SelectedBackground" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1TabItem.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1TabItem" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TabItem.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.C1TabItem" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="M:C1.WPF.C1TabItem.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Invoked whenever the effective value of any dependency property has been updated.
            </summary>
      <param name="e">
            The event data that describes the property that changed, as well as old and new values.
            </param>
    </member>
    <member name="P:C1.WPF.C1TabItem.Header">
      <summary>
            Gets or sets the item that labels the control.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabItem.HeaderTemplate">
      <summary>
            Gets or sets a data template that is used to display the contents of the control's <see cref="P:C1.WPF.C1TabItem.Header" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabItem.IsSelected">
      <summary>
            Gets or sets a value indicating whether the
            <see cref="T:System.Windows.Controls.TabItem" /> is currently
            selected.
            </summary>
      <value>
            True if the <see cref="T:System.Windows.Controls.TabItem" /> is
            selected; otherwise, false.
            </value>
    </member>
    <member name="P:C1.WPF.C1TabItem.TabShape">
      <summary>
            Gets or sets the visual form of the control.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabItem.CanUserClose">
      <summary>
            Gets or sets a value indicating whether the user is allowed to dismiss this <see cref="T:C1.WPF.C1TabItem" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabItem.IsSelectable">
      <summary>
            Gets or sets a value indicating whether the user is allowed to select this <see cref="T:C1.WPF.C1TabItem" />.
            </summary>
    </member>
    <member name="E:C1.WPF.C1TabItem.IsMouseOverChanged">
      <summary> 
            Event raised when the <see cref="!:IsMouseOver" /> property has changed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabItem.MouseOverBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when it has the mouse over.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabItem.PressedBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to paint a button when it is pressed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabItem.SelectedBackground">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when it is selected.
            </summary>
    </member>
    <member name="M:C1.WPF.C1NewTabItem.OnNewTabItem">
      <summary>
            Raises the <see cref="E:NewTabItem" /> event when this item is pressed.
            </summary>
    </member>
    <member name="M:C1.WPF.C1NewTabItem.OnSelected(System.Windows.RoutedEventArgs)">
      <summary>
            Raises the <see cref="E:Selected" /> event.
            </summary>
      <param name="e">The <see cref="T:System.Windows.RoutedEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="E:C1.WPF.C1NewTabItem.NewTabItem">
      <summary>
            Occurs when a new <see cref="T:C1.WPF.C1TabItem" /> is being to be created.
            Source contains the instance of the new <see cref="T:C1.WPF.C1TabItem" /> that
            is going to be added to the <see cref="T:C1.WPF.C1TabControl" />.
            </summary>
    </member>
    <member name="T:C1.WPF.C1TabControl">
      <summary>
            Represents a control that contains multiple items that share the same space on the screen.
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabControl.SelectedItemProperty">
      <summary>
            Identifies the
            <see cref="P:System.Windows.Controls.TabControl.SelectedItem" />
            dependency property.
            </summary>
      <value>
            The identifier for the
            <see cref="P:System.Windows.Controls.TabControl.SelectedItem" />
            dependency property.
            </value>
    </member>
    <member name="F:C1.WPF.C1TabControl.SelectedIndexProperty">
      <summary>
            Identifies the
            <see cref="P:System.Windows.Controls.TabControl.SelectedIndex" />
            dependency property.
            </summary>
      <value>
            The identifier for the
            <see cref="P:System.Windows.Controls.TabControl.SelectedIndex" />
            dependency property.
            </value>
    </member>
    <member name="M:C1.WPF.C1TabControl.ScrollIntoView(C1.WPF.C1TabItem)">
      <summary>
            Causes the object to scroll into view. 
            </summary>
      <param name="item">Object to scroll.</param>
    </member>
    <member name="F:C1.WPF.C1TabControl.SelectedContentProperty">
      <summary>
            Identifies the
            <see cref="P:System.Windows.Controls.TabControl.SelectedContent" />
            dependency property.
            </summary>
      <value>
            The identifier for the
            <see cref="P:System.Windows.Controls.TabControl.SelectedContent" />
            dependency property.
            </value>
    </member>
    <member name="M:C1.WPF.C1TabControl.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>
            Called when the value of the <see cref="P:Items" /> property changes.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TabControl.OnKeyDown(System.Windows.Input.KeyEventArgs)">
      <summary>
            Provides class handling for the <see cref="E:KeyDown" /> event that occurs when the user presses a key while this control has focus.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TabControl.ChangeVisualStateShape(System.Boolean)">
      <summary>
            Updates the current visual state of the Shape visual state group to match the object's properties.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TabControl.ChangeVisualStateCommon(System.Boolean)">
      <summary>
            Updates the current visual state of the Common visual state group to match the object's properties.
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabControl.ShowSingleTabProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabControl.ShowSingleTab" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabControl.TabStripPlacementProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabControl.TabStripPlacement" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabControl.TabStripOverlapProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabControl.TabStripOverlap" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabControl.TabStripOverlapDirectionProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabControl.TabStripOverlapDirection" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabControl.TabItemShapeProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabControl.TabItemShape" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabControl.TabItemCloseProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabControl.TabItemClose" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabControl.ItemContainerStyleProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabControl.ItemContainerStyle" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabControl.TabStripMenuVisibilityProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabControl.TabStripMenuVisibility" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabControl.CanUserReorderProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabControl.CanUserReorder" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabControl.TabStripHorizontalAlignmentProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabControl.TabStripHorizontalAlignment" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabControl.TabStripVerticalAlignmentProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabControl.TabStripVerticalAlignment" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabControl.MouseOverBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabControl.MouseOverBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabControl.PressedBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabControl.PressedBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabControl.SelectedBackgroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabControl.SelectedBackground" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabControl.TabStripBackgroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabControl.TabStripBackground" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabControl.TabStripForegroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabControl.TabStripForeground" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1TabControl.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1TabControl" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TabControl.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.C1TabControl" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="M:C1.WPF.C1TabControl.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Invoked whenever the effective value of any dependency property has been updated.
            </summary>
      <param name="e">
            The event data that describes the property that changed, as well as old and new values.
            </param>
    </member>
    <member name="P:C1.WPF.C1TabControl.SelectedItem">
      <summary>
            Gets or sets the currently selected
            <see cref="T:System.Windows.Controls.TabItem" />.
            </summary>
      <value>
            The currently selected
            <see cref="T:System.Windows.Controls.TabItem" />, or null if a
            <see cref="T:System.Windows.Controls.TabItem" /> is not selected.
            </value>
    </member>
    <member name="P:C1.WPF.C1TabControl.SelectedIndex">
      <summary>
            Gets or sets the index of the currently selected
            <see cref="T:System.Windows.Controls.TabItem" />.
            </summary>
      <value>
            The index of the currently selected
            <see cref="T:System.Windows.Controls.TabItem" />, or -1 if a
            <see cref="T:System.Windows.Controls.TabItem" /> is not selected.
            </value>
    </member>
    <member name="E:C1.WPF.C1TabControl.SelectionChanged">
      <summary>
            Occurs when selection changed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabControl.SelectedContent">
      <summary>
            Gets the content of the currently selected
            <see cref="T:System.Windows.Controls.TabItem" />.
            </summary>
      <value>
            The content of the currently selected
            <see cref="T:System.Windows.Controls.TabItem" />. The default is
            null.
            </value>
    </member>
    <member name="E:C1.WPF.C1TabControl.ItemsChanged">
      <summary>
            Called when the value of the System.Windows.Controls.ItemsControl.Items property changes.
            </summary>
    </member>
    <member name="E:C1.WPF.C1TabControl.TabItemClosed">
      <summary>
            Occurs when a <see cref="T:C1.WPF.C1TabItem" /> is closed.
            </summary>
    </member>
    <member name="E:C1.WPF.C1TabControl.TabItemClosing">
      <summary>
            Occurs before a <see cref="T:C1.WPF.C1TabItem" /> is closed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabControl.ShowSingleTab">
      <summary>
            Gets or sets a value that determines whether the tab strip is shown when the control has only one child.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabControl.TabStripPlacement">
      <summary>
            Gets or sets the location of the panel with the tabs relative to the whole control.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabControl.TabStripOverlap">
      <summary>
            Gets or sets the length of the overlap between <see cref="T:C1.WPF.C1TabItem" />s.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabControl.TabStripOverlapDirection">
      <summary>
            Gets or sets the Z-Index arrangement of the <see cref="T:C1.WPF.C1TabItem" />s.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabControl.TabItemShape">
      <summary>
            Gets or sets the geometric shape of the tabs.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabControl.TabItemClose">
      <summary>
            Gets or sets the location of the Close button.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabControl.ItemContainerStyle">
      <summary>
            Gets or sets the Style applied to all contained <see cref="T:C1.WPF.C1TabItem" />s
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabControl.TabStripMenuVisibility">
      <summary>
            Gets or sets the visibility of the menu listing the items.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabControl.CanUserReorder">
      <summary>
            Whether the user is allowed to drag and drop and reorder C1TabItems from this C1TabControl.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabControl.TabStripHorizontalAlignment">
      <summary>
            Gets or sets the horizontal alignment of the group of <see cref="T:C1.WPF.C1TabItem" />s.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabControl.TabStripVerticalAlignment">
      <summary>
            Gets or sets the vertical alignment of the group of <see cref="T:C1.WPF.C1TabItem" />s.
            </summary>
    </member>
    <member name="E:C1.WPF.C1TabControl.IsMouseOverChanged">
      <summary> 
            Event raised when the <see cref="!:IsMouseOver" /> property has changed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabControl.MouseOverBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when it has the mouse over.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabControl.PressedBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to paint a button when it is pressed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabControl.SelectedBackground">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when it is selected.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabControl.TabStripBackground">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that will be assigned to the Background of the tab strip.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabControl.TabStripForeground">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that will be assigned to the Foreground of the tab strip.
            </summary>
    </member>
    <member name="T:C1.WPF.CancelSourceEventArgs">
      <summary>
            Provides data for a cancelable event.
            </summary>
    </member>
    <member name="P:C1.WPF.CancelSourceEventArgs.Source">
      <summary>
            Gets or sets the source of the event.
            </summary>
    </member>
    <member name="T:C1.WPF.C1TabItemBorder">
      <summary>
            Control containing the header of a <see cref="T:C1.WPF.C1TabItem" />.
            Supports different appearances, defined by the <see cref="P:C1.WPF.C1TabItemBorder.Shape" /> property.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TabItemBorder.ChangeVisualStateShape(System.Boolean)">
      <summary>
            Updates the current visual state of the Shape visual state group to match the object's properties.
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabItemBorder.ShapeProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabItemBorder.Shape" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabItemBorder.CornerRadiusProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabItemBorder.CornerRadius" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1TabItemBorder.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1TabItemBorder" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TabItemBorder.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.C1TabItemBorder" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="P:C1.WPF.C1TabItemBorder.Shape">
      <summary>
            Gets or sets the geometric shape of the tab.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabItemBorder.CornerRadius">
      <summary>
            Gets or sets a value that represents the degree to which the corners of the element are rounded.
            </summary>
    </member>
    <member name="T:C1.WPF.C1SideThicknessConverter">
      <summary>
            Converter used to bind specific sides of inner elements thickness to 
            the main control thickness.
            </summary>
    </member>
    <member name="T:C1.WPF.C1SideRadiusConverter">
      <summary>
            Converter used to bind specific inner element corner radius to 
            the control CornerRadius.
            </summary>
    </member>
    <member name="T:C1.WPF.C1ProjectThicknessConverter">
      <summary>
            Converter used to extract a specific member of a thickness structure.
            </summary>
    </member>
    <member name="T:C1.WPF.C1TabItemBorderClipConverter">
      <summary>
            Converter used to clip off the bottom part of ribbon borders.
            </summary>
    </member>
    <member name="T:C1.WPF.C1SlopedBorderAdjustConverter">
      <summary>
            Converter used to adjust a path so that it renders its stroke inside and not to both side of its position.
            </summary>
    </member>
    <member name="T:C1.WPF.C1TabItemPresenter">
      <summary>
            Internal element used in both <see cref="T:C1.WPF.C1TabItem" /> and C1DockTabItem to avoid repetition.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TabItemPresenter.ChangeVisualStateSelection(System.Boolean)">
      <summary>
            Updates the current visual state of the Selection visual state group to match the object's properties.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TabItemPresenter.ChangeVisualStateTabStripPlacement(System.Boolean)">
      <summary>
            Updates the current visual state of the TabStripPlacement visual state group to match the object's properties.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TabItemPresenter.ChangeVisualStateCommon(System.Boolean)">
      <summary>
            Updates the current visual state of the Common visual state group to match the object's properties.
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabItemPresenter.IsSelectedProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabItemPresenter.IsSelected" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabItemPresenter.TabShapeProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabItemPresenter.TabShape" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabItemPresenter.CornerRadiusProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabItemPresenter.CornerRadius" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabItemPresenter.TabStripPlacementProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabItemPresenter.TabStripPlacement" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabItemPresenter.ShowSelectedCuesProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabItemPresenter.ShowSelectedCues" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabItemPresenter.MouseOverBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabItemPresenter.MouseOverBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabItemPresenter.PressedBrushProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabItemPresenter.PressedBrush" /> dependency property. 
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabItemPresenter.SelectedBackgroundProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabItemPresenter.SelectedBackground" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1TabItemPresenter.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1TabItemPresenter" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TabItemPresenter.OnApplyTemplate">
      <summary>
            Builds the visual tree for the <see cref="T:C1.WPF.C1TabItemPresenter" /> control when a new template is applied.
            </summary>
      <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate" /> method.
            </remarks>
    </member>
    <member name="M:C1.WPF.C1TabItemPresenter.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
            Invoked whenever the effective value of any dependency property has been updated.
            </summary>
      <param name="e">
            The event data that describes the property that changed, as well as old and new values.
            </param>
    </member>
    <member name="P:C1.WPF.C1TabItemPresenter.IsSelected">
      <summary>
            Gets or sets a value indicating whether the element is currently selected.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabItemPresenter.TabShape">
      <summary>
            Gets or sets the visual form of the control.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabItemPresenter.CornerRadius">
      <summary>
            Gets or sets a value that represents the degree to which the corners of the element are rounded.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabItemPresenter.TabStripPlacement">
      <summary>
            Gets or sets the location of the panel with the tabs relative to the whole control.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabItemPresenter.ShowSelectedCues">
      <summary>
            Gets or sets a value indicating whether the selected visuals of the control are visible.
            </summary>
    </member>
    <member name="E:C1.WPF.C1TabItemPresenter.IsMouseOverChanged">
      <summary> 
            Event raised when the <see cref="!:IsMouseOver" /> property has changed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabItemPresenter.MouseOverBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when it has the mouse over.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabItemPresenter.PressedBrush">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to paint a button when it is pressed.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabItemPresenter.SelectedBackground">
      <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to highlight the control when it is selected.
            </summary>
    </member>
    <member name="T:C1.WPF.C1TabPanel">
      <summary>
            Internal element used in the control template of <see cref="T:C1.WPF.C1TabControl" />s.
            </summary>
    </member>
    <member name="M:C1.WPF.C1TabPanel.ArrangeOverride(System.Windows.Size)">
      <summary>
            Provides the behavior for the "Arrange" pass of layout.
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabPanel.OrientationProperty">
      <summary>
            Identifies the <see cref="P:C1.WPF.C1TabPanel.Orientation" /> dependency property. 
            </summary>
    </member>
    <member name="M:C1.WPF.C1TabPanel.#ctor">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.C1TabPanel" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1TabPanel.Orientation">
      <summary>
            Gets or sets a value that indicates the dimension by which child elements are stacked.
            </summary>
    </member>
    <member name="T:C1.WPF.C1TabPanelOverlapDirection">
      <summary>
            Z-Index arrangement of the items in the <see cref="T:C1.WPF.C1TabPanel" />.
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabPanelOverlapDirection.Right">
      <summary>
            Right-most is in the back.
            Selected is in front.
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabPanelOverlapDirection.Left">
      <summary>
            Left-most is in the back.
            Selected is in front.
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabPanelOverlapDirection.RightLeftFromSelected">
      <summary>
            Left-most is in the back, right-most is in the back,
            selected is in front.
            </summary>
    </member>
    <member name="T:C1.WPF.C1TabItemShape">
      <summary>
            Supported shapes for the <see cref="T:C1.WPF.C1TabItem" /></summary>
    </member>
    <member name="F:C1.WPF.C1TabItemShape.Rectangle">
      <summary>
            Squared tab shape.
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabItemShape.Rounded">
      <summary>
            Rounded tab shape.
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabItemShape.Sloped">
      <summary>
            Sloped tab shape.
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabItemShape.Ribbon">
      <summary>
            S-shaped tab.
            </summary>
    </member>
    <member name="T:C1.WPF.C1TabItemCloseOptions">
      <summary>
            Close button options for the <see cref="T:C1.WPF.C1TabControl" /></summary>
    </member>
    <member name="F:C1.WPF.C1TabItemCloseOptions.None">
      <summary>
            Close button is not shown for the <see cref="T:C1.WPF.C1TabItem" />s.
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabItemCloseOptions.InEachTab">
      <summary>
            A close button is shown in each <see cref="T:C1.WPF.C1TabItem" />.
            </summary>
    </member>
    <member name="F:C1.WPF.C1TabItemCloseOptions.GlobalClose">
      <summary>
            A unique close button is shown, and the selected <see cref="T:C1.WPF.C1TabItem" />
            is closed when it's pressed.
            </summary>
    </member>
    <member name="T:C1.WPF.BackgroundGradientSuppressor">
      <summary>
            Hides the BackgroundGradient when the background is transparent or not a solid color.
            </summary>
    </member>
    <member name="M:C1.WPF.BackgroundGradientSuppressor.GetBackground(System.Windows.DependencyObject)">
      <summary>
            Gets the value of the Background attached property.
            </summary>
    </member>
    <member name="M:C1.WPF.BackgroundGradientSuppressor.SetBackground(System.Windows.DependencyObject,System.Windows.Media.Brush)">
      <summary>
            Sets the value of the Background attached property.
            </summary>
    </member>
    <member name="F:C1.WPF.BackgroundGradientSuppressor.BackgroundProperty">
      <summary>
            Identifies the Background dependency property. 
            </summary>
    </member>
    <member name="T:C1.WPF.C1PropertyPathHelper">
      <summary>
            Provides helper methods to work with <see cref="T:System.Linq.Expressions.Expression" /> and property paths.
            </summary>
    </member>
    <member name="M:C1.WPF.C1PropertyPathHelper.GetPropertyPathValue(System.Object,System.String)">
      <summary>
            Gets the value resulting from applying the property path to the item.
            </summary>
      <param name="item">The item to which the path will be applied.</param>
      <param name="propertyPath">The property path.</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.WPF.C1PropertyPathHelper.CreateSelector``2(System.String)">
      <summary>
            Creates a Function to evaluate a given property path on a given object.
            <example>
            For the property path: MyProperty1.MyProperty2
            it will return the following function:
            i =&gt; i.MyProperty1.MyProperty2
            </example></summary>
      <typeparam name="T">Type of the element where the property path will be accessed.</typeparam>
      <typeparam name="X">Type of the result after evaluated the full property path.</typeparam>
      <param name="path">The path.</param>
      <returns>
      </returns>
    </member>
    <member name="T:C1.WPF.CustomConverter">
      <summary>
            Converter which receive a function to convert the value
            </summary>
    </member>
    <member name="M:C1.WPF.CustomConverter.Create(System.Func{System.Object,System.Type,System.Object,System.Globalization.CultureInfo,System.Object})">
      <summary>
            Creates the specified converter function.
            </summary>
      <param name="converterFunction">The converter function. (value, type, parameter, culture)</param>
      <example>
        <code>
            var converter = CustomConverter.Create((value, type, parameter, culture)=&gt;
            {
                return; //Put the converter code here
            });
            </code>
      </example>
      <returns>The converted value</returns>
    </member>
    <member name="M:C1.WPF.CustomConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Modifies the source data before passing it to the target for display in the UI.
            </summary>
      <param name="value">The source data being passed to the target.</param>
      <param name="targetType">The <see cref="T:System.Type" /> of data expected by the target dependency property.</param>
      <param name="parameter">An optional parameter to be used in the converter logic.</param>
      <param name="culture">The culture of the conversion.</param>
      <returns>
            The value to be passed to the target dependency property.
            </returns>
    </member>
    <member name="M:C1.WPF.CustomConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
      <summary>
            Modifies the target data before passing it to the source object.  This method is called only in <see cref="F:System.Windows.Data.BindingMode.TwoWay" /> bindings.
            </summary>
      <param name="value">The target data being passed to the source.</param>
      <param name="targetType">The <see cref="T:System.Type" /> of data expected by the source object.</param>
      <param name="parameter">An optional parameter to be used in the converter logic.</param>
      <param name="culture">The culture of the conversion.</param>
      <returns>
            The value to be passed to the source object.
            </returns>
    </member>
    <member name="T:C1.WPF.VisibilityConverter">
      <summary>
            Converter from/to Visibility and Boolean.
            </summary>
      <remarks>
            true = Visible
            false = Collapsed
            </remarks>
    </member>
    <member name="M:C1.WPF.VisibilityConverter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.VisibilityConverter" /> class.
            </summary>
    </member>
    <member name="P:C1.WPF.VisibilityConverter.Opposite">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:C1.WPF.VisibilityConverter" /> is opposite.
            </summary>
      <value>
        <c>true</c> if opposite; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:C1.WPF.ZoomToScaleTransformConverter">
      <summary>
            Converts a double value to a <see cref="T:System.Windows.Media.ScaleTransform" />.
            </summary>
    </member>
    <member name="T:C1.WPF.Extensions">
      <summary>
            Class that provides static extension methods for several other classes.
            </summary>
    </member>
    <member name="M:C1.WPF.Extensions.FindParent``1(System.Windows.FrameworkElement)">
      <summary>
            Finds the first parent of a given type for a particular FrameworkElement
            </summary>
      <returns>
        <returns>The first object whose type is <typeparam name="T" /></returns>
      </returns>
    </member>
    <member name="M:C1.WPF.Extensions.GetAllParents(System.Windows.FrameworkElement)">
      <summary>
            Returns all the parents in the visual tree
            </summary>
      <returns>The list of ancestor framework elements in the visual tree hierarchy</returns>
    </member>
    <member name="M:C1.WPF.Extensions.SetBinding``1(System.Windows.FrameworkElement,System.Windows.DependencyProperty,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
      <summary>
            Sets the binding if the dependency property has not been set previously and the style of the element don't set the property.
            </summary>
      <typeparam name="T">Type of the source</typeparam>
      <param name="target">The target.</param>
      <param name="dp">The dependency property which will be set.</param>
      <param name="source">The source.</param>
      <param name="expr">Expression that returns a property of the source object.</param>
    </member>
    <member name="M:C1.WPF.Extensions.SetBinding``1(System.Windows.FrameworkElement,System.Windows.DependencyProperty,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Windows.Data.IValueConverter)">
      <summary>
            Sets the binding if the dependency property has not been set previously and the style of the element don't set the property.
            </summary>
      <typeparam name="T">Type of the source</typeparam>
      <param name="target">The target.</param>
      <param name="dp">The dependency property which will be set.</param>
      <param name="source">The source.</param>
      <param name="expr">Expression that returns a property of the source object.</param>
      <param name="converter">The converter that will be applied to the created binding object.</param>
    </member>
    <member name="M:C1.WPF.Extensions.SetBinding(System.Windows.FrameworkElement,System.Windows.DependencyProperty,System.Object,System.String)">
      <summary>
            Sets the binding if the dependency property has not been set previously and the style of the element don't set the property.
            </summary>
      <param name="target">The target.</param>
      <param name="dp">The dependency property which will be set.</param>
      <param name="source">The source.</param>
      <param name="sourcePropertyName">Name of the source property.</param>
    </member>
    <member name="M:C1.WPF.Extensions.New``1(System.Type)">
      <summary>
            Creates a new instance of this type using the default constructor.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="type">The type.</param>
      <returns>A new instance of type T</returns>
    </member>
    <member name="M:C1.WPF.Extensions.New``1(System.Type,System.Action{``0})">
      <summary>
            Creates a new instance of this type using the default constructor.
            </summary>
      <typeparam name="T">
      </typeparam>
      <param name="type">The type.</param>
      <param name="initializers">The initializers.</param>
      <returns>A new instance of type T</returns>
    </member>
    <member name="M:C1.WPF.Extensions.GetNonNullableType(System.Type)">
      <summary>
            Returns the underlying type of a nullable type:
            e.g. if Type = double?, then return double.
            </summary>
      <param name="type">Type.</param>
      <returns>The underlying type.</returns>
    </member>
    <member name="M:C1.WPF.Extensions.IsNullableType(System.Type)">
      <summary>
            Returns true if the type is a nullable type.
            </summary>
      <param name="type">Type.</param>
      <returns>True if the type is nullable.</returns>
    </member>
    <member name="M:C1.WPF.Extensions.IsNumeric(System.Type)">
      <summary>
            Returns true if the type is any of the numeric data types:
            double, float, int, uint, long, ulong, short, ushort, sbyte, byte and decimal.
            </summary>
      <param name="type">Type.</param>
      <returns>True if the type is numeric.</returns>
    </member>
    <member name="M:C1.WPF.Extensions.IsNumericIntegral(System.Type)">
      <summary>
            Returns true if the type is any of the integral numeric data types:
            int, uint, long, ulong, short, ushort, sbyte and byte.
            </summary>
      <param name="type">Type.</param>
      <returns>True if the type is an integral numeric.</returns>
    </member>
    <member name="M:C1.WPF.Extensions.IsNumericIntegralSigned(System.Type)">
      <summary>
            Returns true if the type is any of the integral signed numeric data types:
            int, long, short and sbyte.
            </summary>
      <param name="type">Type.</param>
      <returns>True if the type is a signed integral numeric.</returns>
    </member>
    <member name="M:C1.WPF.Extensions.IsNumericIntegralUnsigned(System.Type)">
      <summary>
            Returns true if the type is any of the integral unsigned numeric data types:
            uint, ulong, ushort and byte.
            </summary>
      <param name="type">Type.</param>
      <returns>True if the type is an unsigned integral numeric.</returns>
    </member>
    <member name="M:C1.WPF.Extensions.IsNumericNonIntegral(System.Type)">
      <summary>
            Returns true if the type is any of the numeric non-integral data types:
            double, float and decimal.
            </summary>
      <param name="type">Type.</param>
      <returns>True if the type is a non-integral numeric.</returns>
    </member>
    <member name="M:C1.WPF.Extensions.GetEnumValues``1(System.Type)">
      <summary>
            Returns the values of an Enum type (Type.IsEnum == true).
            </summary>
      <typeparam name="T">Enum type.</typeparam>
      <param name="enumType">Enum type.</param>
      <returns>The list of values for that enum type.</returns>
    </member>
    <member name="M:C1.WPF.Extensions.MakeRelative(System.Windows.Controls.Primitives.Popup,System.Windows.FrameworkElement,System.Func{System.Collections.Generic.List{C1.WPF.AnchorMatching}})">
      <summary>
            Makes the popup relative to another <see cref="T:System.Windows.FrameworkElement" />.
            </summary>
      <param name="popup">
        <see cref="T:System.Windows.Controls.Primitives.Popup" /> to handle.</param>
      <param name="relativeElement">Element used to locate the popup.</param>
      <param name="getLocations">Function that provides the ordered list of <see cref="T:C1.WPF.AnchorMatching" /> defining the corners to bound of both elements.</param>
    </member>
    <member name="M:C1.WPF.Extensions.MakeRelative(System.Windows.Controls.Primitives.Popup,System.Windows.FrameworkElement,System.Func{System.Collections.Generic.List{C1.WPF.AnchorMatching}},System.Func{System.Windows.Point},System.Func{System.Windows.Point})">
      <summary>
            Makes the popup relative to another <see cref="T:System.Windows.FrameworkElement" />.
            </summary>
      <param name="popup">
        <see cref="T:System.Windows.Controls.Primitives.Popup" /> to handle.</param>
      <param name="relativeElement">Element used to locate the popup.</param>
      <param name="getLocations">Function that provides the ordered list of <see cref="T:C1.WPF.AnchorMatching" /> defining the corners to bound of both elements.</param>
      <param name="getPosition">Function that retrieves the current position of the Popup.</param>
      <param name="getReferencePosition">Function that retrieves the current position of the reference element.</param>
    </member>
    <member name="M:C1.WPF.Extensions.GetAbsoluteUri(System.String)">
      <summary>
            Returns the absolute <see cref="T:System.Uri" /> from a string that may represent relative or absolute Uri.
            </summary>
      <param name="uriString">A relative or absolute Uri in string form.</param>
      <returns>The absolute <see cref="T:System.Uri" /> from the parameter string.</returns>
    </member>
    <member name="M:C1.WPF.Extensions.C1TransformToVisual(System.Windows.UIElement,System.Windows.UIElement)">
      <summary>
            Returns a transform object that can be used to transform coordinates from the <see cref="T:System.Windows.UIElement" /> to the specified object.
            </summary>
      <remarks>
            This is an improved version of <see cref="!:UIElement.TransformToVisual" />. It works in cases that TransformToVisual doesn't, like with UIElements inside <see cref="T:System.Windows.Controls.Primitives.Popup" />s.
            </remarks>
      <param name="element">The <see cref="T:System.Windows.UIElement" /> that defines the source coordinates.</param>
      <param name="visual">The <see cref="T:System.Windows.UIElement" /> that defines the target coordinates.</param>
      <returns>A transform object that can be used to transform coordinates from the <see cref="T:System.Windows.UIElement" /> to the specified object.</returns>
    </member>
    <member name="M:C1.WPF.Extensions.Distance(System.Windows.Point,System.Windows.Point)">
      <summary>
            Returns the distance between the two points
            </summary>
      <param name="p1">One point.</param>
      <param name="p2">Another point.</param>
      <returns>
      </returns>
    </member>
    <member name="T:C1.WPF.KeyboardUtil">
      <summary>
            Keyboard utilities.
            </summary>
    </member>
    <member name="P:C1.WPF.KeyboardUtil.Shift">
      <summary>
            Gets a value indicating whether shift key is pressed.
            </summary>
      <value>
        <c>true</c> if shift key is pressed; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:C1.WPF.KeyboardUtil.Ctrl">
      <summary>
            Gets a value indicating whether ctrl key is pressed.
            </summary>
      <value>
        <c>true</c> if ctrl key is pressed; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:C1.WPF.KeyboardUtil.Alt">
      <summary>
            Gets a value indicating whether alt key is pressed.
            </summary>
      <value>
        <c>true</c> if ctrl key is pressed; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:C1.WPF.C1MouseHelper">
      <summary>
            Provides additional mouse events for a <see cref="T:System.Windows.UIElement" />.
            </summary>
    </member>
    <member name="M:C1.WPF.C1MouseHelper.#ctor(System.Windows.UIElement)">
      <summary>
            Initializes a new <see cref="T:C1.WPF.C1MouseHelper" />.
            </summary>
      <param name="element">A <see cref="T:System.Windows.UIElement" /> for which additional mouse events will be raised.</param>
    </member>
    <member name="M:C1.WPF.C1MouseHelper.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
    </member>
    <member name="E:C1.WPF.C1MouseHelper.MouseClick">
      <summary>
            Fires when the <see cref="T:System.Windows.UIElement" /> is clicked.
            </summary>
    </member>
    <member name="E:C1.WPF.C1MouseHelper.MouseDoubleClick">
      <summary>
            Fires when the <see cref="T:System.Windows.UIElement" /> is double-clicked.
            </summary>
    </member>
    <member name="E:C1.WPF.C1MouseHelper.MouseWheel">
      <summary>
            Fires when the mouse wheel is activated over the <see cref="T:System.Windows.UIElement" />.
            </summary>
    </member>
    <member name="E:C1.WPF.C1MouseHelper.MouseDragStart">
      <summary>
            Fires when the user starts dragging the <see cref="T:System.Windows.UIElement" /> with the mouse.
            </summary>
    </member>
    <member name="E:C1.WPF.C1MouseHelper.MouseDragMove">
      <summary>
            Fires while the user drags the <see cref="T:System.Windows.UIElement" /> with the mouse.
            </summary>
    </member>
    <member name="E:C1.WPF.C1MouseHelper.MouseDragEnd">
      <summary>
            Fires when the user finishes dragging the <see cref="T:System.Windows.UIElement" /> with the mouse.
            </summary>
    </member>
    <member name="E:C1.WPF.C1MouseHelper.ContextMenuInvoked">
      <summary>
            Fires when the context menu is invoked for the <see cref="T:System.Windows.UIElement" />.
            </summary>
      <remarks>
        <para>To use this event the Silverlight plug-in should have its 'windowless' parameter set to true.</para>
        <para>For example, if the Silverlight plug-in is declared in an aspx page, it should be edited as follows:</para>
        <code language="HTML">
            &lt;form id="form1" runat="server" style="height:100%;"&gt;
              &lt;asp:ScriptManager ID="ScriptManager1" runat="server"&gt;&lt;/asp:ScriptManager&gt;
              &lt;div  style="height:100%;"&gt;
                &lt;asp:Silverlight 
                  ID="Xaml1" runat="server" 
                  Source="~/ClientBin/TestM1.xap" 
                  Version="2.0" Width="100%" Height="100%" 
                  <b>Windowless="true" /&gt;</b>
              &lt;/div&gt;
            &lt;/form&gt;
            </code>
            If the plug-in is declared in a html page, it should be edited as follows:
            <code language="HTML">
            &lt;div id="silverlightControlHost"&gt;
            &lt;object data="data:application/x-silverlight," type="application/x-silverlight-2-b1" width="100%" height="100%" &gt;
            	&lt;param name="source" value="ClientBin/TestM1.xap"/&gt;
            	&lt;param name="onerror" value="onSilverlightError" /&gt;
            	&lt;param name="background" value="white" /&gt;
            	<b>&lt;param name="windowless" value="true" /&gt;</b>
            	&lt;a href="http://go.microsoft.com/fwlink/?LinkID=108182" style="text-decoration: none;"&gt;
            		&lt;img src="http://go.microsoft.com/fwlink/?LinkId=108181" alt="Get Microsoft Silverlight" style="border-style: none"/&gt;
            	&lt;/a&gt;
            &lt;/object&gt;
            &lt;iframe style='visibility:hidden;height:0;width:0;border:0px'&gt;&lt;/iframe&gt;
            &lt;/div&gt;
            </code></remarks>
    </member>
    <member name="T:C1.WPF.MouseWheelEventArgs">
      <summary>
            Provides data for the <see cref="E:C1.WPF.C1MouseHelper.MouseWheel" /> event.
            </summary>
    </member>
    <member name="M:C1.WPF.MouseWheelEventArgs.#ctor(System.Double,System.Windows.Point)">
      <summary>
            Initializes a new instance of a <see cref="T:C1.WPF.MouseWheelEventArgs" />.
            </summary>
      <param name="delta">The number of wheel movements.</param>
      <param name="position">The mouse position, relative to the application root, where the wheel was moved.</param>
    </member>
    <member name="P:C1.WPF.MouseWheelEventArgs.Delta">
      <summary>
            Gets the number of wheel movements.
            </summary>
      <remarks>
            A positive value indicates a forward movement, and a negative value indicates a backward movement.
            </remarks>
    </member>
    <member name="P:C1.WPF.MouseWheelEventArgs.Position">
      <summary>
            Gets the mouse position, relative to the application root, where the wheel was moved.
            </summary>
    </member>
    <member name="P:C1.WPF.MouseWheelEventArgs.Handled">
      <summary>
            Gets or sets a value that marks the event as handled, and prevents
            the browser from performing the default action.
            </summary>
    </member>
    <member name="T:C1.WPF.MouseDragEventArgs">
      <summary>
            Provides data for the <see cref="E:C1.WPF.C1MouseHelper.MouseDragStart" />, 
            <see cref="E:C1.WPF.C1MouseHelper.MouseDragMove" />, and 
            <see cref="E:C1.WPF.C1MouseHelper.MouseDragEnd" /> events.
            </summary>
    </member>
    <member name="M:C1.WPF.MouseDragEventArgs.GetPosition(System.Windows.UIElement)">
      <summary>
            Returns the x- and y-coordinates of the mouse pointer position, optionally
            evaluated against a coordinate origin of a supplied <see cref="T:System.Windows.UIElement" />.
            </summary>
      <param name="relativeTo">
            Any <see cref="T:System.Windows.UIElement" />-derived object that is contained by the Silverlight
            plug-in and connected to the object tree. To specify the object relative
            to the overall Silverlight coordinate system, set the relativeTo parameter
            to null.
            </param>
      <returns>
            A <see cref="T:System.Windows.Point" /> that represents the current x- and y-coordinates of
            the mouse pointer position. If null was passed as relativeTo, this coordinate
            is for the overall Silverlight plug-in content area. If a non-null 
            <paramref name="relativeTo" /> was passed, this coordinate is relative to the 
            object referenced by <paramref name="relativeTo" />.
            </returns>
    </member>
    <member name="P:C1.WPF.MouseDragEventArgs.DeltaX">
      <summary>
            Gets the variation of X between the previous mouse position and the current one.
            </summary>
    </member>
    <member name="P:C1.WPF.MouseDragEventArgs.DeltaY">
      <summary>
            Gets the variation of Y between the previous mouse position and the current one.
            </summary>
    </member>
    <member name="P:C1.WPF.MouseDragEventArgs.TotalDeltaX">
      <summary>
            Gets the variation of X between the mouse position where the drag started and the current one.
            </summary>
    </member>
    <member name="P:C1.WPF.MouseDragEventArgs.TotalDeltaY">
      <summary>
            Gets the variation of Y between the mouse position where the drag started and the current one.
            </summary>
    </member>
    <member name="P:C1.WPF.MouseDragEventArgs.StartPosition">
      <summary>
            Gets the mouse position where the drag started, relative to the application root.
            </summary>
    </member>
    <member name="P:C1.WPF.MouseDragEventArgs.PreviousPosition">
      <summary>
            Gets the mouse position from the previous drag event, relative to the application root.
            </summary>
    </member>
    <member name="P:C1.WPF.MouseDragEventArgs.CurrentPosition">
      <summary>
            Gets the current mouse position, relative to the application root.
            </summary>
    </member>
    <member name="T:C1.WPF.PropertyChangedEventArgs`1">
      <summary>
            Provides event data for OnPropertyChanged events.
            </summary>
    </member>
    <member name="P:C1.WPF.PropertyChangedEventArgs`1.NewValue">
      <summary>
            The value of the property after the change.
            </summary>
    </member>
    <member name="P:C1.WPF.PropertyChangedEventArgs`1.OldValue">
      <summary>
            The value of the property before the change.
            </summary>
    </member>
    <member name="T:C1.WPF.PropertyChangingEventArgs`1">
      <summary>
            Provides event data for OnPropertyChanging events.
            </summary>
    </member>
    <member name="P:C1.WPF.PropertyChangingEventArgs`1.Cancel">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:C1.WPF.PropertyChangingEventArgs`1" /> is cancel.
            </summary>
      <value>
        <c>true</c> if cancel; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:C1.WPF.SmallShapePresenter">
      <summary>
            Internal class.
            Wrap a Shape object, such as a Path, with a SmallShapePresenter to prevent
            the shape from taking all available space when MaxHeight/MaxWidth is less than infinity.
            </summary>
    </member>
    <member name="M:C1.WPF.SmallShapePresenter.MeasureOverride(System.Windows.Size)">
      <summary>
            Provides the behavior for the Measure pass of layout.
            </summary>
    </member>
    <member name="T:C1.WPF.SourcedEventArgs">
      <summary>
            Contains data for events with a source different from the object firing the event.
            </summary>
    </member>
    <member name="P:C1.WPF.SourcedEventArgs.Source">
      <summary>
            Gets or sets the source of the event.
            </summary>
    </member>
    <member name="T:C1.WPF.VTreeHelper">
      <summary>
            The <see cref="T:C1.WPF.VTreeHelper" /> class provides utility methods that perform common tasks involving nodes in a visual tree.
            </summary>
    </member>
    <member name="M:C1.WPF.VTreeHelper.GetChildOfType(System.Windows.DependencyObject,System.Type)">
      <summary>
            Returns the first child visual object of the specified type within a specified parent.
            </summary>
      <param name="reference">The parent visual, referenced as a <see cref="T:System.Windows.DependencyObject" />.</param>
      <param name="type">The <see cref="T:System.Type" /> of the children element to search for.</param>
      <returns>The visual object of the specified type.</returns>
    </member>
    <member name="M:C1.WPF.VTreeHelper.GetChildrenOfType(System.Windows.DependencyObject,System.Type,System.Collections.Generic.IList{System.Windows.DependencyObject}@)">
      <summary>
            Returns all children visual objects of the specified type within a specified parent.
            </summary>
      <param name="reference">The parent visual, referenced as a <see cref="T:System.Windows.DependencyObject" />.</param>
      <param name="type">The <see cref="T:System.Type" /> of the children element to search for.</param>
      <param name="list">The <see cref="T:System.Collections.Generic.IList`1" /> object to fill with found objects.</param>
    </member>
    <member name="M:C1.WPF.VTreeHelper.GetParentOfType(System.Windows.DependencyObject,System.Type)">
      <summary>
            Returns a <see cref="T:System.Windows.DependencyObject" /> value that represents the parent 
            of the visual object of the specified type. Method looks up the visual tree until
            the desired parent element is found or parent element is null.
            </summary>
      <param name="reference">The visual whose parent is returned.</param>
      <param name="type">The <see cref="T:System.Type" /> of the parent element to search for.</param>
      <returns>The parent of the visual.</returns>
    </member>
    <member name="M:C1.WPF.VTreeHelper.GetParentOfType(System.Windows.DependencyObject,System.Type,System.Windows.DependencyObject)">
      <summary>
            Returns a <see cref="T:System.Windows.DependencyObject" /> value that represents the parent 
            of the visual object of the specified type. Method looks up the visual tree until
            the desired parent element is found or parent element is equal to the specified endObject.
            </summary>
      <param name="reference">The visual whose parent is returned.</param>
      <param name="type">The <see cref="T:System.Type" /> of the parent element to search for.</param>
      <param name="endObject">The visual representing the end point of search.</param>
      <returns>The parent of the visual.</returns>
    </member>
    <member name="M:C1.WPF.VTreeHelper.GetParentOfType(System.Windows.DependencyObject,System.Type,System.Boolean)">
      <summary>
            Returns a <see cref="T:System.Windows.DependencyObject" /> value that represents the parent 
            of the visual object of the specified type. Method looks up the visual tree until
            the desired parent element is found or parent element is null.
            </summary>
      <param name="reference">The visual whose parent is returned.</param>
      <param name="type">The <see cref="T:System.Type" /> of the parent element to search for.</param>
      <param name="lookOutsideVisualTree">Specifies whether the search should go on outside the VisualTree.</param>
      <returns>The parent of the visual.</returns>
    </member>
    <member name="M:C1.WPF.VTreeHelper.GetParentOfType(System.Windows.DependencyObject,System.Type,System.Windows.DependencyObject,System.Boolean)">
      <summary>
            Returns a <see cref="T:System.Windows.DependencyObject" /> value that represents the parent 
            of the visual object of the specified type. Method looks up the visual tree until
            the desired parent element is found or parent element is equal to the specified endObject.
            </summary>
      <param name="reference">The visual whose parent is returned.</param>
      <param name="type">The <see cref="T:System.Type" /> of the parent element to search for.</param>
      <param name="endObject">The visual representing the end point of search.</param>
      <param name="lookOutsideVisualTree">Specifies whether the search should go on outside the VisualTree.</param>
      <returns>The parent of the visual.</returns>
    </member>
    <member name="M:C1.WPF.VTreeHelper.GetFirstParent(System.Windows.DependencyObject,System.Collections.Generic.IList{System.Type},System.Windows.DependencyObject)">
      <summary>
            Returns a <see cref="T:System.Windows.DependencyObject" /> value that represents the first parent 
            of the visual object which type is one of the specified tyles. Method looks up the visual tree until
            the desired parent element is found or parent element is equal to the specified endObject.
            </summary>
      <param name="reference">The visual whose parent is returned.</param>
      <param name="types">The <see cref="T:System.Collections.Generic.IList`1" /> list of types to search for.</param>
      <param name="endObject">The visual representing the end point of search.</param>
      <returns>The parent of the visual.</returns>
    </member>
    <member name="T:C1.WPF.C1HyperlinkButton">
      <summary>
            Represents a button control that displays a hyperlink.
            </summary>
    </member>
    <member name="M:C1.WPF.C1HyperlinkButton.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.WPF.C1HyperlinkButton" /> class.
            </summary>
    </member>
    <member name="M:C1.WPF.C1HyperlinkButton.OnApplyTemplate">
      <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate" />.
            </summary>
    </member>
    <member name="P:C1.WPF.C1HyperlinkButton.NavigateUri">
      <summary>
            Gets or sets a URI to navigate to when the <see cref="T:C1.WPF.C1HyperlinkButton" /> is activated.
            </summary>
    </member>
    <member name="P:C1.WPF.C1HyperlinkButton.TargetName">
      <summary>
            Gets or sets the name of a target window or frame for the <see cref="T:C1.WPF.C1HyperlinkButton" />.
            </summary>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.ValidationResult">
      <summary>
            Represents a container for the results of a validation request.
            </summary>
    </member>
    <member name="F:System.ComponentModel.DataAnnotations.ValidationResult.Success">
      <summary>
            Defines a value that represents a successful validation.
            </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationResult.#ctor(System.ComponentModel.DataAnnotations.ValidationResult)">
      <summary>
            Initializes a new instance of a <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" /> which is a copy of another
            <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" /> object.
            </summary>
      <param name="validationResult">
            The <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" /> object whose values are copied to the created <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" />.
            </param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationResult.#ctor(System.String)">
      <summary>
            Initializes a new instance of a <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" /> with a specified error message.
            </summary>
      <param name="errorMessage">
            The error message.
            </param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidationResult.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Initializes a new instance of a <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" /> with a specified error message and
            a list of members that have validation errors. 
            </summary>
      <param name="errorMessage">
            The error message.
            </param>
      <param name="memberNames">
            The list of member names that have validation errors.
            </param>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationResult.ErrorMessage">
      <summary>
            Gets or sets the error message for the validation.
            </summary>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.ValidationResult.MemberNames">
      <summary>
            Gets the collection of member names that indicate which fields have validation errors.
            </summary>
    </member>
  </members>
</doc>