using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Manual_Import.Model;
using Manual_Import;
using Manual_Import.Helper;
using System.Xml.Linq;
using PDF = iTextSharp.text;
using iTextSharp.text.pdf;
using Word = Microsoft.Office.Interop.Word;
using System.IO;
using Utility.Common;
using System.Runtime.InteropServices;
using SharpCompress.Reader;
using SharpCompress.Common;
using System.Threading;
using Utility.Dao;
using iTextSharp.text;
using System.Threading.Tasks;

namespace Manual_Import.ViewModel
{
    public class TidyHelper
    {
        object G_missing = System.Reflection.Missing.Value;
        object saveOption = Word.WdSaveOptions.wdDoNotSaveChanges;
        object What = Word.WdGoToItem.wdGoToSection;
        object Which = Word.WdGoToDirection.wdGoToFirst;
        
        ViewModel_Main ViewModel;
        Action<string, int> ShowLog;
        Action<Model_FileSystem> RemoveItem;
        public Action 批量生成;
        public Action 单独生成;
        public Action 失败处理;
        SQLiteDBHelper dbHelper;
        public CancellationTokenSource tokenSource;

        //public string CurPdfName;//当前合成pdf文件名,在外赋值

        public TidyHelper(SQLiteDBHelper sqlite, ViewModel_Main Vmodel, Action<string, int> Show, Action<Model_FileSystem> removeItem)
        {
            dbHelper = sqlite;
            ViewModel = Vmodel;
            ShowLog = Show;
            RemoveItem = removeItem;
            //var files= new DirectoryInfo(Vmodel.Upload_Path).GetFiles();
            //foreach (FileInfo fi in files)
            //{
            //    try
            //    {
            //        string s1 = System.Text.RegularExpressions.Regex.Match(fi.Name, "\\d.").Value.Replace(".", "");
            //        string s2 = System.Text.RegularExpressions.Regex.Match(CurPdfName, "\\d.").Value.Replace(".", "");
            //        if (Convert.ToInt32(s1) > Convert.ToInt32(s2))
            //        {
            //            CurPdfName = fi.Name;
            //        }
            //    }
            //    catch (Exception fs)
            //    {
            //        continue;
            //    }
            //}
            if (Vmodel.TaskType == "纯盘")
            {
                单独生成 = 纯盘单独生成;
                批量生成 = 纯盘批量生成;
                失败处理 = 重整纯盘错误;
            }
            else if (Vmodel.TaskType == "刊盘")
            {
                单独生成 = 刊盘单独生成;
                批量生成 = 刊盘批量生成;
                失败处理 = 重整刊盘错误;
            }
        }

       /// <summary>
       /// 给pdf都第一页和最后一页加水印
       /// </summary>
       /// <param name="inputfilepath"></param>
       /// <param name="pageSum"></param>
       /// <param name="code"></param>
        public void WaterMarkPdf(ref string inputfilepath, out int pageSum, string code = "")
        {
            Utility.Log.TextLog.WritwLog("开始pdf加水印");
            pageSum = 0;
            string ChangeFilePath = ViewModel.Upload_Path + "\\非正文页.pdf";
            File.Move(inputfilepath, ChangeFilePath);
            Utility.Log.TextLog.WritwLog("pdf重命名");
            if(code=="")
                inputfilepath = ViewModel.Upload_Path + "\\" + ViewModel.Begin_Code + "[整].pdf";
            else
                inputfilepath = ViewModel.Upload_Path + "\\" + code + "[整].pdf";
            PdfReader pdfReader = null;
            PdfStamper pdfStamper = null;
            try
            {
                pdfReader = new PdfReader(ChangeFilePath);
                pdfStamper = new PdfStamper(pdfReader, new FileStream(inputfilepath, FileMode.Create));
                //int total = pdfReader.NumberOfPages + 1;
                iTextSharp.text.Rectangle psize = pdfReader.GetPageSize(1);
                float width = psize.Width;
                float height = psize.Height;
                PdfContentByte content;
                BaseFont font = BaseFont.CreateFont(@"C:\WINDOWS\Fonts\SIMFANG.TTF", BaseFont.IDENTITY_H, BaseFont.EMBEDDED);
                PdfGState gs = new PdfGState();
                
                   
                content = pdfStamper.GetOverContent(1);//在内容上方加水印
                //透明度
                gs.FillOpacity = 0.8f;
                content.SetGState(gs);
                //content.SetGrayFill(0.3f);
                //开始写入文本
                content.BeginText();
                content.SetColorFill(BaseColor.RED);
                content.SetFontAndSize(font, 50);
                content.SetTextMatrix(0, 0);
                if(code=="")
                    content.ShowTextAligned(Element.ALIGN_CENTER, ViewModel.Begin_Code + "任务开始", width / 2, height - 50, 0);
                else
                    content.ShowTextAligned(Element.ALIGN_CENTER, code + "任务开始", width / 2, height - 50, 0);
                content.EndText();

                content = pdfStamper.GetOverContent(pdfReader.NumberOfPages);//在内容上方加水印
                //透明度
                gs.FillOpacity = 0.8f;
                content.SetGState(gs);
                //content.SetGrayFill(0.3f);
                //开始写入文本
                content.BeginText();
                content.SetColorFill(BaseColor.RED);
                content.SetFontAndSize(font, 50);
                content.SetTextMatrix(0, 0);
                if(code=="")
                    content.ShowTextAligned(Element.ALIGN_CENTER, ViewModel.Begin_Code + "任务结束", width / 2, 20, 0);
                else
                    content.ShowTextAligned(Element.ALIGN_CENTER, code + "任务结束", width / 2, 20, 0);
                content.EndText();
                
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                pageSum = pdfReader.NumberOfPages;
                if (pdfStamper != null)
                    pdfStamper.Close();

                if (pdfReader != null)
                    pdfReader.Close();

                File.Delete(ChangeFilePath);
            }
        }

        private void 纯盘单独生成()
        {
            try
            {
                ShowLog("开始生成任务", 2);
                int XiaoYangSum = 0;//小样个数
                var checkedItem = ViewModel.Models.Where(m => { return m.Checked == true && m.Name != ".."; });
                if (checkedItem.Count() == 0)
                {
                    ShowLog("没有选择任何文件", 3);
                    return;
                }
                string desDirName = ViewModel.AfterTydyPath + "\\" + ViewModel.Begin_Code;
                if (!Directory.Exists(desDirName))
                {
                    Directory.CreateDirectory(desDirName);
                }
                List<string> backPdfs = new List<string>();

                foreach (Model_FileSystem fs in checkedItem)
                {
                    
                    #region 文件夹
                    if (fs.Type == SystemType.Dir)
                    {
                        //foreach (FileInfo file in new DirectoryInfo(fs.FullPath).GetFiles())
                        foreach(FileInfo file in Traverse(fs.FullPath))
                        {
                            string backpdf;
                            string[] arrayStr = FileOprate_Chunpan(file, out backpdf);
                            string afterCopyFilename = CopyFile(file, desDirName);
                            string sql = string.Format("insert into db_File values('{0}',\"{1}\",'{2}','{3}','{4}',{5},\"{6}\",{7},{8},\"{9}\")", ViewModel.Begin_Code, afterCopyFilename, file.Extension, arrayStr[1], arrayStr[0], 0, file.FullName, 0, "null", desDirName + "\\" + afterCopyFilename);
                            dbHelper.ExecuteNonQuery(sql, null);
                            if (arrayStr[0] != "是" || arrayStr[1] != "是")
                            {
                                ViewModel.CurFail++;
                                ViewModel.TotalFail++;
                            }
                            else
                            {
                                ViewModel.CurSuc++;
                                ViewModel.TotalSuc++;
                            }
                            ViewModel.UnTidy--;
                            
                            //File.Copy(file.FullName, desDirName + "\\" + file.Name);
                            
                            backPdfs.Add(backpdf);
                            XiaoYangSum++;
                        }
                    }
                    #endregion
                    #region 文件
                    else
                    {
                        FileInfo file = new FileInfo(fs.FullPath);
                        string backpdf;
                        string[] arrayStr = FileOprate_Chunpan(file, out backpdf);
                        string afterCopyFilename = CopyFile(file, desDirName);
                        string sql = string.Format("insert into db_File values('{0}',\"{1}\",'{2}','{3}','{4}',{5},\"{6}\",{7},{8},\"{9}\")", ViewModel.Begin_Code, afterCopyFilename, file.Extension, arrayStr[1], arrayStr[0], 0, file.FullName, 0, "null", desDirName + "\\" + afterCopyFilename);
                        dbHelper.ExecuteNonQuery(sql, null);
                        //File.Copy(file.FullName, desDirName + "\\" + file.Name);
                        //CopyFile(file, desDirName);
                        backPdfs.Add(backpdf);

                        if (arrayStr[0] != "是" || arrayStr[1] != "是")
                        {
                            fs.HasTidy = -1;
                            ViewModel.CurFail++;
                            ViewModel.TotalFail++;
                        }
                        else
                        {
                            ViewModel.CurSuc++;
                            ViewModel.TotalSuc++;
                            fs.HasTidy = 1;
                        }
                        ViewModel.UnTidy--;
                        XiaoYangSum++;
                    }
                    #endregion
                    fs.Checked = false;
                }

                string outPdfName;
                if (backPdfs.Contains(""))
                    outPdfName = "";
                else
                {
                    outPdfName = ViewModel.Upload_Path + "\\" + ViewModel.Begin_Code + "[整].pdf";
                    CombineMultiplePDFs(backPdfs, ref outPdfName);
                }
                int TotalPage = 0;
                if(outPdfName!="")
                    WaterMarkPdf(ref outPdfName, out TotalPage);
                string str = string.Format("insert into XW_FileOrderinfo(编号,路径,提交否,文件名,年度,级别,版权反馈否,保密否,是否签名,是否授权,删除字样,提取页数,小样数) values('{0}','{1}','否','{2}','{3}','硕士','是','否','否','否','否',{4},{5})", ViewModel.Begin_Code, desDirName, outPdfName, DateTime.Now.Year, TotalPage, XiaoYangSum);
                dbHelper.ExecuteNonQuery(str, null);
                
                ShowLog(ViewModel.Begin_Code + ":生成任务完毕!", 1);
                ViewModel.Begin_Code = (Convert.ToInt32(ViewModel.Begin_Code) + 1).ToString();
                ConfigHelper.SetValue("BEGIN_CODE", ViewModel.Begin_Code);
              
            }
            catch (Exception ee)
            {
                Utility.Log.TextLog.WritwLog(ee.Message);
            }
        }

       private void 纯盘批量生成()
        {
            try
            {
                ShowLog("开始生成任务", 2);
                var checkedItem = ViewModel.Models.Where(m => { return m.Checked == true && m.Name != ".."; });
                if (checkedItem.Count() == 0)
                {
                    ShowLog("没有选择任何文件", 3);
                    return;
                }
                
                int year = DateTime.Now.Year;
                foreach (Model_FileSystem fs in checkedItem)
                {
                    if (tokenSource.Token.IsCancellationRequested)
                    {
                        ShowLog("整理停止",2);
                        return;
                    }
                    int XiaoYangSum = 0;
                    #region 勾选项是文件夹
                    string desDirName = ViewModel.AfterTydyPath + "\\" + ViewModel.Begin_Code;
                    if (!Directory.Exists(desDirName))
                        Directory.CreateDirectory(desDirName);
                    string backpdf;
                    if (fs.Type == SystemType.Dir)
                    {
                        var fileList = Traverse(fs.FullPath);
                        if (fileList.Where(f => { return (f.Extension.ToLower() == ".pdf" || f.Extension.ToLower() == ".doc" || f.Extension.ToLower() == ".docx"); }).Count() > 10)
                        {
                            ShowLog(fs.Name+"文件夹下有多个文件,可能不是同一作者,请打开分别整理",3);
                            continue;
                        }
                        //存储该文件夹内所有文件生成的pdf文件的路径,最后要合并
                        List<string> pdfNames = new List<string>();
                        //foreach (FileInfo f in new DirectoryInfo(fs.FullPath).GetFiles())
                        foreach (FileInfo f in fileList)
                        {
                            string[] arrayStr = FileOprate_Chunpan(f, out backpdf);
                            string afterCopyFilename= CopyFile(f, desDirName);
                            string sql = string.Format("insert into db_File values('{0}',\"{1}\",'{2}','{3}','{4}',{5},\"{6}\",{7},{8},\"{9}\")", ViewModel.Begin_Code, afterCopyFilename, f.Extension, arrayStr[1], arrayStr[0], 0, f.FullName, 0, "null", desDirName + "\\" + afterCopyFilename);
                            dbHelper.ExecuteNonQuery(sql, null);
                            if (arrayStr[0] != "是" || arrayStr[1] != "是")
                            {
                                ViewModel.CurFail++;
                                ViewModel.TotalFail++;
                            }
                            else
                            {
                                ViewModel.CurSuc++;
                                ViewModel.TotalSuc++;
                            }
                            ViewModel.UnTidy--;
                            //f.CopyTo(desDirName + "\\" + f.Name, true);
                            
                            pdfNames.Add(backpdf);
                            XiaoYangSum++;
                        }
                        //开始合并该任务内所有pdf文件
                        string outPdfName;
                        if (pdfNames.Contains(""))
                            outPdfName = "";
                        else
                        {
                            outPdfName = ViewModel.Upload_Path + "\\" + ViewModel.Begin_Code + "[整].pdf";
                            CombineMultiplePDFs(pdfNames, ref outPdfName);
                        }

                        if (outPdfName != "")
                        {
                            fs.HasTidy = 1;
                            backpdf = outPdfName;
                        }
                        else
                        {
                            fs.HasTidy = -1;
                            backpdf ="";
                        }
                    }
                    #endregion

                    #region 勾选项是文件
                    else
                    {
                        FileInfo file = new FileInfo(fs.FullPath);
                        string[] arrayStr = FileOprate_Chunpan(file, out backpdf);
                        string afterCopyFilename = CopyFile(file, desDirName);
                        string sql = string.Format("insert into db_File values('{0}',\"{1}\",'{2}','{3}','{4}',{5},\"{6}\",{7},{8},\"{9}\")", ViewModel.Begin_Code, afterCopyFilename, file.Extension, arrayStr[1], arrayStr[0], 0, file.FullName, 0, "null", desDirName + "\\" + afterCopyFilename);
                        dbHelper.ExecuteNonQuery(sql, null);
                        //file.CopyTo(desDirName + "\\" + file.Name, true);
                        
                        if (arrayStr[0] != "是" || arrayStr[1] != "是")
                        {
                            ViewModel.CurFail++;
                            ViewModel.TotalFail++;
                            fs.HasTidy = -1;
                        }
                        else
                        {
                            ViewModel.CurSuc++;
                            ViewModel.TotalSuc++;
                            fs.HasTidy = 1;
                        }
                        ViewModel.UnTidy--;
                        XiaoYangSum++;
                    }
                    #endregion
                    int TotalPage = 0;
                    if (backpdf != "")
                        WaterMarkPdf(ref backpdf, out TotalPage);

                    string str = string.Format("insert into XW_FileOrderinfo(编号,路径,提交否,文件名,年度,级别,版权反馈否,保密否,是否签名,是否授权,删除字样,提取页数,小样数) values('{0}','{1}','否','{2}','{3}','硕士','是','否','否','否','否',{4},{5})", ViewModel.Begin_Code, desDirName, backpdf, year, TotalPage, XiaoYangSum);
                    dbHelper.ExecuteNonQuery(str, null);
                    ShowLog(ViewModel.Begin_Code + "生成任务成功", 1);
                    fs.Checked = false;

                    var num = Convert.ToInt64(ViewModel.Begin_Code);
                    ViewModel.Begin_Code = (num + 1).ToString();
                    ConfigHelper.SetValue("BEGIN_CODE", ViewModel.Begin_Code);
                }
                
                ShowLog("生成任务完毕", 2);
            }
            catch (Exception ee)
            {
                Utility.Log.TextLog.WritwLog(ee.Message);
            }
        }

        public void 刊盘单独生成()
        {
            try
            {
                ShowLog("开始生成任务", 2);
                var checkedItem = ViewModel.Models.Where(m => { return m.Checked == true && m.Name != ".."; });
                if (checkedItem.Count() == 0)
                {
                    ShowLog("没有选择任何文件", 3);
                    return;
                }
                int readWordNum = Convert.ToInt32(ConfigHelper.GetValue("Word_Summary_Num"));
                int readPdfNum = Convert.ToInt32(ConfigHelper.GetValue("PDF_Summary_PageNum"));

                Reader reader = new Reader(readWordNum, readPdfNum);
                List<string> listPdf = new List<string>();

                string desDirName = ViewModel.AfterTydyPath + "\\" + ViewModel.Begin_Code;
                if (!Directory.Exists(desDirName))
                    Directory.CreateDirectory(desDirName);
                int XiaoYangSum = 0;
                foreach (Model_FileSystem fs in checkedItem)
                {
                    if (fs.Type == SystemType.Dir)
                    {
                        //foreach (FileInfo file in new DirectoryInfo(fs.FullPath).GetFiles())
                        foreach (FileInfo file in Traverse(fs.FullPath))
                        {
                            string backpdf;
                            string[] backStr = FileOprate_KanPan(file, reader, out backpdf);
                            string afterCopyFilename= CopyFile(file, desDirName);
                            string insertSql = string.Format("insert into db_File values('{0}',\"{1}\",'{2}','{3}',{4},\"{5}\",\"{6}\",{7},{8},\"{9}\")", ViewModel.Begin_Code, afterCopyFilename, backStr[0], backStr[1], 0, file.FullName, backStr[2].Replace('"', ' '), 0, "null", desDirName + "\\" + afterCopyFilename);
                            try
                            {
                                dbHelper.ExecuteNonQuery(insertSql, null);
                            }
                            catch (Exception e)
                            {
                                backpdf = "";
                                insertSql = string.Format("insert into db_File values('{0}',\"{1}\",'{2}','{3}',{4},\"{5}\",\"{6}\",{7},{8},\"{9}\")", ViewModel.Begin_Code, file.Name, backStr[0], '否', 0, file.FullName, "", 0, "null", desDirName + "\\" + file.Name);
                                dbHelper.ExecuteNonQuery(insertSql, null);
                                ShowLog("本地数据库写入失败，文件可能包含乱码", 3);
                            }
                            listPdf.Add(backpdf);
                           // file.CopyTo(desDirName + "\\" + file.Name,true);
                            if (backStr[0] != "是" || backStr[1] != "是")
                            {
                                ViewModel.CurFail++;
                                ViewModel.TotalFail++;
                            }
                            else
                            {
                                ViewModel.CurSuc++;
                                ViewModel.TotalSuc++;
                            }
                            ViewModel.UnTidy--;
                            XiaoYangSum++;
                        }
                    }
                    else
                    {
                        FileInfo file = new FileInfo(fs.FullPath);
                        string backpdf;
                        string[] backStr = FileOprate_KanPan(file, reader, out backpdf);
                        string afterCopyFilename = CopyFile(file, desDirName);
                        string insertSql = string.Format("insert into db_File values('{0}',\"{1}\",'{2}','{3}',{4},\"{5}\",\"{6}\",{7},{8},\"{9}\")", ViewModel.Begin_Code, afterCopyFilename, backStr[0], backStr[1], 0, file.FullName, backStr[2].Replace('"', ' '), 0, "null", desDirName + "\\" + afterCopyFilename);
                        try
                        {
                            dbHelper.ExecuteNonQuery(insertSql, null);
                        }
                        catch (Exception e)
                        {
                            backpdf = "";
                            insertSql = string.Format("insert into db_File values('{0}',\"{1}\",'{2}','{3}',{4},\"{5}\",\"{6}\",{7},{8},\"{9}\")", ViewModel.Begin_Code, file.Name, backStr[0], '否', 0, file.FullName, "", 0, "null", desDirName + "\\" + file.Name);
                            dbHelper.ExecuteNonQuery(insertSql, null);
                            ShowLog("本地数据库写入失败，文件可能包含乱码", 3);
                        }
                        listPdf.Add(backpdf);
                        
                        //file.CopyTo(desDirName + "\\" + file.Name,true);
                        if (backStr[0] != "是" || backStr[1] != "是")
                        {
                            fs.HasTidy = -1;
                            ViewModel.TotalFail++;
                            ViewModel.CurFail++;
                        }
                        else
                        {
                            fs.HasTidy = 1;
                            ViewModel.CurSuc++;
                            ViewModel.TotalSuc++;
                        }
                        ViewModel.UnTidy--;
                        XiaoYangSum++;
                    }
                    fs.Checked = false;
                }

                string finalPdf;
                if (listPdf.Contains(""))
                    finalPdf = "";
                else
                {
                    finalPdf = ViewModel.Upload_Path + "\\" + ViewModel.Begin_Code + "[整].pdf";
                    CombineMultiplePDFs(listPdf, ref finalPdf);
                }
                int TotalPage = 0;
                if (finalPdf != "")
                    WaterMarkPdf(ref finalPdf, out TotalPage);
                string sql = "insert into XW_FileOrderinfo(编号,文件名,删除字样,保密否,提取页数,小样数,路径) values('{0}','{1}','{2}','{3}',{4},{5},'{6}')";
                sql = string.Format(sql, ViewModel.Begin_Code, finalPdf, "否", "否", TotalPage, XiaoYangSum,desDirName);
                dbHelper.ExecuteNonQuery(sql, null);
                //插入当前任务状态
                sql = "insert into db_State values('" + ViewModel.Begin_Code + "','否')";
                dbHelper.ExecuteNonQuery(sql, null);
                
                ShowLog(ViewModel.Begin_Code + "生成任务成功", 1);
                //计算下一个任务的流水号
                string lastFive = (Convert.ToInt32(ViewModel.Begin_Code.Substring(ViewModel.Begin_Code.Length - 5)) + 1).ToString();
                if (lastFive.Length < 5)
                {
                    string zero = "";
                    for (int i = 1; i <= 5 - lastFive.Length; i++)
                    {
                        zero += "0";
                    }
                    lastFive = zero + lastFive;
                }
                ViewModel.Begin_Code = ViewModel.TaskCode + lastFive;
                ConfigHelper.SetValue("BEGIN_CODE_Kanpan_"+ViewModel.GongHao, ViewModel.Begin_Code);
              
            }
            catch (Exception ee)
            {
                Utility.Log.TextLog.WritwLog(ee.Message);
            }
        }

        public void 刊盘批量生成()
        {
            try
            {
                ShowLog("开始批量生成", 2);
                //SQLiteDBHelper db = CreateDB(ViewModel.tempPath + "\\" + ViewModel.TaskCode + ".db");
                var checkedItem = ViewModel.Models.Where(m => { return m.Checked == true && m.Name != ".."; });
                if (checkedItem.Count() == 0)
                {
                    ShowLog("没有选择任何文件", 3);
                    return;
                }
                int readWordNum = Convert.ToInt32(ConfigHelper.GetValue("Word_Summary_Num"));
                int readPdfNum = Convert.ToInt32(ConfigHelper.GetValue("PDF_Summary_PageNum"));
                Reader reader = new Reader(readWordNum, readPdfNum);
                string insertSql;
                int year = DateTime.Now.Year;
                

                foreach (Model_FileSystem fs in checkedItem)
                {
                    if (tokenSource.Token.IsCancellationRequested)
                    {
                        ShowLog("整理停止", 2);
                        return;
                    }
                    string desDirName = ViewModel.AfterTydyPath + "\\" + ViewModel.Begin_Code;
                    if (!Directory.Exists(desDirName))
                        Directory.CreateDirectory(desDirName);
                    int XiaoYangSum = 0;
                    #region 包含一个文件夹的任务
                    
                    string backPdf;
                    if (fs.Type == SystemType.Dir)
                    {
                        var fileList = Traverse(fs.FullPath);
                        if (fileList.Where(f => { return (f.Extension.ToLower() == ".pdf" || f.Extension.ToLower() == ".doc" || f.Extension.ToLower() == ".docx"); }).Count() > 10)
                        {
                            ShowLog(fs.Name + "文件夹下有多个文件,可能不是同一作者,请打开分别整理", 3);
                            continue;
                        }
                        List<string> listPdf = new List<string>();
                        //foreach (FileInfo file in new DirectoryInfo(fs.FullPath).GetFiles())
                        foreach (FileInfo file in fileList)
                        {
                            string outpdf;
                            string[] backStr = FileOprate_KanPan(file, reader, out outpdf);
                            string afterCopyFilename = CopyFile(file, desDirName);
                            insertSql = string.Format("insert into db_File values('{0}',\"{1}\",'{2}','{3}',{4},\"{5}\",\"{6}\",{7},{8},\"{9}\")", ViewModel.Begin_Code, afterCopyFilename, backStr[0], backStr[1], 0, file.FullName, backStr[2].Replace('"', ' '), 0, "null", desDirName + "\\" + afterCopyFilename);
                            Utility.Log.TextLog.WritwLog("刊盘批量整理sql：" + insertSql);
                            try
                            {
                                dbHelper.ExecuteNonQuery(insertSql, null);
                            }
                            catch (Exception e)
                            {
                                outpdf = "";
                                insertSql = string.Format("insert into db_File values('{0}',\"{1}\",'{2}','{3}',{4},\"{5}\",\"{6}\",{7},{8},\"{9}\")", ViewModel.Begin_Code, file.Name, backStr[0], '否', 0, file.FullName,"", 0, "null", desDirName + "\\" + file.Name);
                                dbHelper.ExecuteNonQuery(insertSql, null);
                                ShowLog("本地数据库写入失败，文件可能包含乱码", 3);
                            }
                            if (backStr[0] != "是" || backStr[1] != "是")
                            {
                                ViewModel.CurFail++;
                                ViewModel.TotalFail++;
                            }
                            else
                            {
                                ViewModel.CurSuc++;
                                ViewModel.TotalSuc++;
                            }
                            ViewModel.UnTidy--;
                            //file.CopyTo(desDirName + "\\" + file.Name,true);
                            listPdf.Add(outpdf);
                            XiaoYangSum++;
                        }
                        if (listPdf.Contains(""))
                        {
                            backPdf = "";
                            fs.HasTidy = -1;
                        }
                        else
                        {
                            backPdf = ViewModel.Upload_Path + "\\" + ViewModel.Begin_Code + "[整].pdf";
                            CombineMultiplePDFs(listPdf, ref backPdf);
                            fs.HasTidy = 1;
                        }
                    }
#endregion

                    #region 文件
                    else
                    {
                        FileInfo file = new FileInfo(fs.FullPath);
                        string[] backStr = FileOprate_KanPan(file, reader, out backPdf);
                        string afterCopyFilename = CopyFile(file, desDirName);
                        insertSql = string.Format("insert into db_File values('{0}',\"{1}\",'{2}','{3}',{4},\"{5}\",\"{6}\",{7},{8},\"{9}\")", ViewModel.Begin_Code, afterCopyFilename, backStr[0], backStr[1], 0, file.FullName, backStr[2].Replace('"', ' '), 0, "null", desDirName + "\\" + afterCopyFilename);
                        insertSql.Replace("\0", "");
                        Utility.Log.TextLog.WritwLog("刊盘批量整理sql：" + insertSql);
                        try
                        {
                            dbHelper.ExecuteNonQuery(insertSql, null);
                        }
                        catch (Exception e)
                        {
                            insertSql = string.Format("insert into db_File values('{0}',\"{1}\",'{2}','{3}',{4},\"{5}\",\"{6}\",{7},{8},\"{9}\")", ViewModel.Begin_Code, file.Name, backStr[0], '否', 0, file.FullName, "", 0, "null", desDirName + "\\" + file.Name);
                            dbHelper.ExecuteNonQuery(insertSql, null);
                            ShowLog("本地数据库写入失败，文件可能包含乱码", 3);
                        }
                        
                        //file.CopyTo(desDirName + "\\" + file.Name,true);
                        //CopyFile(file, desDirName);
                        if (backStr[0] != "是" || backStr[1] != "是")
                        {
                            ViewModel.CurFail++;
                            ViewModel.TotalFail++;
                            fs.HasTidy = -1;
                        }
                        else
                        {
                            fs.HasTidy = 1;
                            ViewModel.CurSuc++;
                            ViewModel.TotalSuc++;
                        }
                        ViewModel.UnTidy--;
                        XiaoYangSum++;
                    }
                    #endregion

                    int TotalPage = 0;
                    if (backPdf!="")
                        WaterMarkPdf(ref backPdf, out TotalPage);
                    insertSql = "insert into XW_FileOrderinfo(编号,文件名,删除字样,保密否,提取页数,小样数,路径) values('{0}','{1}','{2}','{3}',{4},{5},'{6}')";
                    insertSql = string.Format(insertSql, ViewModel.Begin_Code, backPdf, "否", "否", TotalPage, XiaoYangSum,desDirName);
                    dbHelper.ExecuteNonQuery(insertSql, null);
                    //插入当前任务状态
                    insertSql = "insert into db_State values('" + ViewModel.Begin_Code + "','否')";
                    dbHelper.ExecuteNonQuery(insertSql, null);
                    
                    ShowLog(ViewModel.Begin_Code + "生成任务成功!", 1);
                    string lastFive = (Convert.ToInt32(ViewModel.Begin_Code.Substring(ViewModel.Begin_Code.Length - 5)) + 1).ToString();
                    if (lastFive.Length < 5)
                    {
                        string zero = "";
                        for (int i = 1; i <= 5 - lastFive.Length; i++)
                        {
                            zero += "0";
                        }
                        lastFive = zero + lastFive;
                    }
                    ViewModel.Begin_Code = ViewModel.TaskCode + lastFive;
                    ConfigHelper.SetValue("BEGIN_CODE_Kanpan_"+ViewModel.GongHao, ViewModel.Begin_Code);
                    fs.Checked = false;
                  
                }
                
                ShowLog("批量生成结束", 2);
            }
            catch (Exception ee)
            {
                Utility.Log.TextLog.WritwLog(ee.Message);
                ShowLog("整理出错:"+ee.Message,3);
            }
        }

        public void 重整刊盘错误()
        {
            try
            {
                ShowLog("开始重新整理失败刊盘任务", 2);
                var checkedItem = ViewModel.Models.Where(m => m.Checked == true);
                int readWordNum = Convert.ToInt32(ConfigHelper.GetValue("Word_Summary_Num"));
                int readPdfNum = Convert.ToInt32(ConfigHelper.GetValue("PDF_Summary_PageNum"));
                Reader reader = new Reader(readWordNum, readPdfNum);
                //for(int i=0;i<checkedItem.Count();i++)
                foreach (Model_FileSystem fs in checkedItem)
                {
                    System.Data.DataTable dt = dbHelper.ExecuteDataTable("select 路径 from db_File where 编号='" + fs.Name + "'", null);
                    //bool haha = true;//如果这批任务中有一个文件没有整理成功,则该任务就不算整理成功
                    List<string> listPdf=new List<string>();
                    int XiaoYangSum = dt.Rows.Count;
                    foreach (System.Data.DataRow row in dt.Rows)
                    {
                        FileInfo file = new FileInfo(row[0].ToString());
                        string outpdf;
                        string[] backStr = FileOprate_KanPan(file, reader, out outpdf);
                        string updateSql = string.Format("update db_File set 提取='{0}',可读='{1}',摘要=\"{2}\",起始页={3},结束页={4} where 路径=\"{5}\"", backStr[0], backStr[1], backStr[2], 0, 0, row[0].ToString());
                        dbHelper.ExecuteNonQuery(updateSql, null);
                        listPdf.Add(outpdf);
                    }
                    
                    if (listPdf.Contains(""))
                        ShowLog("任务编号" + fs.Name + "重新整理失败!", 3);
                    else
                    {
                        string finalPdf = ViewModel.Upload_Path + "\\" + fs.Name + "[整].pdf";
                        int TotalPage = 0;
                        if(CombineMultiplePDFs(listPdf, ref finalPdf))
                            WaterMarkPdf(ref finalPdf, out TotalPage, fs.Name);
                        string updateSql = "update XW_FileOrderinfo set 小样数=" + XiaoYangSum + ",提取页数=" + TotalPage + ", 文件名='" + finalPdf + "' where 编号='" + fs.Name + "'";
                        dbHelper.ExecuteNonQuery(updateSql, null);
                        RemoveItem(fs);
                        ShowLog("任务编号" + fs.Name + "重新整理成功!", 2);
                    }
                }
                
            }
            catch (Exception ee)
            {
                Utility.Log.TextLog.WritwLog(ee.Message);
            }
        }

        public void 重整纯盘错误()
        {
            try
            {
                ShowLog("开始重新整理失败纯盘任务", 2);
                var checkedItem = ViewModel.Models.Where(m => m.Checked == true);
                foreach (Model_FileSystem fs in checkedItem)
                {
                    System.Data.DataTable dt = dbHelper.ExecuteDataTable("select 路径 from db_File where 编号='" + fs.Name + "'", null);
                    //bool haha = true;//如果这批任务中有一个文件没有整理成功,则该任务就不算整理成功
                    List<string> listPdf = new List<string>();
                    int XiaoYangSum = dt.Rows.Count;
                    foreach (System.Data.DataRow row in dt.Rows)
                    {
                        FileInfo file = new FileInfo(row[0].ToString());
                        string outpdf;
                        string[] backStr = FileOprate_Chunpan(file, out outpdf);
                        string updateSql = string.Format("update db_File set 提取='{0}',可读='{1}',起始页={2},结束页={3} where 路径=\"{4}\"", backStr[0], backStr[1], 0, 0, row[0].ToString());
                        dbHelper.ExecuteNonQuery(updateSql, null);
                        listPdf.Add(outpdf);

                    }
                    if (listPdf.Contains(""))
                        ShowLog("任务编号" + fs.Name + "重新整理失败!", 3);
                    else
                    {
                        string finalPdf = ViewModel.Upload_Path + "\\" + fs.Name + "[整].pdf";
                        int TotalPage = 0;
                        if (CombineMultiplePDFs(listPdf, ref finalPdf))
                            WaterMarkPdf(ref finalPdf, out TotalPage, fs.Name);
                        string updateSql = "update XW_FileOrderinfo set 小样数=" + XiaoYangSum + ", 提取页数=" + TotalPage + ", 文件名='" + finalPdf + "' where 编号='" + fs.Name + "'";
                        dbHelper.ExecuteNonQuery(updateSql, null);
                        RemoveItem(fs);
                        ShowLog("任务编号" + fs.Name + "重新整理成功!", 2);
                    }
                }
            }
            catch (Exception ee)
            {
                Utility.Log.TextLog.WritwLog(ee.Message);
            }
        }

        public List<FileInfo> Traverse(string sPathName)
        {
            List<FileInfo> list = new List<FileInfo>();
            //创建一个队列用于保存子目录
            Queue<string> pathQueue = new Queue<string>();
            pathQueue.Enqueue(sPathName);
            //开始循环查找文件，直到队列中无任何子目录
            while (pathQueue.Count > 0)
            {
                DirectoryInfo diParent = new DirectoryInfo(pathQueue.Dequeue());
                foreach (DirectoryInfo diChild in diParent.GetDirectories())
                    pathQueue.Enqueue(diChild.FullName);
                foreach (FileInfo fi in diParent.GetFiles())
                {
                    if (fi.Name.StartsWith("~$"))
                        continue;
                    list.Add(fi);
                }
            }
            return list;
        }


        /// <summary>
        /// 处理纯盘任务文件
        /// </summary>
        /// <param name="file">要处理的文件</param>
        /// <param name="page"></param>
        /// <returns>string[]{提取,可读}</returns>
        private string[] FileOprate_Chunpan(FileInfo file, out string BackPdfPath)
        {

            string pdfPath="";
            string[] result;
            if (file.Extension.ToLower() == ".doc" || file.Extension.ToLower() == ".docx" || file.Extension.ToLower() == ".wps" || file.Extension.ToLower() == ".rtf" || file.Extension.ToLower() == ".dot")
            {
                Task<string> word2pdf = new Task<string>(MadeWord, file.FullName);
                word2pdf.Start();
                word2pdf.Wait(60 * 1000);
                if (word2pdf.IsCompleted)
                {
                    pdfPath = word2pdf.Result;
                    if (pdfPath != "")
                    {
                        result = new string[2] { "是", "是" };
                    }
                    else
                    {
                        result = new string[2] { "否", "否" };
                    }
                }
                else
                {
                    result = new string[2] { "否", "否" };
                    Reader.KillWord();
                }

                //pdfPath = MadeWord(file.FullName);
                //if (pdfPath != "")
                //{
                //    result= new string[2] { "是", "是"};
                //}
                //else
                //{
                //    result = new string[2] { "否", "否" };
                //}
            }
            else if (file.Extension.ToLower() == ".pdf")
            {
                pdfPath = MadePdf(file.FullName);
                if (pdfPath != "")
                {
                    result = new string[2] { "是", "是" };
                }
                else
                {
                    result = new string[2] { "否", "否" };
                }
            }
            else if (file.Extension.ToLower() == ".jpg" ||file.Extension.ToLower() == ".jpeg"|| file.Extension.ToLower() == ".tif" || file.Extension.ToLower() == ".bmp" || file.Extension.ToLower() == ".png")
            {
                pdfPath = MadeJpg(file.FullName);
                if (pdfPath != "")
                {
                    result = new string[2] { "是", "是" };
                }
                else
                {
                    result = new string[2] { "否", "否" };
                }
            }
            else
            {
                result = new string[2] { "不需", "不需" };
                pdfPath = "";
            }
            BackPdfPath = pdfPath;
            return result;
        }
        /// <summary>
        /// 刊盘 文件处理
        /// </summary>
        /// <param name="file">要整理的文件</param>
        /// <param name="reader">读取word或pdf的方法</param>
        /// <returns>在pdf中的页数, 和string[]{提取,可读,摘要}</returns>
        private string[] FileOprate_KanPan(FileInfo file, Reader reader,out string BackPdfPath)
        {
            
            string text = "";
            
            string[] result=new string[3];
            //if (file.Extension.ToLower() != ".rtf"&&file.Extension.ToLower() != ".jpg" &&file.Extension.ToLower() != ".doc" && file.Extension.ToLower() != ".docx" && file.Extension.ToLower() != ".wps" && file.Extension.ToLower() != ".pdf")
            //{
            //    BackPdfPath = "不需";
            //    return new string[3]{"不需","不需",""};
            //}
            string pdfPath=null;
            if (file.Extension.ToLower() == ".doc" || file.Extension.ToLower() == ".docx" || file.Extension.ToLower() == ".wps" || file.Extension.ToLower() == ".rtf" || file.Extension.ToLower() == ".dot")
            {
                if (file.Name.StartsWith("~$"))
                {
                    BackPdfPath = "不需";
                    return new string[3] { "不需", "不需", "" };
                }

                Task<string> word2pdf = new Task<string>(MadeWord, file.FullName);
                word2pdf.Start();
                word2pdf.Wait(60 * 1000);
                if (word2pdf.IsCompleted)
                {
                    pdfPath = word2pdf.Result;
                    if (pdfPath != "")
                    {
                        result[0] = "是";
                    }
                    else
                    {
                        result[0] = "否";
                    }
                }
                else
                {
                    result[0] = "否";
                    pdfPath = "";
                    Reader.KillWord();
                }
                reader.ReadHandler = reader.ReadWord;
            }
            else if (file.Extension.ToLower() == ".pdf")
            {
                pdfPath = MadePdf(file.FullName);
                if (pdfPath != "")
                    result[0] = "是";
                else
                    result[0] = "否";
                reader.ReadHandler = reader.ReadPdf;
            }
            else if (file.Extension.ToLower() == ".jpg" ||file.Extension.ToLower() == ".jpeg"|| file.Extension.ToLower() == ".tif" || file.Extension.ToLower() == ".bmp" || file.Extension.ToLower() == ".png")
            {
                pdfPath = MadeJpg(file.FullName);
                if (pdfPath != "")
                    result[0] = "是";
                else
                    result[0] = "否";
            }
            else
            {
                BackPdfPath = "";
                return new string[3] { "不需", "不需", "" };
            }
            try
            {
                if (file.Extension.ToLower() == ".doc" || file.Extension.ToLower() == ".docx" || file.Extension.ToLower() == ".wps" || file.Extension.ToLower() == ".rtf" || file.Extension.ToLower() == ".pdf")
                {
                    text = reader.ReadWithTimeout(file.FullName);
                }
            }
            catch (Exception e1)
            {
                result[1] = "否";
            }
            if (text == "文件读取异常" || text == "文件读取超时"||text == "文件内容为乱码")//如果是文件读取超时需要注意杀死pdftotext.exe，否则文件占用无法移动
            {
                ShowLog(file.Name + text, 3);
                result[1] = "否";
                result[2] =file.Name;

            }
           
            else
            {
                result[1] = "是";
                result[2] = file.Name+text;
            }
            BackPdfPath = pdfPath;
            return result;
        }

        
        /// <summary>
        /// 整理图片为pdf
        /// </summary>
        /// <param name="path">图片路径</param>
        /// <returns>生成的pdf路径</returns>
        private string MadeJpg( string jpgfile)
        {
            try
            {
                string jpgname = System.IO.Path.GetFileName(jpgfile);
                string pdf = ViewModel.Upload_Path + "\\" + jpgname.Substring(0, jpgname.LastIndexOf('.')) + "[整].pdf";
                var document = new Document(iTextSharp.text.PageSize.A4, 25, 25, 25, 25);
                using (var stream = new FileStream(pdf, FileMode.Create, FileAccess.Write, FileShare.None))
                {
                    PdfWriter.GetInstance(document, stream);
                    document.Open();
                    using (var imageStream = new FileStream(jpgfile, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))
                    {
                        var image = iTextSharp.text.Image.GetInstance(imageStream);
                        if (image.Height > iTextSharp.text.PageSize.A4.Height - 25)
                        {
                            image.ScaleToFit(iTextSharp.text.PageSize.A4.Width - 25, iTextSharp.text.PageSize.A4.Height - 25);
                        }
                        else if (image.Width > iTextSharp.text.PageSize.A4.Width - 25)
                        {
                            image.ScaleToFit(iTextSharp.text.PageSize.A4.Width - 25, iTextSharp.text.PageSize.A4.Height - 25);
                        }
                        image.Alignment = iTextSharp.text.Image.ALIGN_MIDDLE;
                        document.Add(image);
                    }
                    document.Close();
                }
                return pdf;
            }
            catch (Exception e)
            {
                Utility.Log.TextLog.WritwLog(e.Message+"  文件名是:" + jpgfile, true);
                return "";
            }
        }
        /// <summary>
        /// 从word中提取pdf文件,不加后五页
        /// </summary>
        /// <param name="wordFilePath"></param>
        /// <returns></returns>
        public string MadeWord(object wordFilePath)
        {
            Word.Application _app = null;
            Word.Document document = null;
            string filename = System.IO.Path.GetFileName(wordFilePath.ToString());
            string fullPdfName = ViewModel.Upload_Path + "\\" + filename.Substring(0, filename.LastIndexOf('.')) + "[整].pdf";
            try
            {

                _app = new Word.Application();
                Word.Documents d = _app.Documents;
                document = d.Open(wordFilePath, false, false, false, ref G_missing, G_missing, false, G_missing, G_missing, G_missing, G_missing, false, false, G_missing, true, G_missing);
                Word.Document P_document = d.Add(ref G_missing, G_missing, ref G_missing);

                Utility.Log.TextLog.WritwLog("打开word文件成功");
                var tocs = document.TablesOfContents;
                Utility.Log.TextLog.WritwLog("获取word目录");
                //如果此word文件没有目录
                if (tocs.Count == 0)
                {
                    Utility.Log.TextLog.WritwLog("word目录是零");
                    int to = Convert.ToInt32(ConfigHelper.GetValue("Word_NoCatalog_ExNum"));
                    document.ExportAsFixedFormat(fullPdfName, Word.WdExportFormat.wdExportFormatPDF, false, Word.WdExportOptimizeFor.wdExportOptimizeForPrint, Word.WdExportRange.wdExportFromTo, 1, to);
                    //document.Close();
                    //_app.Quit();
                    //return fullPdfName;

                }
                else
                {
                    var toc = tocs[1];
                    Utility.Log.TextLog.WritwLog("找到word目录");
                    Word.Range ran = toc.Range.Previous(Word.WdUnits.wdSection);
                    if (ran == null)
                    {
                        int to = Convert.ToInt32(ConfigHelper.GetValue("Word_NoCatalog_ExNum"));
                        document.ExportAsFixedFormat(fullPdfName, Word.WdExportFormat.wdExportFormatPDF, false, Word.WdExportOptimizeFor.wdExportOptimizeForPrint, Word.WdExportRange.wdExportFromTo, 1, to);
                        //document.Close();
                        //_app.Quit();
                        //return fullPdfName;
                    }
                    else
                    {
                        while (ran != null)
                        {
                            ran.Copy();
                            P_document.ActiveWindow.Selection.GoTo(ref What, ref Which, ref G_missing, ref G_missing);
                            try
                            {
                                P_document.ActiveWindow.Selection.Paste();
                            }
                            catch (Exception e)
                            {
                                string text = P_document.Tables[1].Range.Text;
                                P_document.Tables[1].Delete();
                                P_document.Range(0, 0).Text = text;
                                P_document.ActiveWindow.Selection.Paste();
                            }
                            ran = ran.Previous(Word.WdUnits.wdSection);
                        }
                        P_document.ExportAsFixedFormat(fullPdfName, Word.WdExportFormat.wdExportFormatPDF);//word前几页转成pdf文件
                    }
                    //object saveOption= Word.WdSaveOptions.wdDoNotSaveChanges;


                }
                
                (document as Word._Document).Close(ref saveOption, ref G_missing, ref G_missing);
                Marshal.FinalReleaseComObject(document);
                (P_document as Word._Document).Close(ref saveOption, ref G_missing, ref G_missing);
                Marshal.FinalReleaseComObject(P_document);
                Marshal.FinalReleaseComObject(d);
                (_app as Word._Application).Quit(ref G_missing, ref G_missing, ref G_missing);
                Marshal.FinalReleaseComObject(_app);

                return fullPdfName;
            }
            catch (Exception e)
            {
                //if (document != null)
                //    (document as Word._Document).Close(ref saveOption, ref G_missing, ref G_missing);
                //if (_app != null)
                //    (_app as Word._Application).Quit(ref G_missing, ref G_missing, ref G_missing);
                Utility.Log.TextLog.WritwLog(e.Message);
                ShowLog(e.Message, 3);
                return "";
            }
        }

        #region 加后五页
        /// <summary>
        /// 每个word各自生成单独的非正文页PDF
        /// </summary>
        /// <param name="wordFilePath">word文件路径</param>
        /// <returns>转换好的pdf文件路径</returns>
        //public string MadeWord( object wordFilePath)
        //{
        //    Word.Application _app = null;
        //    Word.Document document = null;
        //    string filename = System.IO.Path.GetFileName(wordFilePath.ToString());
        //    string fullPdfName_Front= ViewModel.Upload_Path + "\\" + filename.Substring(0, filename.LastIndexOf('.')) + "[整front].pdf";
        //    string fullPdfName_Back = ViewModel.Upload_Path + "\\" + filename.Substring(0, filename.LastIndexOf('.')) + "[整back].pdf";
        //    try
        //    {
               
        //        //Utility.Log.TextLog.WritwLog("开始打开word文件");
        //        _app = new Word.Application();
        //        //Utility.Log.TextLog.WritwLog("1");
        //        Word.Documents d = _app.Documents;
        //        //Utility.Log.TextLog.WritwLog("2");
        //        document = d.Open(wordFilePath, false, false, false, ref G_missing, G_missing, false, G_missing, G_missing, G_missing, G_missing, false, false, G_missing, true, G_missing);
        //        Word.Document P_document = d.Add(ref G_missing, G_missing, ref G_missing);

               

        //        Utility.Log.TextLog.WritwLog("打开word文件成功");
        //        var tocs = document.TablesOfContents;
        //        Utility.Log.TextLog.WritwLog("获取word目录");
        //        //如果此word文件没有目录
        //        if (tocs.Count == 0)
        //        {
        //            Utility.Log.TextLog.WritwLog("word目录是零");
        //            int to = Convert.ToInt32(ConfigHelper.GetValue("Word_NoCatalog_ExNum"));
        //            document.ExportAsFixedFormat(fullPdfName_Front, Word.WdExportFormat.wdExportFormatPDF, false, Word.WdExportOptimizeFor.wdExportOptimizeForPrint, Word.WdExportRange.wdExportFromTo, 1, to);
        //            //document.Close();
        //            //_app.Quit();
        //            //return fullPdfName;
                    
        //        }
        //        else
        //        {
        //            var toc = tocs[1];
        //            Utility.Log.TextLog.WritwLog("找到word目录");
        //            Word.Range ran = toc.Range.Previous(Word.WdUnits.wdSection);
        //            if (ran == null)
        //            {
        //                int to = Convert.ToInt32(ConfigHelper.GetValue("Word_NoCatalog_ExNum"));
        //                document.ExportAsFixedFormat(fullPdfName_Front, Word.WdExportFormat.wdExportFormatPDF, false, Word.WdExportOptimizeFor.wdExportOptimizeForPrint, Word.WdExportRange.wdExportFromTo, 1, to);
        //                //document.Close();
        //                //_app.Quit();
        //                //return fullPdfName;
        //            }
        //            else
        //            {
        //                while (ran != null)
        //                {
        //                    //if (ran.InlineShapes.Count != 0)
        //                    //{
        //                    //    int i=1;
        //                    //    foreach (Word.InlineShape shape in ran.InlineShapes)
        //                    //    {
        //                    //        shape.Select();
        //                    //        _app.Selection.Copy();
        //                    //        System.Drawing.Image image = System.Windows.Forms.Clipboard.GetImage();
        //                    //        image.Save(@"C:\Users\Administrator\Desktop\郭老师爱装逼(3)\"+i++ + ".jpg");
        //                    //        ShowLog("保存了一张图", 1);
        //                    //    }
        //                    //        //ShowLog(string.Format("bottom:{0},top:{1},left:{2},right:{3}", shape.PictureFormat.CropBottom, shape.PictureFormat.CropTop, shape.PictureFormat.CropLeft, shape.PictureFormat.CropRight), 1);
        //                    //    ShowLog(filename + "图片页:" + ran.get_Information(Word.WdInformation.wdActiveEndPageNumber), 1);
        //                    //}
        //                    ran.Copy();
        //                    P_document.ActiveWindow.Selection.GoTo(ref What, ref Which, ref G_missing, ref G_missing);
        //                    try
        //                    {
        //                        P_document.ActiveWindow.Selection.Paste();
        //                    }
        //                    catch (Exception e)
        //                    {
        //                        string text = P_document.Tables[1].Range.Text;
        //                        P_document.Tables[1].Delete();
        //                        P_document.Range(0, 0).Text = text;
        //                        P_document.ActiveWindow.Selection.Paste();
        //                    }
        //                    ran = ran.Previous(Word.WdUnits.wdSection);
        //                }
        //                Utility.Log.TextLog.WritwLog("开始转pdf");
        //                P_document.ExportAsFixedFormat(fullPdfName_Front, Word.WdExportFormat.wdExportFormatPDF);//word前几页转成pdf文件
        //                Utility.Log.TextLog.WritwLog("转pdf成功");
        //            }
        //            //object saveOption= Word.WdSaveOptions.wdDoNotSaveChanges;
                   
                    
        //        }
        //        int pages = document.ComputeStatistics(Microsoft.Office.Interop.Word.WdStatistic.wdStatisticPages);
        //        //word文件后几页转成pdf文件
        //        document.ExportAsFixedFormat(fullPdfName_Back, Word.WdExportFormat.wdExportFormatPDF, false, Word.WdExportOptimizeFor.wdExportOptimizeForPrint, Word.WdExportRange.wdExportFromTo, pages - 5, pages);
        //        List<string> list = new List<string> { fullPdfName_Front, fullPdfName_Back };
        //        string fullPdfName = ViewModel.Upload_Path + "\\" + filename.Substring(0, filename.LastIndexOf('.')) + "[整].pdf";
        //        CombineMultiplePDFs(list, ref fullPdfName);
                
        //        (document as Word._Document).Close(ref saveOption, ref G_missing, ref G_missing);
        //        Marshal.FinalReleaseComObject(document);
        //        (P_document as Word._Document).Close(ref saveOption, ref G_missing, ref G_missing);
        //        Marshal.FinalReleaseComObject(P_document);
        //        Marshal.FinalReleaseComObject(d);
        //        (_app as Word._Application).Quit(ref G_missing, ref G_missing, ref G_missing);
        //        Marshal.FinalReleaseComObject(_app);

        //        return fullPdfName;
        //    }
        //    catch (Exception e)
        //    {
        //        //if (document != null)
        //        //    (document as Word._Document).Close(ref saveOption, ref G_missing, ref G_missing);
        //        //if (_app != null)
        //        //    (_app as Word._Application).Quit(ref G_missing, ref G_missing, ref G_missing);
        //        Utility.Log.TextLog.WritwLog(e.Message);
        //        ShowLog(e.Message, 3);
        //        return "";
        //    }
        //}
        #endregion

        public string MadePdf( string pdfFilePath)
        {
            try
            {
                /*加密的pdf文件程序无法识别,但可以人工打开浏览*/
                PdfReader testReader = new PdfReader(pdfFilePath);
                if (testReader.IsEncrypted())
                {
                    testReader.Close();
                    return "";
                }
                testReader.Close();
                /*加密的pdf文件程序无法识别,但可以人工打开浏览*/
                string pdfname = System.IO.Path.GetFileName(pdfFilePath);
                string fullPdfName = ViewModel.Upload_Path + "\\" + pdfname.Substring(0, pdfname.LastIndexOf('.')) + "[整].pdf";
                PDF.Document document = new PDF.Document();
                PdfCopy writer = new PdfCopy(document, new FileStream(fullPdfName, FileMode.Create));
                document.Open();

                PdfReader reader = new PdfReader(pdfFilePath);
                reader.ConsolidateNamedDestinations();
                int pageNum = Convert.ToInt32(ConfigHelper.GetValue("PDF_ExNum"));
                pageNum = reader.NumberOfPages > pageNum ? pageNum : reader.NumberOfPages;
                for (int i = 1; i <= pageNum; i++)
                {
                    PdfImportedPage page = writer.GetImportedPage(reader, i);
                    writer.AddPage(page);
                }
                reader.Close();
                writer.Close();
                document.Close();
                return fullPdfName;
            }
            catch (Exception e)
            {
                Utility.Log.TextLog.WritwLog("整理" + pdfFilePath + "失败:" + e.Message, true);
                return "";
            }
        }

        /// <summary>
        /// 添加普通偏转角度文字水印
        /// </summary>
        /// <param name="inputfilepath">输入pdf文件</param>
        /// <param name="outputfilepath">输出pdf文件</param>
        /// <param name="waterMarkName">水印文字</param>
        /// <param name="page">第几页</param>
        public  void SetWatermark(string inputfilepath, string outputfilepath, string waterMarkName,int page)
        {
            PdfReader pdfReader = null;
            PdfStamper pdfStamper = null;
            try
            {
                pdfReader = new PdfReader(inputfilepath);
                pdfStamper = new PdfStamper(pdfReader, new FileStream(outputfilepath, FileMode.Create));
                //int total = pdfReader.NumberOfPages + 1;
                iTextSharp.text.Rectangle psize = pdfReader.GetPageSize(1);
                float width = psize.Width;
                float height = psize.Height;
                PdfContentByte content;
                BaseFont font = BaseFont.CreateFont(@"C:\WINDOWS\Fonts\SIMFANG.TTF", BaseFont.IDENTITY_H, BaseFont.EMBEDDED);
                PdfGState gs = new PdfGState();
               
                    //content = pdfStamper.GetOverContent(i);//在内容上方加水印
                    content = pdfStamper.GetUnderContent(page);//在内容下方加水印
                    //透明度
                    gs.FillOpacity = 0.8f;
                    content.SetGState(gs);
                    //content.SetGrayFill(0.3f);
                    //开始写入文本
                    content.BeginText();
                    content.SetColorFill(BaseColor.RED);
                    content.SetFontAndSize(font, 50);
                    content.SetTextMatrix(0, 0);
                    content.ShowTextAligned(Element.ALIGN_CENTER, waterMarkName, width / 2, height - 50, 0);
                    content.EndText();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {

                if (pdfStamper != null)
                    pdfStamper.Close();

                if (pdfReader != null)
                    pdfReader.Close();
            }
        }

        public void SetWatermark(string inputfilepath, string outputfilepath,System.Data.DataTable table)
        {
            PdfReader pdfReader = null;
            PdfStamper pdfStamper = null;
            try
            {
                pdfReader = new PdfReader(inputfilepath);
                pdfStamper = new PdfStamper(pdfReader, new FileStream(outputfilepath, FileMode.Create));
                //int total = pdfReader.NumberOfPages + 1;
                iTextSharp.text.Rectangle psize = pdfReader.GetPageSize(1);
                float width = psize.Width;
                float height = psize.Height;
                PdfContentByte content;
                BaseFont font = BaseFont.CreateFont(@"C:\WINDOWS\Fonts\SIMFANG.TTF", BaseFont.IDENTITY_H, BaseFont.EMBEDDED);
                PdfGState gs = new PdfGState();
                foreach (System.Data.DataRow row in table.Rows)
                {
                    //content = pdfStamper.GetUnderContent(i);//在内容下方加水印
                    if (row[1].ToString() == "0"||row[2].ToString()=="0")
                        continue;
                    content = pdfStamper.GetOverContent(Convert.ToInt32(row[1]));//在内容上方加水印
                    //透明度
                    gs.FillOpacity = 0.8f;
                    content.SetGState(gs);
                    //content.SetGrayFill(0.3f);
                    //开始写入文本
                    content.BeginText();
                    content.SetColorFill(BaseColor.RED);
                    content.SetFontAndSize(font, 50);
                    content.SetTextMatrix(0, 0);
                    content.ShowTextAligned(Element.ALIGN_CENTER, row[0]+"任务开始", width / 2, height - 50, 0);
                    content.EndText();

                    content = pdfStamper.GetOverContent(Convert.ToInt32(row[2]));//在内容上方加水印
                    //透明度
                    gs.FillOpacity = 0.8f;
                    content.SetGState(gs);
                    //content.SetGrayFill(0.3f);
                    //开始写入文本
                    content.BeginText();
                    content.SetColorFill(BaseColor.RED);
                    content.SetFontAndSize(font, 50);
                    content.SetTextMatrix(0, 0);
                    content.ShowTextAligned(Element.ALIGN_CENTER, row[0] + "任务结束", width / 2, 20, 0);
                    content.EndText();
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {

                if (pdfStamper != null)
                    pdfStamper.Close();

                if (pdfReader != null)
                    pdfReader.Close();
            }
        }

        //public void ChangePDFName()
        //{
        //    System.Text.RegularExpressions.Match match=System.Text.RegularExpressions.Regex.Match(CurPdfName, "\\d.");
        //    if (match.Success)
        //    {
        //        string value = match.Value.Replace(".", "") ;
        //        CurPdfName = "非正文页" + (Convert.ToInt32(value) + 1) + ".pdf";
        //    }
        //}
      
     
        /// <summary>
        /// 合并两个PDF文件
        /// </summary>
        /// <param name="firstFileName">第一个pdf文件名</param>
        /// <param name="sencondFileName">第二个pdf文件名</param>
        /// <param name="outFile">合并后文件名</param>
        /// <param name="start">第二个文件在合并后文件的起始页数</param>
        /// <param name="end">第二个文件在合并后文件的结束页数</param>
        public void CombineMultiplePDFs(string firstFileName,string sencondFileName, string outFile, out int start, out int end)
        {
            start = end = 0;
            string[] fileNames = {firstFileName,sencondFileName };
            PDF.Document document = new PDF.Document();
            PdfCopy writer = new PdfCopy(document, new FileStream(outFile, FileMode.Create));
            document.Open();
            for (int j=0;j<fileNames.Length;j++)
            {
                PdfReader reader = new PdfReader(fileNames[j]);
                if (j == 0)
                {
                    start = reader.NumberOfPages + 1;
                }
                else if (j == 1)
                {
                    end = start + reader.NumberOfPages - 1;
                }
                reader.ConsolidateNamedDestinations();
                for (int i = 1; i <= reader.NumberOfPages; i++)
                {
                    PdfImportedPage page = writer.GetImportedPage(reader, i);
                    writer.AddPage(page);
                }
                reader.Close();
            }
            writer.Close();
            document.Close();
        }

        public bool CombineMultiplePDFs(List<string> Paths, ref string outFile)
        {
            try
            {
                PDF.Document document = new PDF.Document();
                PdfCopy writer = new PdfCopy(document, new FileStream(outFile, FileMode.Create));
                document.Open();
                for (int j = 0; j < Paths.Count; j++)
                {
                    if (Paths[j] == "不需")
                        continue;
                    PdfReader reader = new PdfReader(Paths[j]);
                    reader.ConsolidateNamedDestinations();
                    for (int i = 1; i <= reader.NumberOfPages; i++)
                    {
                        PdfImportedPage page = writer.GetImportedPage(reader, i);
                        writer.AddPage(page);
                    }
                    reader.Close();
                }
                writer.Close();
                document.Close();
                foreach (string s in Paths)
                    File.Delete(s);
                return true;
            }
            catch (Exception e)
            {
                Utility.Log.TextLog.WritwLog("合并pdf失败:"+e.Message, true);
                outFile = "";
                return false;

            }
        }

        /// <summary>
        /// 复制文件到目标文件夹，如果存在同名文件，则文件名前面加数字
        /// </summary>
        /// <param name="file">文件</param>
        /// <param name="des">目标文件夹路径</param>
        /// 返回实际复制后的文件名
        public string CopyFile(FileInfo file, string des)
        {
            string fileName=file.Name;
            int i=1;
            while (File.Exists(Path.Combine(des, fileName)))
            {
                fileName = file.Name.Remove(file.Name.LastIndexOf('.')) + "_" + i.ToString() + file.Extension;
                i++;
            }
            File.Copy(file.FullName, Path.Combine(des,fileName));
            return fileName;
        }
        
    }

  
}
